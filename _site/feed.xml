<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seif-Allah's Blog</title>
    <description>“I wanted to save the world.”</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 14 Mar 2021 15:11:40 +0100</pubDate>
    <lastBuildDate>Sun, 14 Mar 2021 15:11:40 +0100</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Subnets</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;When you define only one network, what happens if you wanted to take one network address and create six networks from it? You would have to do something called &lt;em&gt;subnetting&lt;/em&gt;, because that’s what allows you to take one larger network and break it into a bunch of smaller networks.
There are loads of reasons if favor of subnetting, including the following benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reduced network traffic&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Optimized network performance&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Simplified management&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Facilitated spanning of large geographical distances&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-create-subnets&quot;&gt;How to Create Subnets&lt;/h3&gt;

&lt;p&gt;To create subnetworks, you take&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Mar 2021 00:00:00 +0100</pubDate>
        <link>/vlsm/</link>
        <guid isPermaLink="true">/vlsm/</guid>
        
        
        <category>Networking</category>
        
      </item>
    
      <item>
        <title>Linux Bootloaders</title>
        <description>&lt;h3 id=&quot;linux-bootloaders&quot;&gt;Linux Bootloaders&lt;/h3&gt;

&lt;p&gt;The bootloader program helps bridge the gap between the system firmware and the full Linux operating system kernel. In Linux, you have many choices of bootloaders. The most popular ones that you’ll run across are these :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Linux Loader (LILO)&lt;/li&gt;
  &lt;li&gt;Grand Unified Bootloader (GRUB) Legacy&lt;/li&gt;
  &lt;li&gt;GRUB2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the original versions of Linux, the Linux Loader (LILO) bootloader was the only one available. It was extremely limited in what it could do, but it accomplished its purpose, that is, loading the Linux kernel from the BIOS startup. LILO became the default bootloader used by Linux distributions in the 1990s. The LILO configuration file is stored in a single file, UEFI, &lt;em&gt;/etc/lilo.conf&lt;/em&gt;, which defines the systems to boot. Unfortunately, LILO doesn’t work with UEFI systems, so it has limited use on modern systems and is quickly fading into history.&lt;/p&gt;

&lt;p&gt;The first version of the GRUB bootloader (now called GRUB Legacy) was created in 1999 to provide a more robust and configurable bootloader to replace LILO. GRUB quickly became the default bootloader for all linux distributions, whether they run on BIOS or UEFI systems.&lt;/p&gt;

&lt;p&gt;GRUB2 was created in 2005 as a total rewrite of the GRUB Legacy system. It supports advanced features, such as the ability to load hardware driver modules and use logic statements to alter the boot menu options dynamically, depending on conditions detected on the system (such as if an external hard drive is connected).&lt;/p&gt;

&lt;h3 id=&quot;grub-legacy&quot;&gt;GRUB Legacy&lt;/h3&gt;

&lt;p&gt;GRUB Legacy allows you to select multiple kernels and /or operating systems using a menu interface as well as an interactive shell. You configure the menu interface to provide options for each kernel or operating system you wish to boot. The interactive shell provides a way for you to customize boot commands on the fly.&lt;/p&gt;

&lt;p&gt;Both the menu and the interactive shell utilize a set of commands that control features of the bootloader.&lt;/p&gt;

&lt;h3 id=&quot;configuring-grub-legacy&quot;&gt;Configuring GRUB Legacy&lt;/h3&gt;

&lt;p&gt;When you use the GRUB Legacy interactive menu, you need to tell it what options to show. You do that using special GRUB menu commands.
The GRUB Legacy system stores the menu commands in a standard text configuration file. The configuration file used by GRUB Legacy is &lt;em&gt;menu.lst&lt;/em&gt;, and it is stored in the &lt;em&gt;/boot/grub&lt;/em&gt; folder. (While not a requirement, some Linux Distributions create a separate &lt;em&gt;/boot&lt;/em&gt; partition on the hard drive.) Red Hat-derived Linux distributions (such as CentOS and Fedora) use &lt;em&gt;grub.conf&lt;/em&gt; for the configuration file.&lt;/p&gt;

&lt;p&gt;The GRUB Legacy configuration file consists of two sections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Global definitions&lt;/li&gt;
  &lt;li&gt;Operating system boot definitions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The global definitions section defines commands that control the overall operation of the GRUB Legacy boot menu. The global definitions must appear first in the configuration file. There are only handful of global settings.&lt;/p&gt;

&lt;h3 id=&quot;grub-2&quot;&gt;GRUB 2&lt;/h3&gt;
&lt;p&gt;Since the GRUB2 system was intended as an improvement over GRUB Legacy, many of the features are the same, with just a few twists. For example, the GRUB2 system changes the configuration filename to &lt;em&gt;grub.cfg&lt;/em&gt;, and it stores it in the &lt;em&gt;/boot/grub/&lt;/em&gt; folder. (This allows you to have both GRUB Legacy and GRUB2 installed at the same time.)&lt;/p&gt;

&lt;h3 id=&quot;configuring-grub2&quot;&gt;Configuring GRUB2&lt;/h3&gt;

&lt;p&gt;There are also a few changes to the commands used in GRUB2. FOr example, instead of the &lt;em&gt;title&lt;/em&gt; command, GRUB uses the &lt;em&gt;menuentry&lt;/em&gt; command, and you must also enclose each individual boot section within braces immediately following the &lt;em&gt;menuentry&lt;/em&gt; command.
Here’s an example of a GRUB2 configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;menuentry &quot;CentOS Linux&quot;{
    set root=(hd1,1)
    linux /boot/vmlinuz
    initrd /initrd
}

menuentry &quot;Windows&quot; {
    set root=(hd0,1)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The configuration process for GRUB2 is also somewhat different. While GRUB2 uses the &lt;em&gt;/boot/grub/grub.cfg&lt;/em&gt; file as the configuration file, you should never modify that file. Instead, there are seperate configuration files stored in the &lt;em&gt;/etc/grub.d&lt;/em&gt; folder. This allows you (or the system) to create individual configuration files for each boot option installed on your system (for example, one configurationo file for booting Linux and another for booting Windows).&lt;/p&gt;

&lt;h3 id=&quot;installing-grub2&quot;&gt;Installing GRUB2&lt;/h3&gt;

&lt;p&gt;Unlike GRUB Legacy, you don’t need t install GRUB2. All you need to do is to rebuild the main installation file by running the &lt;em&gt;grub-mkconfig&lt;/em&gt; program to the &lt;em&gt;grub.cfg&lt;/em&gt; configuration file or use the &lt;em&gt;-o&lt;/em&gt; option to specify the output file. By default, the &lt;em&gt;grub-mkconfig&lt;/em&gt; program just outputs the new configuration file commands to standard output.&lt;/p&gt;

&lt;h3 id=&quot;alternative-bootloaders&quot;&gt;Alternative Bootloaders&lt;/h3&gt;

&lt;p&gt;While GRUB Legacy and GRUB2 are the most popular Linux bootloader programs, you may run into a few others, depending on which Linux distributions you are using.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Systemd-boot&lt;/em&gt; bootloader program is starting to gain popularity in Linux Distributions that use the systemd init method.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Mar 2021 00:00:00 +0100</pubDate>
        <link>/Linux_bootloaders/</link>
        <guid isPermaLink="true">/Linux_bootloaders/</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Linux Boot Process </title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;When you on the power to your linux system, it triggers a series of events that eventually leads to the login prompt. There may be times when your linux systel doesn’t boot quite correctly, or perhaps an application that you expected to be running in background mode isn’t running. In those situations, it helps to have a basic understanding of how Linux boots the operating system and starts programs so that you can &lt;strong&gt;troubleshoot&lt;/strong&gt; the problem.&lt;/p&gt;

&lt;h3 id=&quot;following-the-boot-process&quot;&gt;Following the Boot Process&lt;/h3&gt;

&lt;p&gt;The linux boot process can be split into three main steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The workstation firmware starts, performing a quick check of the hardware, called a &lt;em&gt;Power-On-Self Test (POST)&lt;/em&gt;, and then it looks for a bootloader program to run from a bootable device.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The bootloader runs and determines what Linux kernel program to load.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The kernel program loads into memory and starts the necessary background programs required for the system to operate (such as a graphical desktop manager for desktops or web and database servers for servers.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These 3 steps might seem so simple on the surface, but a somewhat complicated ballet of operations happens behind the scenes to keep the boot process working. Each step performs several actions as it prepares your system to run Linux.&lt;/p&gt;

&lt;h3 id=&quot;viewing-the-boot-process&quot;&gt;Viewing the Boot Process&lt;/h3&gt;

&lt;p&gt;You can monitor the Linux boot process by watching the system console screen as the system boots. You’ll see lots of informative messages scroll by as the system detects hardware and loads the software.&lt;/p&gt;

&lt;p&gt;Usually the boot messages scroll by somewhat quickly, and it’s hard to see just what’s happening. If you need to troubleshoot boot problems, you can review the boot-time messages using the &lt;em&gt;dmesg&lt;/em&gt; command. Most Linux distributions copy the boot kernel messages into a special ring buffer in memory called the &lt;em&gt;kernel ring buffer&lt;/em&gt;. The buffer is circular and set to a predetrmined size. As new messages are logged into the buffer, older messages are rotated out.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;dmesg&lt;/em&gt; command displays the most recent boot messages that are currently stored in the kernel ring buffer :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[    0.000000] microcode: microcode updated early to revision 0x2f, date = 2019-11-12
[    0.000000] Linux version 5.4.0-66-generic (buildd@lgw01-amd64-016) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #74~18.04.2-Ubuntu SMP Fri Feb 5 11:17:31 UTC 2021 (Ubuntu 5.4.0-66.74~18.04.2-generic 5.4.86)
[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-5.4.0-66-generic root=UUID=735fb175-3ba7-44e8-9308-b1edab99ff24 ro quiet splash
[    0.000000] KERNEL supported cpus:
[    0.000000]   Intel GenuineIntel
[    0.000000]   AMD AuthenticAMD
[    0.000000]   Hygon HygonGenuine
[    0.000000]   Centaur CentaurHauls
[    0.000000]   zhaoxin   Shanghai  
[    0.000000] x86/fpu: Supporting XSAVE feature 0x001: 'x87 floating point registers'
[    0.000000] x86/fpu: Supporting XSAVE feature 0x002: 'SSE registers'
[    0.000000] x86/fpu: Supporting XSAVE feature 0x004: 'AVX registers'
[    0.000000] x86/fpu: xstate_offset[2]:  576, xstate_sizes[2]:  256
[    0.000000] x86/fpu: Enabled xstate features 0x7, context size is 832 bytes, using 'standard' format.
[    0.000000] BIOS-provided physical RAM map:
[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009e7ff] usable
[    0.000000] BIOS-e820: [mem 0x000000000009e800-0x000000000009ffff] reserved
[    0.000000] BIOS-e820: [mem 0x00000000000e0000-0x00000000000fffff] reserved
[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x000000008ecb8fff] usable
[    0.000000] BIOS-e820: [mem 0x000000008ecb9000-0x000000008f5b8fff] reserved
[    0.000000] BIOS-e820: [mem 0x000000008f5b9000-0x000000009c9cdfff] usable[    0.000000] microcode: microcode updated early to revision 0x2f, date = 2019-11-12
[    0.000000] Linux version 5.4.0-66-generic (buildd@lgw01-amd64-016) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #74~18.04.2-Ubuntu SMP Fri Feb 5 11:17:31 UTC 2021 (Ubuntu 5.4.0-66.74~18.04.2-generic 5.4.86)
[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-5.4.0-66-generic root=UUID=735fb175-3ba7-44e8-9308-b1edab99ff24 ro quiet splash
[    0.000000] KERNEL supported cpus:
[    0.000000]   Intel GenuineIntel
[    0.000000]   AMD AuthenticAMD
[    0.000000]   Hygon HygonGenuine
[    0.000000]   Centaur CentaurHauls
[    0.000000]   zhaoxin   Shanghai  
[    0.000000] x86/fpu: Supporting XSAVE feature 0x001: 'x87 floating point registers'
[    0.000000] x86/fpu: Supporting XSAVE feature 0x002: 'SSE registers'
[    0.000000] x86/fpu: Supporting XSAVE feature 0x004: 'AVX registers'
[    0.000000] x86/fpu: xstate_offset[2]:  576, xstate_sizes[2]:  256
[    0.000000] x86/fpu: Enabled xstate features 0x7, context size is 832 bytes, using 'standard' format.
[    0.000000] BIOS-provided physical RAM map:
[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009e7ff] usable
[    0.000000] BIOS-e820: [mem 0x000000000009e800-0x000000000009ffff] reserved
[    0.000000] BIOS-e820: [mem 0x00000000000e0000-0x00000000000fffff] reserved
[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x000000008ecb8fff] usable
[    0.000000] BIOS-e820: [mem 0x000000008ecb9000-0x000000008f5b8fff] reserved
[    0.000000] BIOS-e820: [mem 0x000000008f5b9000-0x000000009c9cdfff] usable
[    0.000000] BIOS-e820: [mem 0x000000009c9ce000-0x000000009cebdfff] reserved
[    0.000000] BIOS-e820: [mem 0x000000009cebe000-0x000000009cfbdfff] ACPI NVS
[    0.000000] BIOS-e820: [mem 0x000000009cfbe000-0x000000009cffdfff] ACPI data
[    0.000000] BIOS-e820: [mem 0x000000009cffe000-0x000000009cffefff] usable
e000-0x000000009cffdfff] ACPI data
[    0.000000] BIOS-e820: [mem 0x000000009cffe000-0x000000009cffefff] usable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most linux distributions also store the boot messages in a log file, usually in the &lt;em&gt;/var/log&lt;/em&gt; folder. For debian-based systems, the file is usually &lt;em&gt;/var/log/boot&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Although it helps to be able to see the different messages generated during boot time, it is also helpful to know just what generates those messages.&lt;/p&gt;

&lt;h3 id=&quot;the-firmware-startup&quot;&gt;The Firmware Startup&lt;/h3&gt;

&lt;p&gt;All IBM-compatible workstations and servers utilize some type of built-in firmware to control how the installed operating system starts. On older workstations and servers, this firmware was called the &lt;em&gt;Basic Input/Output System (BIOS)&lt;/em&gt;. On newer workstations and servers, a new method, called the *Unified Extensible Firmware Interface (UEFI) * is responsible for maintaining the system hardware status and launching an installed operating system.&lt;/p&gt;

&lt;p&gt;Both methods eventually launch the main operating system program, however, and each method uses different ways of doing that.&lt;/p&gt;

&lt;h3 id=&quot;the-bios-startup&quot;&gt;The BIOS Startup&lt;/h3&gt;

&lt;p&gt;The BIOS firmware found in older workstations and servers was somewhat limited in what it could do. The BIOS firmware had a simplistic menu interface that allowed you to change some settings to control how the system found hardware and define what device the BIOS should use to start the operating system.&lt;/p&gt;

&lt;p&gt;One of the limitations of the original BIOS firmware was that it could read only one sector’s worth of data from a hard drive into memory in order to run. As you can probably guess, that’s not enough space to load an entire operating system. To get around that limitation, most operating systems (including Linux and Microsoft Windows) split the boot process into two parts.&lt;/p&gt;

&lt;p&gt;First, the BIOS runs a bootloader program, The &lt;em&gt;bootloader&lt;/em&gt; is a small program that initializes the necessary hardware to find and run the full operating system, which is usually found at another location on the same hard drive but sometimes situated on  a separate internal or external storage device.&lt;/p&gt;

&lt;p&gt;The bootloader program usually has a configuration file, so you can tell it where to find tha actual operating system file to run or even to produce a small menu allowing the user to boot between multiple operating systems.&lt;/p&gt;

&lt;p&gt;To get things started, the BIOS must know where to find the bootloader program on 
ab installed storage device. Most BIOS setups allow you yo load the bootloader program from several locations (internal/external hard drive, CD/DVD, etc.. )&lt;/p&gt;

&lt;p&gt;When booting from a hard drive, you must designate which hard drive, and which partition on the hard drive, the BIOS should load the bootloader program from. This is done by defining a &lt;em&gt;Master Boot Record (MBR)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The MBR is the first sector on the first hard drive partition on the system. There is only one MBR for the computer system. The BIOS looks for the MBR and reads the program stored there into memory. Since the bootloader program must fit in one sector, it must be very small, so it can’t do much. The bootloader program mainly points to the location of the actual operating system kernel file, which is stored in a boot sector of a separate partition on the system. There are no size limitations on the kernel boot file.&lt;/p&gt;

&lt;p&gt;The bootloader program isn’t required to point directly to an operating system kernel file, it can point to any type of program including another bootloader program. You can create a primary bootloader program that points to a secondary bootloader program, which provides options to load multiple operating systems. This process is called chainloading.&lt;/p&gt;

&lt;h3 id=&quot;the-uefi-startup&quot;&gt;The UEFI Startup&lt;/h3&gt;

&lt;p&gt;While there were plenty of limitations with BIOS, computer manufactures learned to live with them, and BIOS was the default standard for IBM compatible systems for many years. However, as operating systems became more complicated, it eventually became clear that a new boot method needed to be developed.&lt;/p&gt;

&lt;p&gt;Intel created the &lt;em&gt;Extensible Firmware Interface (EFI)&lt;/em&gt; in 1998 to address some of the limitations of  BIOS. The adoptions of EFI was somewhat of a slow process, but by 2005 the idea caught on with other vendors, and the Universal EFI (UEFI) specification was adopted as a standard. These days just about all IBM-compatible desktop and server systems utilize the UEFI firmware standard.&lt;/p&gt;

&lt;p&gt;Instead of relying on a single boot sector on a hard drive to hold the bootloader program, UEFI specifies a special disk partition, called the EFI system partition (ESP) to store bootloader programs. This allows for any size of bootloader program, plus the ability to store multiple bootloader programs for multiple operating systems.&lt;/p&gt;

&lt;p&gt;The ESP setup utilizes the old Microsoft File Allocation Table (FAT) filesystem to store the bootloader programs. On Linux Systems, the ESP is typically mounted in the &lt;em&gt;/boot/efi&lt;/em&gt; folder, and the bootloader files are typically stored using the &lt;em&gt;.efi&lt;/em&gt; filename extension.&lt;/p&gt;

&lt;p&gt;The UEFI firmware utilizes a built-in mini bootloader (sometimes referred to as a boot manager), which allows you to configure just which bootloader program file to launch.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Not all linux distributions support the UEFI firmware, it you’re using a UEFI system, make sure that the linux distribution you select supports it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With UEFI, you need to register each individual bootloader file that you want to appear at boot time in the boot manager interface menu. The &lt;em&gt;efibootmgr&lt;/em&gt; Linux application allows you to create and remove boot entries or change the boot order. The UEFI interface includes a shell environment, allowing you to enter commands to alter boot settings, or select the bootloader to run each time you boot the system.&lt;/p&gt;

&lt;p&gt;Once the firmware finds and runs the bootloader, its job is done.&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Mar 2021 00:00:00 +0100</pubDate>
        <link>/LPIC/</link>
        <guid isPermaLink="true">/LPIC/</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>IPV6</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;IPV6 is the latest version of the internet Protocol, people refer to IPV6 as “the next-generation Internet Protocol” and it was originally created as the answer to IPv4’s inevitable, looming address-exhaustion crisis.&lt;/p&gt;

&lt;p&gt;The IPv6 header and address structure has been completely overhauled, and many of the features that were basically just afterthoughts and addendums in IPv4 are now included as full-blown standards in IPv6. It’s seriously well equiped, poised, and ready to manage the mind-blowing demands of the Internet to come.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-need-ipv6-&quot;&gt;Why Do We Need IPv6 ?&lt;/h3&gt;

&lt;p&gt;Well, the short answer is, because we need to communicate, and our current system isn’t really cutting it anymore, kind of like how the Pony Express can’t compete with airmail. Just look at how much time and effort we’ve invested in coming up with slick new ways to conserve bandwidth and IP addresses. We’ve even come up with Variable Length Subnet Masks (VLSMs) in our struggle to overcome the worsening address drought.&lt;/p&gt;

&lt;h3 id=&quot;the-benefits-and-uses-of-ipv6&quot;&gt;The Benefits and Uses of IPv6&lt;/h3&gt;

&lt;p&gt;So what’s so fa&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;TO DO&lt;/p&gt;

&lt;h3 id=&quot;ipv6-addressing-and-expressions&quot;&gt;IPv6 Addressing and Expressions&lt;/h3&gt;

&lt;p&gt;Just as understanding how IP addresses are structured and used is critical with IPv4 addressing, it’s also vital when it comes to IPv6. You’ve already read about the fact that at 128 bits, and IPv6 address is much larger than an IPv4 address.&lt;/p&gt;

&lt;p&gt;Here’s an example of an IPv6 address :&lt;/p&gt;

&lt;p&gt;2001:0db8:3c4d:0012:0000:0000:1234:56ab&lt;/p&gt;

&lt;p&gt;Breaking down this IPv6 address into 3 sections :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Global Prefix&lt;/strong&gt; : 2001:0db8:3c4d&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subnet&lt;/strong&gt; : 0012&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interface ID&lt;/strong&gt; : 0000:0000:1234:56ab&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So as you can now see, the address is truly much larger, but what else is different? Well, first, notice that it has eight groups of numbers instead of four and also that those groups are separated by colons instead of periods. And hey wait a second.. There are letters in that address! Yep, the address is expressed in hexadecimal just like a MAC address is, so you could say this address has eight 16-bit hexadecimal colon-delimited blocks. That’s already quite a mouthful, and you probably haven’t even tried to say the address out loud yet!&lt;/p&gt;

&lt;p&gt;One other thing I want to point out us for when you set up your test network to play with IPv6, is when you use a web browser to make an HTTP connection to an IPv6 device, you have to type the address into the browser with brackets [] around the literal address. Why ? Well, a colon is already being used by the browser for specifying a port number. So basically, if you don’t enclose the address in brackets, the browser will have no way to identify the information.&lt;/p&gt;

&lt;h3 id=&quot;shortened-expression&quot;&gt;Shortened Expression&lt;/h3&gt;

&lt;p&gt;The good news is there are a fex tricks to help rescue us when writing these monster addresses. For one thing, you can actually leave out parts of the address to abbreviate it, but to get away with doing that you have to follow a couple of rules. 
First, you can drop any leading zeros in each of the individual blocks.&lt;/p&gt;

&lt;p&gt;After you do that, the sample address from earlier would then look like this:&lt;/p&gt;

&lt;p&gt;2001:db8:3c4d:12:0:0:1234:56ab&lt;/p&gt;

&lt;p&gt;Okay, that’s a definite improvement, at least we don’t have to write all of those extra zeros!
But what about whole blocks that don’t have anything in them except zeros? Well, we can kind of lose those too, at least some of them. Again referring to our sample address, we can remove the two blocks of zeros by replacing them with double colons, like this:&lt;/p&gt;

&lt;p&gt;2001:db8:3c4d:12:0:0:1234:56ab&lt;/p&gt;

&lt;p&gt;Cool, we replaced the blocks of all zeros with double colons. The rule you have to follow to get away with this is that &lt;strong&gt;you can only replace one contiguous block of zeros&lt;/strong&gt; in an address. So if my address has four blocks of zeros and each of them were separated, I just don’t get to replace them all; remember the rule is that you can only replace one contiguous block with a double colon. Check out this example :&lt;/p&gt;

&lt;p&gt;2001:0000:0000:0012:0000:1234:56ab&lt;/p&gt;

&lt;p&gt;And just know that &lt;strong&gt;you can’t do this&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;2001::12::1234:56ab&lt;/p&gt;

&lt;p&gt;Instead, this is the best that you can do:&lt;/p&gt;

&lt;p&gt;2001::12:0:0:1234:56ab&lt;/p&gt;

&lt;p&gt;The reason why the above example is our best shot is that if we remove two sets of zeros, the device looking at the address will have no way of knowing where the zeros go back in. Basically, the router would look at the incorrect address and say, “Well, do I place two blocks into the first set of double colons and two into the second st, or do I place three blocks into the first set and one block into the second set?” and on and on it would go because the information the router needs just isn’t there.&lt;/p&gt;

&lt;h3 id=&quot;address-types&quot;&gt;Address Types&lt;/h3&gt;

&lt;p&gt;We’re all familiar with IPv4’s unicast, broadcast, and multicast addresses that basically define who or at least how many other devices we’re talking to. But, the IPv6 adds to that trio and introduces the anycast. Broadcasts, as we know them, have been eliminated in IPv6 because of their cumbersome inefficiency.&lt;/p&gt;

&lt;p&gt;So let’s find out what each of these types of IPv6 addressing and communication methods do for us.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unicast&lt;/strong&gt; : Packets addressed to a unicast address are delivered to a single interface. For load balancing, multiple interfaces can use the same address. There are a few different types of unicast addresses, but we don’t need to get into here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Global Unicast Addresses&lt;/strong&gt; These are your typical publicly routable addresses, and they’re the same as they are in IPv4.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Link-Local addresses&lt;/strong&gt; These are like the private addresses in IPv4 in that they’re not meant to be routed. Think of them as a handy tool that gives you the ability to throw a temporary LAN together or for creating a small LAN that’s not going to be routed but still needs to share and access files and services locally.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unique local addresses&lt;/strong&gt; These addresses are also intended for non-routing purposes, but they are nearly globally unique, so it’s unlikely you’ll ever have one of them overlap. Unique local addresses were designed to replace site-local addresses, so they basically do almost exactly what IPv4 private addresses do : allow communication throughout a site while being routable to multiple local networks. Site-local addresses were denounced as of September 2004.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Multicast&lt;/strong&gt; Again, same as in IPv4, packets addresses to a multicast address are delivered to all interfaces identified by the multicast address. Sometimes people call them one-to-many addresses. It’s really easy to spot a multicast address in IPv6 because they always start with FF.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Anycast&lt;/strong&gt; Like multicast addresses, an anycast address identifies multiple interfaces, but there’s a big difference: the any cast packet is only delivered to one address, actually, to the first one it finds defined in terms of routing distance. And again, this address is special because you can apply a single address to more than one interface. You could call them one-to-one-of-many addresses, but just saying “anycast” is a lot easier.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’re probably wondering if there are any special, reserved addresses in IPv6 because you know they’re in IPv4. Well there are plenty of them ! Let’s go over them now.&lt;/p&gt;

&lt;h3 id=&quot;special-addresses&quot;&gt;Special Addresses&lt;/h3&gt;

&lt;p&gt;I’m going to list some of the addresses and address ranges that you should definitely make a point to remember because you’ll eventually use them. They’re all special or reserved for specific use, but unlike IPv4, IPv6 gives us a galaxy of addresses, so reserving a few here and there doesn’t hurt a thing!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;0:0:0:0:0:0:0:0&lt;/strong&gt; Equals &lt;strong&gt;::&lt;/strong&gt;. This is the equivalent of IPv4’s 0.0.0.0, and is typically the source address of a host when you’re using stateful configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;0:0:0:0:0:0:0:1&lt;/strong&gt; Equals &lt;strong&gt;::1&lt;/strong&gt;. The equivalent of 127.0.0.1 in IPv4.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;0:0:0:0:0:0:192.168.100.1&lt;/strong&gt; This is how an IPv4 address would be written in a mixed IPv6/IPv4 network environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2000::/3&lt;/strong&gt; The global unicast address range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FC00::/7&lt;/strong&gt; The unique local unicast range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FE80::/10&lt;/strong&gt; The link-local unicast range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FF00::/8&lt;/strong&gt; The multicast range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3FFF:FFFF::/32&lt;/strong&gt; Reserved for examples and documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2001:0DB8::/32&lt;/strong&gt; Also reserved for examples and documentation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2002::/16&lt;/strong&gt; Used with 6to4 , which is the transition system, the structure that allows IPv6 packets to be transmitted over an IPv4 network without the need to configure explicit tunnels.&lt;/p&gt;

&lt;h3 id=&quot;how-ipv6-works-in-an-internetwork&quot;&gt;How IPv6 Works in an InternetWork&lt;/h3&gt;

&lt;p&gt;It’s time to explore the finer points of IPv6. A great place to start is by showing you how to address a host and what gives it the ability to find other hosts and resources on a network.&lt;/p&gt;

&lt;p&gt;I’ll also demonstrate a  device’s ability to automatically address itself, something called stateless autoconfiguration, plus another type of autoconfiguration known as stateful. Keep in mind that stateful autoconfiguration uses a DHCP server in a very similar way to how it’s used in an IPv4 configuration. I’ll also show you how Internet Control Message Protocol (ICMP) and multicast works for us on an IPv6 network.&lt;/p&gt;

&lt;h3 id=&quot;autoconfiguration&quot;&gt;Autoconfiguration&lt;/h3&gt;

&lt;p&gt;Autoconfiguration is an incredibly useful solution because it allows devices on a network to address themselves with a link-local unicast address. This process happens through first learning the prefix information from the router and then appending the device’s own interface address as the interface ID. But where does it get that interface ID? Well, you know every device on an Ethernet network has a physical MAC address, and that’s exactly what’s used for the interface ID. But since the interface ID in an IPv6 is 64 bits length and a MC address is only 48 bits, where do the extra 16 bits come from? The MAC address is &lt;strong&gt;padded&lt;/strong&gt; in the middle with the extra bits, it’s &lt;strong&gt;padded with FFFE&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, let’s say I have a device with a MAC address that looks like this: 00:60:d6:79:19:87&lt;/p&gt;

&lt;p&gt;After it’s been padded, it would look like this: 02:60:d6:FF:FE:73:19:87&lt;/p&gt;

&lt;p&gt;So where did that 2 in the beginning of the address come from ? another good question.&lt;/p&gt;

&lt;p&gt;You see, part of the process of padding (called modified eui-644 format) changes a bit to specify if the address is locally unique or globally unique. And the bit that gets changed is the seventh bit in the address. A bit value of 1 means globally unique, and a bit value of 0 means locally unique, so looking at this example, would you say that this address is globally or locally unique? If you answered that it’s globally unique address, you’re right! Trust me, this is going to save you time in addressing your hosts machines because they communicate with the router to make this happen.&lt;/p&gt;

&lt;p&gt;To perform autoconfiguration, a host goes through a basic twi-step process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, the host needs the prefix information (similar to the network portion of an IPv4 address) to configure its interface, so it sends a router solicitation (RS) request for it. This RS is then sent out as a multicast to each router’s multicast address. The actual information being sent is a type of ICMP message, and like everything in networking, this ICMP message has a number that identifies it. The RS message is ICMP type 133.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The router answers back with the required prefix information  via a router advertisement (RA). An RA message also happens to be a multicast packet that’s sent to each nod’s multicast address and is ICMP type 134. RA messages are sent on a periodic basis, but the host sends the RS for an immediate response so it doesn’t have to wait until the next scheduled RA to get what it needs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By the way, this type of autoconfiguration is also know as stateless autoconfiguration because it doesn’t contact or connect any further information from the other device.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Feb 2021 00:00:00 +0100</pubDate>
        <link>/IPV6/</link>
        <guid isPermaLink="true">/IPV6/</guid>
        
        
        <category>Networking</category>
        
      </item>
    
      <item>
        <title>Spanning Tree Protocol</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Once upon a time, a company called Digital Equipment Corporation (DEC) was purchased and renamed Compaq. But before that happened, DEC created the original version of &lt;em&gt;Spanning Tree Protocol&lt;/em&gt;, or STP.&lt;/p&gt;

&lt;h3 id=&quot;main-task-of-stp&quot;&gt;Main task of STP&lt;/h3&gt;

&lt;p&gt;STP’s main task is to stop network loops from occurring on your layer 2 network (bridges or switches). It vigilantly monitors the network to find all links, making sure that no loops occur by shutting down any redundant links. STP uses the &lt;em&gt;spanning-tree algorithm&lt;/em&gt; (STA) to first create a topology database and then search out and destroy redundant links. With STP running, frames will be forwarded only on the premium, STP-picked links.&lt;/p&gt;

&lt;h3 id=&quot;spanning-tree-terms&quot;&gt;Spanning Tree Terms&lt;/h3&gt;

&lt;p&gt;Before I get into describing the details of how STP works in the network, you need to understand some basic ideas and terms and how they relate within the layer 2 switched network:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Root bridge&lt;/strong&gt; : The root bridge is the bridge with the best bridge ID. With STP, the key is for all the switches in the network to elect a root bridge that becomes the focal point in the network. All other decisions in the network, such as which port is to be blocked and which port is to be put in forwarding mode, are made from the perspective of this root bridge.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;BPDU&lt;/strong&gt; : All the switches exchange information to use in the selection of the root switch as well as in subsequent configuration of the network. Each switch compares the parameters in the &lt;em&gt;Bridge Protocol Data Unit (BPDU)&lt;/em&gt; that it sends to one neighbor with the one that it receives from another neighbor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bridge ID&lt;/strong&gt; : The bridge ID is how STP keeps track of all the switches in the network. It is determined by a combination of the bridge priority and the base MAC address. The bridge with the lowest bridge ID becomes the root bridge in the network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Nonroot bridges&lt;/strong&gt; : These are all bridges that are not the root bridge. Nonroot bridges exchange BPDUs with all bridges and update the STP topology database on all switches, preventing loops and providing a measure of defense against link failures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Port cost&lt;/strong&gt; : Port cost determines the best path when multiple links are used between two switches and none of the links is a root port. The cost of a link is determined by the bandwidth of a link.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Root port&lt;/strong&gt; : The root port is always the link directly connected to the root bridge, or the shortest path to the root bridge. If more than one link connects to root bridge, then a port cost is determined by checking the bandwidth of each link. The lowest-cost port becomes the root port. If multiple links have the same cost, the bridge with the lower advertising bridge ID is used. Since multiple links can be from the same device, the lowest port number will be used.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Designated port&lt;/strong&gt; : A designated port is one that has been determined as having the best (lowest) cost. A designated port will be marked as a forwarding port.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Nondesignated port&lt;/strong&gt; : A nondesignated port is one with a higher cost than the designated port. Nondesignated ports are put in blocking mode - they are not forwarding ports.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Forwarding port&lt;/strong&gt; : A forwarding port forwards frames.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Blocked port&lt;/strong&gt; : A blocked port is the port that, in order to prevent loops, will not forward frames. However, a blocked port will always listen to frames.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spanning-tree-operations&quot;&gt;Spanning Tree Operations&lt;/h3&gt;

&lt;p&gt;As I’ve said before, STP’s job is to find all links in the network and shut down any redundant ones, thereby preventing network loops from occurring.&lt;/p&gt;

&lt;p&gt;STP accomplishes this by first electing a root bridge that will forward through all ports and act as a point of reference for all other devices in the STP domain. Once all switches agree on who the root bridge is, every bridge must find its one and only allotted root port. Each and every link between two switches must have one, and only one, designated port, the port on that link that provides the highest bandwidth to the root. It’s really important to remember that a bridge can go through many other bridges to get to the root, meaning that it’s not always the shortest path but the fastest (highest bandwidth) path that will be the one used.&lt;/p&gt;

&lt;p&gt;Obviously, every port on the root switch is a designated port, as you can get no closer to the root than being the root.
After the dust settles, any port that is not either root port or a designated port - which means it is a nonroot, nondesignated port - is placed in the blocking state, thus breaking the switching loop.&lt;/p&gt;

&lt;h3 id=&quot;selecting-the-root-bridge&quot;&gt;Selecting the Root Bridge&lt;/h3&gt;

&lt;p&gt;The bridge ID is used to elect the root bridge in the STP domain and to determine the root port for each of the remaining devices in the STP domain. This ID is 8 bytes long and includes both the priority and the MAC address of the device. The default priority on all devices running the IEEE STP version is 32.768.&lt;/p&gt;

&lt;p&gt;To determine the root bridge, you combine the priority of each bridge with its MAC address. If two switches or bridges happen to have the same priority value, the MAC address becomes the tiebreaker for figuring out which one has the lowest (best) ID. It’s like this: If two switches - I’ll name them A and B - Both use the default priority of 32768, then the MAC address will be used instead. Just remember that the lower value is the better one when it comes to electing a root bridge.&lt;/p&gt;

&lt;p&gt;By default, BPDUs are sent every two seconds out all active ports on a bridge/switch - again, the bridge with the lowest bridge ID is elected the root bridge. You can change the bridge’s ID by lowering its priority so that it will become a root bridge automatically.&lt;/p&gt;

&lt;p&gt;Being able to do that is important in a large switched network, it ensures that the best paths are chosen, efficiency is what you’re after here.&lt;/p&gt;

&lt;p&gt;To determine which port STP will shut down, it will first check each link’s amount of bandwidth and then shut down the link with the lowest bandwidth value. If both links have the same bandwidth value, STP will typically shut down the higher of the port numbers.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jan 2021 00:00:00 +0100</pubDate>
        <link>/STP/</link>
        <guid isPermaLink="true">/STP/</guid>
        
        
        <category>Networking</category>
        
      </item>
    
      <item>
        <title>Switching Services</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Unlike &lt;a href=&quot;https://www.lifewire.com/how-network-bridges-work-816357&quot;&gt;bridges&lt;/a&gt;, which use software to create and manage a filter table, switches use application specific integrated circuits &lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASICs&lt;/a&gt;
to build and maintain their filter tables. But it’s still okay to think of a layer 2 switch as a multiport bridge because their basic reason for being is the same: to break up collision domains.&lt;/p&gt;

&lt;p&gt;Layer 2 switches and bridges are faster than routers becuase they don’t take up time looking at the Network layer header information, Instead, they look at the frame’s hardware addresses before deciding to either forward, flood, or drop the frame.&lt;/p&gt;

&lt;p&gt;Switches create private, dedicated collision domains and provide independent bandwidth on each port, unlike hubs.
Take an example of multiple hosts connected with a switch to a server using 100Mbps Half-duplex link, unlike with a hub, each host has 10 Mbps dedicated communication to the server.&lt;/p&gt;

&lt;p&gt;Layer 2 switching provides the following :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hardware-based bridging (ASIC).&lt;/li&gt;
  &lt;li&gt;Wire speed&lt;/li&gt;
  &lt;li&gt;Low latency&lt;/li&gt;
  &lt;li&gt;Low cost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What makes layer 2 switching so efficient is that no modification to the data packet takes place. The device only reads the frame encapsulating the packet, which makes the switching process considerably faster and less error-prone than routing processes are.&lt;/p&gt;

&lt;h3 id=&quot;bridging-vs-lan-switching&quot;&gt;Bridging vs LAN Switching&lt;/h3&gt;

&lt;p&gt;It’s true - layer 2 switches really are pretty much just bridges that give us a lot more ports, but there are some important differences you should always keep in mind:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bridges are software based, while switches are hardware based because they use ASIC chips to help make filtering decisions.&lt;/li&gt;
  &lt;li&gt;A switch can be viewed as a multiport bridge.&lt;/li&gt;
  &lt;li&gt;There can be only one spanning-tree instance per bridge, while switches can have many.&lt;/li&gt;
  &lt;li&gt;Switches have a higher number of ports than most bridges.&lt;/li&gt;
  &lt;li&gt;Both bridges and switches forward layer 2 broadcasts.&lt;/li&gt;
  &lt;li&gt;Bridges and switches learn MAC addresses by examining the sources address of each frame received.&lt;/li&gt;
  &lt;li&gt;Both bridges and switches make forwarding decisions based on layer 2 addresses.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;three-switch-functions-at-layer-2&quot;&gt;Three Switch Functions at Layer 2&lt;/h3&gt;

&lt;p&gt;There are three distinct functions of layer 2 switching (you need to remember these!):
&lt;em&gt;Address learning, forward/filter decisions, and loop avoidance.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Address learning&lt;/strong&gt; : Layer 2 switches and bridges remember the source hardware address of each frame received on an interface, and they enter this information into a MAC database called a &lt;em&gt;forward/filter table&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Forward/Filter decisions&lt;/strong&gt; : When a frame is received on an interface, the switch looks at the destination hardware address and finds the exit interface in the MAC database. The frame is only forwarded out the specified destination port.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Loop avoidance&lt;/strong&gt; : If multiple connections between switches are created for redundancy purposes, network loops can occur. Spanning Tree Protocol (STP) is used to stop network loops while still permitting redundancy.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;address-learning&quot;&gt;Address Learning&lt;/h3&gt;
&lt;p&gt;When a switch is first powered on, the MAC forward/filter table is empty.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/networking/forwardtable.png&quot; alt=&quot;MAC Forward/Filter Table&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When a device  transmits and an interface receives a frame, the switch places teh fram’s source address in the MAC forward/filter table, allowing it to remember which interface teh sending device is locate on. The switch then has no choice but to flood the network with this frame out of every port except the source port because it has no idea where the destination device is actually located.&lt;/p&gt;

&lt;p&gt;If a device answers this flooded frame and sends a frame back, then the switch will take the source address from that frame and place that MAC address in its database as well, association this MAC address with the interface that received the frame. Since the switch now has both of the relevant MAC adresses in its filtering table, the two devices can now make a point-to-point connection. The switch doesn’t need to flood the frame as it did the time because now the frames can and will be forwarded only between the two devices. This is exactly the thing that makes layer 2 switches better than hubs.&lt;/p&gt;

&lt;h3 id=&quot;forwardfilter-decisions&quot;&gt;Forward/Filter Decisions&lt;/h3&gt;

&lt;p&gt;When a frame arrives at a switch interface, the destination hardware address is compared to the forward/filter MAC database. If the destination hardware address is known and listed in the database, the frame is only sent out the correct interface. The switch doesn’t transmit the frame out any interface except for the destination interface. This preserves bandwidth on the other network segments and is called &lt;em&gt;frame filtering&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But if the destination hardware address is not listed in the MAC database, then the frame is flooded out all active interfaces except the interface the frame was received on. If a device answers the flooded frame, the MAC database is updated with the device’s location (interface).&lt;/p&gt;

&lt;p&gt;If a host or server sends a broadcast on the LAN, the switch will flood the frame out all active ports except the source port by default. Remember, the switch creates smaller collision domains, but it’s still one large broadcast domain by default.&lt;/p&gt;

&lt;h3 id=&quot;port-security&quot;&gt;Port Security&lt;/h3&gt;

&lt;p&gt;So just how do you stop someone from simply plugging a host into one of your switch ports, or worse, adding a hub, switch, or access point into the Ethernet jack in their office? By default, MAC addresses will just dynamically appear in your MAC forward/filter database. You can stop them in their tracks by using port security.&lt;/p&gt;

&lt;h3 id=&quot;loop-avoidance&quot;&gt;Loop Avoidance&lt;/h3&gt;

&lt;p&gt;Redundant links between switches are a good idea because they help prevent complete network failures in the event one link stops working.&lt;/p&gt;

&lt;p&gt;Sounds great, but even though redundant links can be extremely helpful, they often cause more problems than they solve. This is because frames can be flooded down all redundant link simultaneously, creating network loops as well as other evils. Here’s a list of the ugliest problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If no loop avoidance schemes are put in place, the switches will flood broadcasts endlessly throughout the internetwork. This is sometimes referred to as a &lt;em&gt;broacast storm&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A device can receive multiple copies of the same frame since that frame can arrive from different segments at the same time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You may have thought of this one: The MAC address filter table could be totally confused about the device’s location because the switch can receive the frame from more than one link. And what’s more, the bewildered switch could get so caught up in constantly updating the MAC filter table with source hardware address locations that it will fail to forward a frame! This is called thrashing the MAC table.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One of the nastiest things that can happen is multiple loops generating throughout a network. This means that loops can occur within other loops, and if a broadcast storm were to also occur, the network wouldn’t be able to perform frame switching !&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these problems spell disaster (or at least close to it) and are decidedly evil situations that must be avoided, or at least fixed somehow. That’s where the &lt;strong&gt;Spanning Tree Protocol&lt;/strong&gt; comes into the game. It was developed to solve each and every on the problems I just told you about.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jan 2021 00:00:00 +0100</pubDate>
        <link>/Switching_services/</link>
        <guid isPermaLink="true">/Switching_services/</guid>
        
        
        <category>Networking</category>
        
      </item>
    
      <item>
        <title>Linux - Find Command : Cheat Sheet </title>
        <description>&lt;script src=&quot;https://gist.github.com/seifallahhomrani1/c3c02887aab8f077690505bfb726d34e.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Tue, 19 Jan 2021 00:00:00 +0100</pubDate>
        <link>/Find-Command/</link>
        <guid isPermaLink="true">/Find-Command/</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Lord Of SQLi : goblin Writeup</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/writeups/los/goblin.png&quot; style=&quot;  width: 100%; max-width: 600px; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Previous WriteUp&lt;/strong&gt; : &lt;a href=&quot;/ctf-writeup/2021/01/03/LOS-gremlin.html&quot;&gt;gremlin&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;provided-code&quot;&gt;Provided code&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php 
  //Challenge Preparation
  include &quot;./config.php&quot;; 
  login_chk(); 
  $db = dbconnect(); 
  // - - - - - - 
  if(preg_match('/prob|_|\.|\(\)/i', $_GET[no])) exit(&quot;No Hack ~_~&quot;); 
  if(preg_match('/\'|\&quot;|\`/i', $_GET[no])) exit(&quot;No Quotes ~_~&quot;); 
  $query = &quot;select id from prob_goblin where id='guest' and no={$_GET[no]}&quot;; 
  echo &quot;&amp;lt;hr&amp;gt;query : &amp;lt;strong&amp;gt;{$query}&amp;lt;/strong&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;br&amp;gt;&quot;; 
  $result = @mysqli_fetch_array(mysqli_query($db,$query)); 
  if($result['id']) echo &quot;&amp;lt;h2&amp;gt;Hello {$result[id]}&amp;lt;/h2&amp;gt;&quot;; 
  if($result['id'] == 'admin') solve(&quot;goblin&quot;);
  highlight_file(__FILE__); 
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;explanation&quot;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Challenge preparation&lt;/em&gt;
First of all, it includes this php file called &lt;em&gt;config.php&lt;/em&gt;, then it checks if you are logged in or not. After that, it connect to the database.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;no field check&lt;/em&gt; 
There’s a double check for the &lt;em&gt;no&lt;/em&gt; field, firstly it checks for :&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;First REGEX explanation&lt;/em&gt;
/prob|_|.|()/i
&lt;strong&gt;1st Alternative prob&lt;/strong&gt;
prob matches the characters prob literally (case insensitive)
&lt;strong&gt;2nd Alternative _&lt;/strong&gt;
_ matches the character _ literally (case insensitive)
&lt;strong&gt;3rd Alternative .&lt;/strong&gt;
. matches the character . literally (case insensitive)
&lt;strong&gt;4th Alternative ()&lt;/strong&gt;
( matches the character ( literally (case insensitive)
) matches the character ) literally (case insensitive)
&lt;strong&gt;Global pattern flags&lt;/strong&gt;
i modifier: insensitive. Case insensitive match (ignores case of [a-zA-Z])&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Second REGEX explanation&lt;/em&gt;
/'|&quot;|`/i
1st Alternative '
' matches the character ‘ literally (case insensitive)
2nd Alternative &quot;
&quot; matches the character “ literally (case insensitive)
3rd Alternative `
` matches the character ` literally (case insensitive)
Global pattern flags
i modifier: insensitive. Case insensitive match (ignores case of [a-zA-Z])&lt;/p&gt;

&lt;p&gt;Then it executes the final query, and if result id == admin then the problem is solved, else, it returns “Hello {$result[id]}”&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;As mentioned before, we can’t use quotes, but we can use another methods like :&lt;/p&gt;

&lt;h3 id=&quot;substr&quot;&gt;SUBSTR()&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.w3schools.com/sql/func_mysql_substr.asp&quot;&gt;SUBSTR()&lt;/a&gt; function extracts a substring from a string (starting at any position). 
The main idea is that we extract the first character of the id field that matches if it equals 97 (ASCII character of ‘a’).&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Payload&lt;/em&gt; : /?no=0 or ascii(substr(id,1,1))=97&lt;/p&gt;

&lt;h3 id=&quot;order-by&quot;&gt;ORDER BY&lt;/h3&gt;
&lt;p&gt;If we use this function, SQL will sort data by column according to asc.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Payload&lt;/em&gt; : /?no=2 or 1 order by id&lt;/p&gt;

&lt;h3 id=&quot;limit-11&quot;&gt;LIMIT 1,1&lt;/h3&gt;
&lt;p&gt;This function will cut the rows from offset-index to (offset+amount)-index.&lt;/p&gt;

&lt;p&gt;Start of index is 0,0.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Payload&lt;/em&gt; : /?no=0 or 1 limit 1,1&lt;/p&gt;

&lt;p&gt;Resources : &lt;a href=&quot;https://portswigger.net/support/sql-injection-bypassing-common-filters&quot;&gt;PortSwigger - Bypassing Common filters&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jan 2021 00:00:00 +0100</pubDate>
        <link>/LOS-goblin/</link>
        <guid isPermaLink="true">/LOS-goblin/</guid>
        
        
        <category>CTF-WriteUp</category>
        
      </item>
    
      <item>
        <title>Lord Of SQLi : gremlin Writeup</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/writeups/los/sql1.png&quot; style=&quot;  width: 100%; max-width: 600px; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources :&lt;/strong&gt; &lt;a href=&quot;/databases/2020/11/24/SQL-Injection.html&quot;&gt;SQL INJECTION - Introduction&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://los.rubiya.kr/&quot;&gt;‘Lord of SQL Injection’&lt;/a&gt;, a site where you can learn about SQL injection vulnerabilities while capturing dungeons. 
LoS provides 49 stepwise SQLinjection challenges.
Challenges are about SQLinjection at mysql, sqlite, mssql, mongodb, webapp what protected by WAF.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Site origin Country : Korea&lt;/li&gt;
  &lt;li&gt;Language : English&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gremlin&quot;&gt;Gremlin&lt;/h3&gt;
&lt;p&gt;Given a php code :&lt;/p&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt; &amp;lt;?php
  include &quot;./config.php&quot;;
  login_chk();
  $db = dbconnect();
  if(preg_match('/prob|_|\.|\(\)/i', $_GET[id])) exit(&quot;No Hack ~_~&quot;); // do not try to attack another table, database!
  if(preg_match('/prob|_|\.|\(\)/i', $_GET[pw])) exit(&quot;No Hack ~_~&quot;);
  $query = &quot;select id from prob_gremlin where id='{$_GET[id]}' and pw='{$_GET[pw]}'&quot;;
  echo &quot;&amp;lt;hr&amp;gt;query : &amp;lt;strong&amp;gt;{$query}&amp;lt;/strong&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;br&amp;gt;&quot;;
  $result = @mysqli_fetch_array(mysqli_query($db,$query));
  if($result['id']) solve(&quot;gremlin&quot;);
  highlight_file(__FILE__);
?&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;explanation&quot;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Challenge preparation&lt;/em&gt;
First of all, it includes this php file called &lt;em&gt;config.php&lt;/em&gt;, then it checks if you are logged in or not. After that, it connect to the database.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;The fun begins&lt;/em&gt;
&lt;a href=&quot;https://www.php.net/manual/en/function.preg-match.php&quot;&gt;preg_match&lt;/a&gt; is a php function that performs a regular expression match. If the provided regex found in the &lt;em&gt;id&lt;/em&gt; or &lt;em&gt;pw&lt;/em&gt; fields it exits with “No Hack ~_~” message?&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;REGEX explanation&lt;/em&gt;
/prob|_|.|()/i
&lt;strong&gt;1st Alternative prob&lt;/strong&gt;
prob matches the characters prob literally (case insensitive)
&lt;strong&gt;2nd Alternative _&lt;/strong&gt;
_ matches the character _ literally (case insensitive)
&lt;strong&gt;3rd Alternative .&lt;/strong&gt;
. matches the character . literally (case insensitive)
&lt;strong&gt;4th Alternative ()&lt;/strong&gt;
( matches the character ( literally (case insensitive)
) matches the character ) literally (case insensitive)
&lt;strong&gt;Global pattern flags&lt;/strong&gt;
i modifier: insensitive. Case insensitive match (ignores case of [a-zA-Z])&lt;/p&gt;

&lt;p&gt;Then, with the provided &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;pw&lt;/em&gt;, the SQL query is ready to be executed, and it is printed out using the following &lt;em&gt;echo&lt;/em&gt;. 
Using the &lt;a href=&quot;https://www.php.net/manual/en/mysqli-result.fetch-array.php&quot;&gt;mysqli_fetch_array&lt;/a&gt; function, which fetch a result row as an associative, a numeric array, or both.&lt;/p&gt;

&lt;p&gt;Finally, it checks if the id has a value, if it has, the challenge is solved !&lt;/p&gt;

&lt;p&gt;I just want to mention that the &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;pw&lt;/em&gt; field are gonna be passed in the url like this : ?id=
If you’ve read my article mentioned above, you can solve this challenge easily by closing the id field using an apostrophe then executing a condition that returns true as a result like 1=1. 
So the final result will be : 
?id=’ OR 1=1 
Then we need to comment out the &lt;em&gt;pw&lt;/em&gt; field so we insert a double dash followed by a space (Black Space = %20 : URL encoding) or a hashtag(hashtag = %23 : URL encoding )
?id=’ OR 1=1 –%20
So the final query will be  :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select id from prob_gremlin where id='' OR 1=1 -- ' and pw=''
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GREMLIN CLEAR !&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2021 00:00:00 +0100</pubDate>
        <link>/LOS-gremlin/</link>
        <guid isPermaLink="true">/LOS-gremlin/</guid>
        
        
        <category>CTF-WriteUp</category>
        
      </item>
    
      <item>
        <title>Java - OOP Concepts</title>
        <description>&lt;p&gt;Basically, the Java control statements are the same as in C language.&lt;/p&gt;

&lt;h3 id=&quot;if-else-statement&quot;&gt;if-else statement&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Java_Nested_if{
    public static void main(String[] args){
        int age = 25; 
        int weight = 48; 


        if (age&amp;gt;=18){
            if (weight&amp;gt;50){
                System.out.println(&quot;You can donate blood&quot;);
            }
            else{
                System.out.println(&quot;Go eat some fucking food&quot;);
            }
        else{
            System.out.println(&quot;Sorry lil boy, go play with your toys&quot;);
        }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;switch-statement&quot;&gt;Switch statement&lt;/h3&gt;

&lt;p&gt;The switch statement tests the equality of a variable against multiple values.&lt;/p&gt;

&lt;p&gt;Rules :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There can be one or N number of case values for a switch expression.&lt;/li&gt;
  &lt;li&gt;The case value must be of switch expression type only. The case value must be literal or constant. It doesn”t allow variables.&lt;/li&gt;
  &lt;li&gt;The case values must be unique. In case of duplicate value, it renders compile-time error.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Switch statement example:
```java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;public class SwitchExample2{
    public static void main(String[] args){&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    int number = 20; 

    switch(number){
        case 10 : System.out.println(&quot;10&quot;);
        case 20: System.out.println(&quot;20&quot;);
        case 30 : System.out.println(&quot;30&quot;);
        default : System.out.println(&quot;Not in 10, 20,30&quot;);
    }


} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Dec 2020 00:00:00 +0100</pubDate>
        <link>/control-statements/</link>
        <guid isPermaLink="true">/control-statements/</guid>
        
        
        <category>Java</category>
        
      </item>
    
  </channel>
</rss>
