<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seif-Allah's Blog</title>
    <description>“I wanted to save the world.”</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 31 Mar 2021 11:43:10 +0100</pubDate>
    <lastBuildDate>Wed, 31 Mar 2021 11:43:10 +0100</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>TryHackMe: Lazy Admin</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This room is a small vulnerable web application. In the [OWASP Juice shop], we looked at how some basic vulnerabilities worked. In this room, we’ll walk though the methodology and approach of testing a web application. As an ethical hacker, you need to test the web application from the perspective of an attacker. We’ll be using this mindset to establish a strategy to look for weaknesses in the web application.&lt;/p&gt;

&lt;h2 id=&quot;web-crawlers&quot;&gt;Web Crawlers&lt;/h2&gt;

&lt;p&gt;The crawl phase of a scan involves navigating around the application, following links, submitting forms, and logging in where necessary, to catalog the content of the application and the navigational paths within it.&lt;/p&gt;

&lt;p&gt;To read more about web crawlers follow this &lt;a href=&quot;https://portswigger.net/burp/documentation/scanner/crawling&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Mar 2021 00:00:00 +0100</pubDate>
        <link>/webappsec101/</link>
        <guid isPermaLink="true">/webappsec101/</guid>
        
        
        <category>CTF-WriteUp</category>
        
      </item>
    
      <item>
        <title>Software Defined Network - University Project</title>
        <description>&lt;h2 id=&quot;why-sdn&quot;&gt;Why SDN&lt;/h2&gt;

&lt;p&gt;“Software-Defined Networking (SDN)” is a term of the programmable networks paradigm. (A paradigm is a standard, perspective, or set of ideas.)&lt;/p&gt;

&lt;p&gt;In short, SDN refers to the ability of software applications to program individual network devices dynamically and therefore control the behavior of the network as a whole.&lt;/p&gt;

&lt;p&gt;SDN separates the network’s control (brains) and forwarding (muscle) planes and provides a centralized view of the distributed network for more efficient orchestration and automation of network services.&lt;/p&gt;

&lt;p&gt;The SDN architecture is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Directly programmable: Network control is directly programmable because it is decoupled from forwarding functions.&lt;/li&gt;
  &lt;li&gt;Agile: Abstracting control from forwarding lets administrators dynamically adjust network-wide &lt;a href=&quot;https://en.wikipedia.org/wiki/Traffic_flow_(computer_networking)&quot;&gt;traffic flow&lt;/a&gt; to meet changing needs.&lt;/li&gt;
  &lt;li&gt;Centrally managed: Network intelligence is (logically) centralized in software-based SDN controllers that maintain a global view of the network, which appears to applications and policy engines as a single, logical switch.&lt;/li&gt;
  &lt;li&gt;Programmatically configured: SDN lets network managers configure, manage, secure, and optimize network resources very quickly via dynamic, automated SDN programs, which they can write themselves because the programs do not depend on proprietary software.&lt;/li&gt;
  &lt;li&gt;Open standards-based and vendor-neutral: When implemented through open standards, SDN simplifies network design and operation because instructions are provided by SDN controllers instead of multiple, vendor-specific devices and protocols.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/networking/sdn.webp&quot; alt=&quot;sdn&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sdn-history&quot;&gt;SDN History&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4Cb91JT-Xb4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;rest-api&quot;&gt;REST API&lt;/h2&gt;

&lt;p&gt;In case you are not familiar with REST API, check this github repository where I explained what is REST API using a simple flask app : &lt;a href=&quot;https://github.com/seifallahhomrani1/api&quot;&gt;REST API&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;opendaylight-controller&quot;&gt;OpenDaylight Controller&lt;/h2&gt;

&lt;p&gt;The OpenDaylight Project is a collaborative open-source project hosted by The Linux Foundation. The project serves as a platform for software-defined networking (SDN) for open, centralized, network device monitoring.&lt;/p&gt;

&lt;h2 id=&quot;mininet&quot;&gt;Mininet&lt;/h2&gt;

&lt;p&gt;Mininet creates a realistic virtual network, running real kernel, switch and application code, on a single machine (VM, cloud or native), in seconds.&lt;/p&gt;

&lt;p&gt;The script I used to create a personalized network in mininet using python can be found &lt;a href=&quot;script.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-the-opendaylight-sdn-controller-with-the-mininet&quot;&gt;Using the OpenDaylight SDN Controller with the Mininet&lt;/h2&gt;

&lt;p&gt;In this lab example, I will use two virtual machines. One will run the Mininet emulated network and the other will run the OpenDaylight controller. I will connect both VMs to a host-only network so they can communicate with each other and with programs running on the host computer, such as ssh and the X11 client.&lt;/p&gt;

&lt;p&gt;I will use VirtualBox to run the Mininet VM that I downloaded from the mininet project web site, which is the easiest way to experiment with Mininet. The Mininet project team provides an Ubuntu 14.04 LTS VM image with Mininet 2.2.1, Wireshark and OpenFlow dissector tools already installed and ready to use.&lt;/p&gt;

&lt;p&gt;My setup :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Host : Ubuntu 18.04&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CPU : Intel i3 5005U&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RAM : 12 GB&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hypervisor : VirtualBox 6&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;setting-up-the-opendaylight-virtual-machine&quot;&gt;Setting up the OpenDaylight Virtual Machine&lt;/h3&gt;

&lt;p&gt;To build the OpenDaylight virtual machine, I downloaded the Ubuntu 18.04 ISO image from the ubuntu.com web site. Then I installed it in a new VM in VirtualBox.&lt;/p&gt;

&lt;p&gt;Give the virtual machine a descriptive name. I named the virtual machine OpenDaylight. Configure it so it uses two CPUs and 2 GB or RAM. This is the minimum configuration to support OpenDaylight. Then add a host-only network adapter to the VM.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/networking/odl.png&quot; alt=&quot;odl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the VM’s VirtualBox network settings, enable two network interfaces. Connect the first network adapter to the NAT interface (which is the default setting) and the second network adapter to the host-only network, vboxnet0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/networking/odl_network.png&quot; alt=&quot;odl_network&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note: If you don’t have a host-only network enabled, click CTRL+H, this will lead you to the Host network manager, then create a new one and don’t forget to enable the DHCP server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/networking/odl_network_host.png&quot; alt=&quot;odl_network_host&quot; /&gt;&lt;/p&gt;

&lt;p&gt;List all the devices using th ip addr show command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/networking/odl_ip.png&quot; alt=&quot;odl_ip&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;connect-to-the-opendaylight-vm-using-ssh&quot;&gt;Connect to the OpenDaylight VM using SSH&lt;/h3&gt;

&lt;p&gt;I like to use a terminal application when working on Virtual Machines. The VirtualBox console window has too many annoying limitations. For example, I cannot cut-and-paste text from my host system onto the VirtualBox console attached to the virtual machine, or vice-versa.&lt;/p&gt;

&lt;p&gt;Open a terminal on host computer and login using SSH:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/networking/odl_ssh.png&quot; alt=&quot;odl_ssh&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; : To enable SSH auto login, I suggest you this &lt;a href=&quot;https://www.linuxbabe.com/linux-server/setup-passwordless-ssh-login&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you are connected to the OpenDaylight virtual machine and can see that the host name in the prompt is changed to is odl, which I configured when installing Ubuntu on the VM.&lt;/p&gt;

&lt;p&gt;I also enabled X forwarding when I started SSH so I can run X programs on the OpenDaylight VM, although we won’t do that in this tutorial.&lt;/p&gt;

&lt;h3 id=&quot;installing-java-and-opendaylight&quot;&gt;Installing Java and OpenDayLight&lt;/h3&gt;

&lt;p&gt;In this lab, we’re gonna use Nitrogen release (0.7.3) since l2switch was removed in Fluorine, so any version before that (Oxygen would be the most recent) should have l2switch. It was removed because the project no longer had an active community.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Run an apt-get update to ensure that your server receives all of the most recent security and application packages.
$ sudo apt-get update
# Now, install the following convenience packages, to make life easier.
$ sudo apt-get -y install unzip vim wget
# Run the following command to install the JRE.
$ sudo apt-get -y install openjdk-8-jre
# Now, ensure that Ubuntu points to JAVA 8. Run the following command. If it does not point to JAVA 8, be sure to select version 8 from the list.
$ sudo update-alternatives --config java
# With the path in hand, run the following command to update your BASHRC file.
$ echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre' &amp;gt;&amp;gt; ~/.bashrc
# Now source your BASHRC file and then check to ensure $JAVA_HOME lives in the environment.
$ source ~/.bashrc
# Double check that $JAVA_HOME ends with /jre.
$ echo $JAVA_HOME
# Download the OpenDaylight Zip Archive using Wget
$ wget https://nexus.opendaylight.org/content/repositories/opendaylight.release/org/opendaylight/integration/karaf/0.7.3/karaf-0.7.3.zip
# Make a directory for the binary.
$ sudo mkdir /usr/local/karaf
# Move the zip archive to the install workspace
$ sudo mv karaf-0.7.3.zip /usr/local/karaf 
$ sudo unzip /usr/local/karaf/karaf-0.8.4.zip -d /usr/local/karaf/ #Unzipping
# Install karaf into user space.
$ sudo update-alternatives --install /usr/bin/karaf karaf /usr/local/karaf/karaf-0.8.4/bin/karaf 1
$ sudo update-alternatives --config karaf
# Execute the karaf command via sudo and pass the -E flag to keep the $JAVA_HOME environment variable.   
$ sudo -E karaf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/networking/odl_karaf.png&quot; alt=&quot;odl_karaf&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java terminal error troubleshoot ([ERROR] Failed to construct terminal; falling back to unsupported
java.lang.NumberFormatException: For input string: “0x100”) :&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;
$ export TERM=xterm-color
$ source /.bashrc

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;installing-opendaylight-features&quot;&gt;Installing OpenDayLight features&lt;/h3&gt;

&lt;p&gt;Next, install the minimum set of features required to test OpenDaylight and the OpenDaylight GUI, type this command inside the karaf cli:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;opendaylight-user@root&amp;gt; feature:install odl-restconf odl-l2switch-switch odl-mdsal-apidocs odl-dlux-core odl-dluxapps-nodes odl-dluxapps-topology odl-dluxapps-yangui odl-dluxapps-yangvisualizer odl-dluxapps-yangman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once installed, these features are permanently added to the controller and will run every time it starts.&lt;/p&gt;

&lt;h2 id=&quot;set-up-the-mininet-virtual-machine&quot;&gt;Set up the Mininet Virtual Machine&lt;/h2&gt;

&lt;p&gt;Start the Mininet VM in the VirtualBox Manager. Now we should have two VMs running: OpenDaylight VM and Mininet VM. If we started the OpenDaylight VM first, it will have IP address 192.168.56.101 and the mininet VM will receive the second available IP address on the host-only network, 192,168.56.102. We can verify this by running the ip command on the Mininet VM console :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/networking/mininet_ip.png&quot; alt=&quot;mininet_ip&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: The Mininet VM is based on Ubuntu Server 14.04, which does not yet use the predictable network interface names like enp0s3 and enp0s8, so we see interface names like eth0 and eth1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;connect-to-the-mininet-vm-using-ssh&quot;&gt;Connect to the Mininet VM using SSH&lt;/h3&gt;

&lt;p&gt;Now open a terminal window on your host computer and SSH into the Mininet VM. Turn X forwarding on. (If you are using Windows, use Xming for an X Window System Server and Putty as an SSH client)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/networking/mininet_ssh.png&quot; alt=&quot;mininet_ssh&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;start-mininet&quot;&gt;Start Mininet&lt;/h3&gt;

&lt;p&gt;On the Mininet VM, start a simple network topology. In this case, we will do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Set up three switches in a linear topology&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each switch will be connected to one host&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The MAC address on each host will be set to a simple number&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The remote controller, OpenDaylight, is at IP address 192.168.56.101:6633 (We will use OpenFlow version 1.3)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Mininet command to start this is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mininet@mininet-vm:~$ sudo mn --topo linear,3 --mac --controller=remote,ip=192.168.56.101,port=6633 --switch ovs,protocols=OpenFlow13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then test it with &lt;em&gt;pingall&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/networking/mininet_topo.png&quot; alt=&quot;mininet_topo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-opendaylight-graphical-user-interface&quot;&gt;The OpenDaylight Graphical User Interface&lt;/h3&gt;

&lt;p&gt;Open a browser on your host system and enter the URL of the OpenDaylight User Interface (DLUX UI). It is running on the OpenDaylight VM so the IP address is 192.168.56.102 and the port, defined by the application, is 8181, So the URL is: http://192.168.56.101:8181/index.html&lt;/p&gt;

&lt;p&gt;The default username and password are both admin.&lt;/p&gt;

&lt;p&gt;Now we see the network topology in the OpenDaylight controller’s topology tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/networking/dlux.png&quot; alt=&quot;odl_topology&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the network that is emulated by the Mininet network emulator. You may test OpenDaylight functionality by building different network topologies in Mininet with different attributes, and by using OpenDaylight to run experiments on the emulated network. For example, you may break links between switches in Mininet to test how the network responds to faults.&lt;/p&gt;

&lt;h2 id=&quot;other-resources&quot;&gt;Other Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7426&quot;&gt;RFC 7426&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Mar 2021 00:00:00 +0100</pubDate>
        <link>/SDN/</link>
        <guid isPermaLink="true">/SDN/</guid>
        
        
        <category>Networking</category>
        
      </item>
    
      <item>
        <title>Linux Bootloaders</title>
        <description>&lt;h3 id=&quot;linux-bootloaders&quot;&gt;Linux Bootloaders&lt;/h3&gt;

&lt;p&gt;The bootloader program helps bridge the gap between the system firmware and the full Linux operating system kernel. In Linux, you have many choices of bootloaders. The most popular ones that you’ll run across are these :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Linux Loader (LILO)&lt;/li&gt;
  &lt;li&gt;Grand Unified Bootloader (GRUB) Legacy&lt;/li&gt;
  &lt;li&gt;GRUB2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the original versions of Linux, the Linux Loader (LILO) bootloader was the only one available. It was extremely limited in what it could do, but it accomplished its purpose, that is, loading the Linux kernel from the BIOS startup. LILO became the default bootloader used by Linux distributions in the 1990s. The LILO configuration file is stored in a single file, UEFI, &lt;em&gt;/etc/lilo.conf&lt;/em&gt;, which defines the systems to boot. Unfortunately, LILO doesn’t work with UEFI systems, so it has limited use on modern systems and is quickly fading into history.&lt;/p&gt;

&lt;p&gt;The first version of the GRUB bootloader (now called GRUB Legacy) was created in 1999 to provide a more robust and configurable bootloader to replace LILO. GRUB quickly became the default bootloader for all linux distributions, whether they run on BIOS or UEFI systems.&lt;/p&gt;

&lt;p&gt;GRUB2 was created in 2005 as a total rewrite of the GRUB Legacy system. It supports advanced features, such as the ability to load hardware driver modules and use logic statements to alter the boot menu options dynamically, depending on conditions detected on the system (such as if an external hard drive is connected).&lt;/p&gt;

&lt;h3 id=&quot;grub-legacy&quot;&gt;GRUB Legacy&lt;/h3&gt;

&lt;p&gt;GRUB Legacy allows you to select multiple kernels and /or operating systems using a menu interface as well as an interactive shell. You configure the menu interface to provide options for each kernel or operating system you wish to boot. The interactive shell provides a way for you to customize boot commands on the fly.&lt;/p&gt;

&lt;p&gt;Both the menu and the interactive shell utilize a set of commands that control features of the bootloader.&lt;/p&gt;

&lt;h3 id=&quot;configuring-grub-legacy&quot;&gt;Configuring GRUB Legacy&lt;/h3&gt;

&lt;p&gt;When you use the GRUB Legacy interactive menu, you need to tell it what options to show. You do that using special GRUB menu commands.
The GRUB Legacy system stores the menu commands in a standard text configuration file. The configuration file used by GRUB Legacy is &lt;em&gt;menu.lst&lt;/em&gt;, and it is stored in the &lt;em&gt;/boot/grub&lt;/em&gt; folder. (While not a requirement, some Linux Distributions create a separate &lt;em&gt;/boot&lt;/em&gt; partition on the hard drive.) Red Hat-derived Linux distributions (such as CentOS and Fedora) use &lt;em&gt;grub.conf&lt;/em&gt; for the configuration file.&lt;/p&gt;

&lt;p&gt;The GRUB Legacy configuration file consists of two sections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Global definitions&lt;/li&gt;
  &lt;li&gt;Operating system boot definitions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The global definitions section defines commands that control the overall operation of the GRUB Legacy boot menu. The global definitions must appear first in the configuration file. There are only handful of global settings.&lt;/p&gt;

&lt;h3 id=&quot;grub-2&quot;&gt;GRUB 2&lt;/h3&gt;
&lt;p&gt;Since the GRUB2 system was intended as an improvement over GRUB Legacy, many of the features are the same, with just a few twists. For example, the GRUB2 system changes the configuration filename to &lt;em&gt;grub.cfg&lt;/em&gt;, and it stores it in the &lt;em&gt;/boot/grub/&lt;/em&gt; folder. (This allows you to have both GRUB Legacy and GRUB2 installed at the same time.)&lt;/p&gt;

&lt;h3 id=&quot;configuring-grub2&quot;&gt;Configuring GRUB2&lt;/h3&gt;

&lt;p&gt;There are also a few changes to the commands used in GRUB2. FOr example, instead of the &lt;em&gt;title&lt;/em&gt; command, GRUB uses the &lt;em&gt;menuentry&lt;/em&gt; command, and you must also enclose each individual boot section within braces immediately following the &lt;em&gt;menuentry&lt;/em&gt; command.
Here’s an example of a GRUB2 configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;menuentry &quot;CentOS Linux&quot;{
    set root=(hd1,1)
    linux /boot/vmlinuz
    initrd /initrd
}

menuentry &quot;Windows&quot; {
    set root=(hd0,1)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The configuration process for GRUB2 is also somewhat different. While GRUB2 uses the &lt;em&gt;/boot/grub/grub.cfg&lt;/em&gt; file as the configuration file, you should never modify that file. Instead, there are seperate configuration files stored in the &lt;em&gt;/etc/grub.d&lt;/em&gt; folder. This allows you (or the system) to create individual configuration files for each boot option installed on your system (for example, one configurationo file for booting Linux and another for booting Windows).&lt;/p&gt;

&lt;h3 id=&quot;installing-grub2&quot;&gt;Installing GRUB2&lt;/h3&gt;

&lt;p&gt;Unlike GRUB Legacy, you don’t need t install GRUB2. All you need to do is to rebuild the main installation file by running the &lt;em&gt;grub-mkconfig&lt;/em&gt; program to the &lt;em&gt;grub.cfg&lt;/em&gt; configuration file or use the &lt;em&gt;-o&lt;/em&gt; option to specify the output file. By default, the &lt;em&gt;grub-mkconfig&lt;/em&gt; program just outputs the new configuration file commands to standard output.&lt;/p&gt;

&lt;h3 id=&quot;alternative-bootloaders&quot;&gt;Alternative Bootloaders&lt;/h3&gt;

&lt;p&gt;While GRUB Legacy and GRUB2 are the most popular Linux bootloader programs, you may run into a few others, depending on which Linux distributions you are using.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Systemd-boot&lt;/em&gt; bootloader program is starting to gain popularity in Linux Distributions that use the systemd init method.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Mar 2021 00:00:00 +0100</pubDate>
        <link>/Linux_bootloaders/</link>
        <guid isPermaLink="true">/Linux_bootloaders/</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Linux Boot Process </title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;When you on the power to your linux system, it triggers a series of events that eventually leads to the login prompt. There may be times when your linux systel doesn’t boot quite correctly, or perhaps an application that you expected to be running in background mode isn’t running. In those situations, it helps to have a basic understanding of how Linux boots the operating system and starts programs so that you can &lt;strong&gt;troubleshoot&lt;/strong&gt; the problem.&lt;/p&gt;

&lt;h3 id=&quot;following-the-boot-process&quot;&gt;Following the Boot Process&lt;/h3&gt;

&lt;p&gt;The linux boot process can be split into three main steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The workstation firmware starts, performing a quick check of the hardware, called a &lt;em&gt;Power-On-Self Test (POST)&lt;/em&gt;, and then it looks for a bootloader program to run from a bootable device.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The bootloader runs and determines what Linux kernel program to load.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The kernel program loads into memory and starts the necessary background programs required for the system to operate (such as a graphical desktop manager for desktops or web and database servers for servers.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These 3 steps might seem so simple on the surface, but a somewhat complicated ballet of operations happens behind the scenes to keep the boot process working. Each step performs several actions as it prepares your system to run Linux.&lt;/p&gt;

&lt;h3 id=&quot;viewing-the-boot-process&quot;&gt;Viewing the Boot Process&lt;/h3&gt;

&lt;p&gt;You can monitor the Linux boot process by watching the system console screen as the system boots. You’ll see lots of informative messages scroll by as the system detects hardware and loads the software.&lt;/p&gt;

&lt;p&gt;Usually the boot messages scroll by somewhat quickly, and it’s hard to see just what’s happening. If you need to troubleshoot boot problems, you can review the boot-time messages using the &lt;em&gt;dmesg&lt;/em&gt; command. Most Linux distributions copy the boot kernel messages into a special ring buffer in memory called the &lt;em&gt;kernel ring buffer&lt;/em&gt;. The buffer is circular and set to a predetrmined size. As new messages are logged into the buffer, older messages are rotated out.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;dmesg&lt;/em&gt; command displays the most recent boot messages that are currently stored in the kernel ring buffer :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[    0.000000] microcode: microcode updated early to revision 0x2f, date = 2019-11-12
[    0.000000] Linux version 5.4.0-66-generic (buildd@lgw01-amd64-016) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #74~18.04.2-Ubuntu SMP Fri Feb 5 11:17:31 UTC 2021 (Ubuntu 5.4.0-66.74~18.04.2-generic 5.4.86)
[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-5.4.0-66-generic root=UUID=735fb175-3ba7-44e8-9308-b1edab99ff24 ro quiet splash
[    0.000000] KERNEL supported cpus:
[    0.000000]   Intel GenuineIntel
[    0.000000]   AMD AuthenticAMD
[    0.000000]   Hygon HygonGenuine
[    0.000000]   Centaur CentaurHauls
[    0.000000]   zhaoxin   Shanghai  
[    0.000000] x86/fpu: Supporting XSAVE feature 0x001: 'x87 floating point registers'
[    0.000000] x86/fpu: Supporting XSAVE feature 0x002: 'SSE registers'
[    0.000000] x86/fpu: Supporting XSAVE feature 0x004: 'AVX registers'
[    0.000000] x86/fpu: xstate_offset[2]:  576, xstate_sizes[2]:  256
[    0.000000] x86/fpu: Enabled xstate features 0x7, context size is 832 bytes, using 'standard' format.
[    0.000000] BIOS-provided physical RAM map:
[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009e7ff] usable
[    0.000000] BIOS-e820: [mem 0x000000000009e800-0x000000000009ffff] reserved
[    0.000000] BIOS-e820: [mem 0x00000000000e0000-0x00000000000fffff] reserved
[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x000000008ecb8fff] usable
[    0.000000] BIOS-e820: [mem 0x000000008ecb9000-0x000000008f5b8fff] reserved
[    0.000000] BIOS-e820: [mem 0x000000008f5b9000-0x000000009c9cdfff] usable[    0.000000] microcode: microcode updated early to revision 0x2f, date = 2019-11-12
[    0.000000] Linux version 5.4.0-66-generic (buildd@lgw01-amd64-016) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #74~18.04.2-Ubuntu SMP Fri Feb 5 11:17:31 UTC 2021 (Ubuntu 5.4.0-66.74~18.04.2-generic 5.4.86)
[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-5.4.0-66-generic root=UUID=735fb175-3ba7-44e8-9308-b1edab99ff24 ro quiet splash
[    0.000000] KERNEL supported cpus:
[    0.000000]   Intel GenuineIntel
[    0.000000]   AMD AuthenticAMD
[    0.000000]   Hygon HygonGenuine
[    0.000000]   Centaur CentaurHauls
[    0.000000]   zhaoxin   Shanghai  
[    0.000000] x86/fpu: Supporting XSAVE feature 0x001: 'x87 floating point registers'
[    0.000000] x86/fpu: Supporting XSAVE feature 0x002: 'SSE registers'
[    0.000000] x86/fpu: Supporting XSAVE feature 0x004: 'AVX registers'
[    0.000000] x86/fpu: xstate_offset[2]:  576, xstate_sizes[2]:  256
[    0.000000] x86/fpu: Enabled xstate features 0x7, context size is 832 bytes, using 'standard' format.
[    0.000000] BIOS-provided physical RAM map:
[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009e7ff] usable
[    0.000000] BIOS-e820: [mem 0x000000000009e800-0x000000000009ffff] reserved
[    0.000000] BIOS-e820: [mem 0x00000000000e0000-0x00000000000fffff] reserved
[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x000000008ecb8fff] usable
[    0.000000] BIOS-e820: [mem 0x000000008ecb9000-0x000000008f5b8fff] reserved
[    0.000000] BIOS-e820: [mem 0x000000008f5b9000-0x000000009c9cdfff] usable
[    0.000000] BIOS-e820: [mem 0x000000009c9ce000-0x000000009cebdfff] reserved
[    0.000000] BIOS-e820: [mem 0x000000009cebe000-0x000000009cfbdfff] ACPI NVS
[    0.000000] BIOS-e820: [mem 0x000000009cfbe000-0x000000009cffdfff] ACPI data
[    0.000000] BIOS-e820: [mem 0x000000009cffe000-0x000000009cffefff] usable
e000-0x000000009cffdfff] ACPI data
[    0.000000] BIOS-e820: [mem 0x000000009cffe000-0x000000009cffefff] usable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most linux distributions also store the boot messages in a log file, usually in the &lt;em&gt;/var/log&lt;/em&gt; folder. For debian-based systems, the file is usually &lt;em&gt;/var/log/boot&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Although it helps to be able to see the different messages generated during boot time, it is also helpful to know just what generates those messages.&lt;/p&gt;

&lt;h3 id=&quot;the-firmware-startup&quot;&gt;The Firmware Startup&lt;/h3&gt;

&lt;p&gt;All IBM-compatible workstations and servers utilize some type of built-in firmware to control how the installed operating system starts. On older workstations and servers, this firmware was called the &lt;em&gt;Basic Input/Output System (BIOS)&lt;/em&gt;. On newer workstations and servers, a new method, called the *Unified Extensible Firmware Interface (UEFI) * is responsible for maintaining the system hardware status and launching an installed operating system.&lt;/p&gt;

&lt;p&gt;Both methods eventually launch the main operating system program, however, and each method uses different ways of doing that.&lt;/p&gt;

&lt;h3 id=&quot;the-bios-startup&quot;&gt;The BIOS Startup&lt;/h3&gt;

&lt;p&gt;The BIOS firmware found in older workstations and servers was somewhat limited in what it could do. The BIOS firmware had a simplistic menu interface that allowed you to change some settings to control how the system found hardware and define what device the BIOS should use to start the operating system.&lt;/p&gt;

&lt;p&gt;One of the limitations of the original BIOS firmware was that it could read only one sector’s worth of data from a hard drive into memory in order to run. As you can probably guess, that’s not enough space to load an entire operating system. To get around that limitation, most operating systems (including Linux and Microsoft Windows) split the boot process into two parts.&lt;/p&gt;

&lt;p&gt;First, the BIOS runs a bootloader program, The &lt;em&gt;bootloader&lt;/em&gt; is a small program that initializes the necessary hardware to find and run the full operating system, which is usually found at another location on the same hard drive but sometimes situated on  a separate internal or external storage device.&lt;/p&gt;

&lt;p&gt;The bootloader program usually has a configuration file, so you can tell it where to find tha actual operating system file to run or even to produce a small menu allowing the user to boot between multiple operating systems.&lt;/p&gt;

&lt;p&gt;To get things started, the BIOS must know where to find the bootloader program on 
ab installed storage device. Most BIOS setups allow you yo load the bootloader program from several locations (internal/external hard drive, CD/DVD, etc.. )&lt;/p&gt;

&lt;p&gt;When booting from a hard drive, you must designate which hard drive, and which partition on the hard drive, the BIOS should load the bootloader program from. This is done by defining a &lt;em&gt;Master Boot Record (MBR)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The MBR is the first sector on the first hard drive partition on the system. There is only one MBR for the computer system. The BIOS looks for the MBR and reads the program stored there into memory. Since the bootloader program must fit in one sector, it must be very small, so it can’t do much. The bootloader program mainly points to the location of the actual operating system kernel file, which is stored in a boot sector of a separate partition on the system. There are no size limitations on the kernel boot file.&lt;/p&gt;

&lt;p&gt;The bootloader program isn’t required to point directly to an operating system kernel file, it can point to any type of program including another bootloader program. You can create a primary bootloader program that points to a secondary bootloader program, which provides options to load multiple operating systems. This process is called chainloading.&lt;/p&gt;

&lt;h3 id=&quot;the-uefi-startup&quot;&gt;The UEFI Startup&lt;/h3&gt;

&lt;p&gt;While there were plenty of limitations with BIOS, computer manufactures learned to live with them, and BIOS was the default standard for IBM compatible systems for many years. However, as operating systems became more complicated, it eventually became clear that a new boot method needed to be developed.&lt;/p&gt;

&lt;p&gt;Intel created the &lt;em&gt;Extensible Firmware Interface (EFI)&lt;/em&gt; in 1998 to address some of the limitations of  BIOS. The adoptions of EFI was somewhat of a slow process, but by 2005 the idea caught on with other vendors, and the Universal EFI (UEFI) specification was adopted as a standard. These days just about all IBM-compatible desktop and server systems utilize the UEFI firmware standard.&lt;/p&gt;

&lt;p&gt;Instead of relying on a single boot sector on a hard drive to hold the bootloader program, UEFI specifies a special disk partition, called the EFI system partition (ESP) to store bootloader programs. This allows for any size of bootloader program, plus the ability to store multiple bootloader programs for multiple operating systems.&lt;/p&gt;

&lt;p&gt;The ESP setup utilizes the old Microsoft File Allocation Table (FAT) filesystem to store the bootloader programs. On Linux Systems, the ESP is typically mounted in the &lt;em&gt;/boot/efi&lt;/em&gt; folder, and the bootloader files are typically stored using the &lt;em&gt;.efi&lt;/em&gt; filename extension.&lt;/p&gt;

&lt;p&gt;The UEFI firmware utilizes a built-in mini bootloader (sometimes referred to as a boot manager), which allows you to configure just which bootloader program file to launch.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Not all linux distributions support the UEFI firmware, it you’re using a UEFI system, make sure that the linux distribution you select supports it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With UEFI, you need to register each individual bootloader file that you want to appear at boot time in the boot manager interface menu. The &lt;em&gt;efibootmgr&lt;/em&gt; Linux application allows you to create and remove boot entries or change the boot order. The UEFI interface includes a shell environment, allowing you to enter commands to alter boot settings, or select the bootloader to run each time you boot the system.&lt;/p&gt;

&lt;p&gt;Once the firmware finds and runs the bootloader, its job is done.&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Mar 2021 00:00:00 +0100</pubDate>
        <link>/LPIC/</link>
        <guid isPermaLink="true">/LPIC/</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Spanning Tree Protocol</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Once upon a time, a company called Digital Equipment Corporation (DEC) was purchased and renamed Compaq. But before that happened, DEC created the original version of &lt;em&gt;Spanning Tree Protocol&lt;/em&gt;, or STP.&lt;/p&gt;

&lt;h3 id=&quot;main-task-of-stp&quot;&gt;Main task of STP&lt;/h3&gt;

&lt;p&gt;STP’s main task is to stop network loops from occurring on your layer 2 network (bridges or switches). It vigilantly monitors the network to find all links, making sure that no loops occur by shutting down any redundant links. STP uses the &lt;em&gt;spanning-tree algorithm&lt;/em&gt; (STA) to first create a topology database and then search out and destroy redundant links. With STP running, frames will be forwarded only on the premium, STP-picked links.&lt;/p&gt;

&lt;h3 id=&quot;spanning-tree-terms&quot;&gt;Spanning Tree Terms&lt;/h3&gt;

&lt;p&gt;Before I get into describing the details of how STP works in the network, you need to understand some basic ideas and terms and how they relate within the layer 2 switched network:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Root bridge&lt;/strong&gt; : The root bridge is the bridge with the best bridge ID. With STP, the key is for all the switches in the network to elect a root bridge that becomes the focal point in the network. All other decisions in the network, such as which port is to be blocked and which port is to be put in forwarding mode, are made from the perspective of this root bridge.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;BPDU&lt;/strong&gt; : All the switches exchange information to use in the selection of the root switch as well as in subsequent configuration of the network. Each switch compares the parameters in the &lt;em&gt;Bridge Protocol Data Unit (BPDU)&lt;/em&gt; that it sends to one neighbor with the one that it receives from another neighbor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bridge ID&lt;/strong&gt; : The bridge ID is how STP keeps track of all the switches in the network. It is determined by a combination of the bridge priority and the base MAC address. The bridge with the lowest bridge ID becomes the root bridge in the network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Nonroot bridges&lt;/strong&gt; : These are all bridges that are not the root bridge. Nonroot bridges exchange BPDUs with all bridges and update the STP topology database on all switches, preventing loops and providing a measure of defense against link failures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Port cost&lt;/strong&gt; : Port cost determines the best path when multiple links are used between two switches and none of the links is a root port. The cost of a link is determined by the bandwidth of a link.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Root port&lt;/strong&gt; : The root port is always the link directly connected to the root bridge, or the shortest path to the root bridge. If more than one link connects to root bridge, then a port cost is determined by checking the bandwidth of each link. The lowest-cost port becomes the root port. If multiple links have the same cost, the bridge with the lower advertising bridge ID is used. Since multiple links can be from the same device, the lowest port number will be used.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Designated port&lt;/strong&gt; : A designated port is one that has been determined as having the best (lowest) cost. A designated port will be marked as a forwarding port.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Nondesignated port&lt;/strong&gt; : A nondesignated port is one with a higher cost than the designated port. Nondesignated ports are put in blocking mode - they are not forwarding ports.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Forwarding port&lt;/strong&gt; : A forwarding port forwards frames.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Blocked port&lt;/strong&gt; : A blocked port is the port that, in order to prevent loops, will not forward frames. However, a blocked port will always listen to frames.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spanning-tree-operations&quot;&gt;Spanning Tree Operations&lt;/h3&gt;

&lt;p&gt;As I’ve said before, STP’s job is to find all links in the network and shut down any redundant ones, thereby preventing network loops from occurring.&lt;/p&gt;

&lt;p&gt;STP accomplishes this by first electing a root bridge that will forward through all ports and act as a point of reference for all other devices in the STP domain. Once all switches agree on who the root bridge is, every bridge must find its one and only allotted root port. Each and every link between two switches must have one, and only one, designated port, the port on that link that provides the highest bandwidth to the root. It’s really important to remember that a bridge can go through many other bridges to get to the root, meaning that it’s not always the shortest path but the fastest (highest bandwidth) path that will be the one used.&lt;/p&gt;

&lt;p&gt;Obviously, every port on the root switch is a designated port, as you can get no closer to the root than being the root.
After the dust settles, any port that is not either root port or a designated port - which means it is a nonroot, nondesignated port - is placed in the blocking state, thus breaking the switching loop.&lt;/p&gt;

&lt;h3 id=&quot;selecting-the-root-bridge&quot;&gt;Selecting the Root Bridge&lt;/h3&gt;

&lt;p&gt;The bridge ID is used to elect the root bridge in the STP domain and to determine the root port for each of the remaining devices in the STP domain. This ID is 8 bytes long and includes both the priority and the MAC address of the device. The default priority on all devices running the IEEE STP version is 32.768.&lt;/p&gt;

&lt;p&gt;To determine the root bridge, you combine the priority of each bridge with its MAC address. If two switches or bridges happen to have the same priority value, the MAC address becomes the tiebreaker for figuring out which one has the lowest (best) ID. It’s like this: If two switches - I’ll name them A and B - Both use the default priority of 32768, then the MAC address will be used instead. Just remember that the lower value is the better one when it comes to electing a root bridge.&lt;/p&gt;

&lt;p&gt;By default, BPDUs are sent every two seconds out all active ports on a bridge/switch - again, the bridge with the lowest bridge ID is elected the root bridge. You can change the bridge’s ID by lowering its priority so that it will become a root bridge automatically.&lt;/p&gt;

&lt;p&gt;Being able to do that is important in a large switched network, it ensures that the best paths are chosen, efficiency is what you’re after here.&lt;/p&gt;

&lt;p&gt;To determine which port STP will shut down, it will first check each link’s amount of bandwidth and then shut down the link with the lowest bandwidth value. If both links have the same bandwidth value, STP will typically shut down the higher of the port numbers.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jan 2021 00:00:00 +0100</pubDate>
        <link>/STP/</link>
        <guid isPermaLink="true">/STP/</guid>
        
        
        <category>Networking</category>
        
      </item>
    
      <item>
        <title>Linux - Find Command : Cheat Sheet </title>
        <description>&lt;script src=&quot;https://gist.github.com/seifallahhomrani1/c3c02887aab8f077690505bfb726d34e.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Tue, 19 Jan 2021 00:00:00 +0100</pubDate>
        <link>/Find-Command/</link>
        <guid isPermaLink="true">/Find-Command/</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Lord Of SQLi : goblin Writeup</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/writeups/los/goblin.png&quot; style=&quot;  width: 100%; max-width: 600px; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Previous WriteUp&lt;/strong&gt; : &lt;a href=&quot;/ctf-writeup/2021/01/03/LOS-gremlin.html&quot;&gt;gremlin&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;provided-code&quot;&gt;Provided code&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php 
  //Challenge Preparation
  include &quot;./config.php&quot;; 
  login_chk(); 
  $db = dbconnect(); 
  // - - - - - - 
  if(preg_match('/prob|_|\.|\(\)/i', $_GET[no])) exit(&quot;No Hack ~_~&quot;); 
  if(preg_match('/\'|\&quot;|\`/i', $_GET[no])) exit(&quot;No Quotes ~_~&quot;); 
  $query = &quot;select id from prob_goblin where id='guest' and no={$_GET[no]}&quot;; 
  echo &quot;&amp;lt;hr&amp;gt;query : &amp;lt;strong&amp;gt;{$query}&amp;lt;/strong&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;br&amp;gt;&quot;; 
  $result = @mysqli_fetch_array(mysqli_query($db,$query)); 
  if($result['id']) echo &quot;&amp;lt;h2&amp;gt;Hello {$result[id]}&amp;lt;/h2&amp;gt;&quot;; 
  if($result['id'] == 'admin') solve(&quot;goblin&quot;);
  highlight_file(__FILE__); 
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;explanation&quot;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Challenge preparation&lt;/em&gt;
First of all, it includes this php file called &lt;em&gt;config.php&lt;/em&gt;, then it checks if you are logged in or not. After that, it connect to the database.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;no field check&lt;/em&gt; 
There’s a double check for the &lt;em&gt;no&lt;/em&gt; field, firstly it checks for :&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;First REGEX explanation&lt;/em&gt;
/prob|_|.|()/i
&lt;strong&gt;1st Alternative prob&lt;/strong&gt;
prob matches the characters prob literally (case insensitive)
&lt;strong&gt;2nd Alternative _&lt;/strong&gt;
_ matches the character _ literally (case insensitive)
&lt;strong&gt;3rd Alternative .&lt;/strong&gt;
. matches the character . literally (case insensitive)
&lt;strong&gt;4th Alternative ()&lt;/strong&gt;
( matches the character ( literally (case insensitive)
) matches the character ) literally (case insensitive)
&lt;strong&gt;Global pattern flags&lt;/strong&gt;
i modifier: insensitive. Case insensitive match (ignores case of [a-zA-Z])&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Second REGEX explanation&lt;/em&gt;
/'|&quot;|`/i
1st Alternative '
' matches the character ‘ literally (case insensitive)
2nd Alternative &quot;
&quot; matches the character “ literally (case insensitive)
3rd Alternative `
` matches the character ` literally (case insensitive)
Global pattern flags
i modifier: insensitive. Case insensitive match (ignores case of [a-zA-Z])&lt;/p&gt;

&lt;p&gt;Then it executes the final query, and if result id == admin then the problem is solved, else, it returns “Hello {$result[id]}”&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;As mentioned before, we can’t use quotes, but we can use another methods like :&lt;/p&gt;

&lt;h3 id=&quot;substr&quot;&gt;SUBSTR()&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.w3schools.com/sql/func_mysql_substr.asp&quot;&gt;SUBSTR()&lt;/a&gt; function extracts a substring from a string (starting at any position). 
The main idea is that we extract the first character of the id field that matches if it equals 97 (ASCII character of ‘a’).&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Payload&lt;/em&gt; : /?no=0 or ascii(substr(id,1,1))=97&lt;/p&gt;

&lt;h3 id=&quot;order-by&quot;&gt;ORDER BY&lt;/h3&gt;
&lt;p&gt;If we use this function, SQL will sort data by column according to asc.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Payload&lt;/em&gt; : /?no=2 or 1 order by id&lt;/p&gt;

&lt;h3 id=&quot;limit-11&quot;&gt;LIMIT 1,1&lt;/h3&gt;
&lt;p&gt;This function will cut the rows from offset-index to (offset+amount)-index.&lt;/p&gt;

&lt;p&gt;Start of index is 0,0.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Payload&lt;/em&gt; : /?no=0 or 1 limit 1,1&lt;/p&gt;

&lt;p&gt;Resources : &lt;a href=&quot;https://portswigger.net/support/sql-injection-bypassing-common-filters&quot;&gt;PortSwigger - Bypassing Common filters&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jan 2021 00:00:00 +0100</pubDate>
        <link>/LOS-goblin/</link>
        <guid isPermaLink="true">/LOS-goblin/</guid>
        
        
        <category>CTF-WriteUp</category>
        
      </item>
    
      <item>
        <title>Lord Of SQLi : gremlin Writeup</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/writeups/los/sql1.png&quot; style=&quot;  width: 100%; max-width: 600px; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources :&lt;/strong&gt; &lt;a href=&quot;/databases/2020/11/24/SQL-Injection.html&quot;&gt;SQL INJECTION - Introduction&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://los.rubiya.kr/&quot;&gt;‘Lord of SQL Injection’&lt;/a&gt;, a site where you can learn about SQL injection vulnerabilities while capturing dungeons. 
LoS provides 49 stepwise SQLinjection challenges.
Challenges are about SQLinjection at mysql, sqlite, mssql, mongodb, webapp what protected by WAF.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Site origin Country : Korea&lt;/li&gt;
  &lt;li&gt;Language : English&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gremlin&quot;&gt;Gremlin&lt;/h3&gt;
&lt;p&gt;Given a php code :&lt;/p&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt; &amp;lt;?php
  include &quot;./config.php&quot;;
  login_chk();
  $db = dbconnect();
  if(preg_match('/prob|_|\.|\(\)/i', $_GET[id])) exit(&quot;No Hack ~_~&quot;); // do not try to attack another table, database!
  if(preg_match('/prob|_|\.|\(\)/i', $_GET[pw])) exit(&quot;No Hack ~_~&quot;);
  $query = &quot;select id from prob_gremlin where id='{$_GET[id]}' and pw='{$_GET[pw]}'&quot;;
  echo &quot;&amp;lt;hr&amp;gt;query : &amp;lt;strong&amp;gt;{$query}&amp;lt;/strong&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;br&amp;gt;&quot;;
  $result = @mysqli_fetch_array(mysqli_query($db,$query));
  if($result['id']) solve(&quot;gremlin&quot;);
  highlight_file(__FILE__);
?&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;explanation&quot;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;Challenge preparation&lt;/em&gt;
First of all, it includes this php file called &lt;em&gt;config.php&lt;/em&gt;, then it checks if you are logged in or not. After that, it connect to the database.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;The fun begins&lt;/em&gt;
&lt;a href=&quot;https://www.php.net/manual/en/function.preg-match.php&quot;&gt;preg_match&lt;/a&gt; is a php function that performs a regular expression match. If the provided regex found in the &lt;em&gt;id&lt;/em&gt; or &lt;em&gt;pw&lt;/em&gt; fields it exits with “No Hack ~_~” message?&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;em&gt;REGEX explanation&lt;/em&gt;
/prob|_|.|()/i
&lt;strong&gt;1st Alternative prob&lt;/strong&gt;
prob matches the characters prob literally (case insensitive)
&lt;strong&gt;2nd Alternative _&lt;/strong&gt;
_ matches the character _ literally (case insensitive)
&lt;strong&gt;3rd Alternative .&lt;/strong&gt;
. matches the character . literally (case insensitive)
&lt;strong&gt;4th Alternative ()&lt;/strong&gt;
( matches the character ( literally (case insensitive)
) matches the character ) literally (case insensitive)
&lt;strong&gt;Global pattern flags&lt;/strong&gt;
i modifier: insensitive. Case insensitive match (ignores case of [a-zA-Z])&lt;/p&gt;

&lt;p&gt;Then, with the provided &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;pw&lt;/em&gt;, the SQL query is ready to be executed, and it is printed out using the following &lt;em&gt;echo&lt;/em&gt;. 
Using the &lt;a href=&quot;https://www.php.net/manual/en/mysqli-result.fetch-array.php&quot;&gt;mysqli_fetch_array&lt;/a&gt; function, which fetch a result row as an associative, a numeric array, or both.&lt;/p&gt;

&lt;p&gt;Finally, it checks if the id has a value, if it has, the challenge is solved !&lt;/p&gt;

&lt;p&gt;I just want to mention that the &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;pw&lt;/em&gt; field are gonna be passed in the url like this : ?id=
If you’ve read my article mentioned above, you can solve this challenge easily by closing the id field using an apostrophe then executing a condition that returns true as a result like 1=1. 
So the final result will be : 
?id=’ OR 1=1 
Then we need to comment out the &lt;em&gt;pw&lt;/em&gt; field so we insert a double dash followed by a space (Black Space = %20 : URL encoding) or a hashtag(hashtag = %23 : URL encoding )
?id=’ OR 1=1 –%20
So the final query will be  :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;select id from prob_gremlin where id='' OR 1=1 -- ' and pw=''
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GREMLIN CLEAR !&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2021 00:00:00 +0100</pubDate>
        <link>/LOS-gremlin/</link>
        <guid isPermaLink="true">/LOS-gremlin/</guid>
        
        
        <category>CTF-WriteUp</category>
        
      </item>
    
      <item>
        <title>Java - OOP Concepts</title>
        <description>&lt;p&gt;Basically, the Java control statements are the same as in C language.&lt;/p&gt;

&lt;h3 id=&quot;if-else-statement&quot;&gt;if-else statement&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Java_Nested_if{
    public static void main(String[] args){
        int age = 25; 
        int weight = 48; 


        if (age&amp;gt;=18){
            if (weight&amp;gt;50){
                System.out.println(&quot;You can donate blood&quot;);
            }
            else{
                System.out.println(&quot;Go eat some fucking food&quot;);
            }
        else{
            System.out.println(&quot;Sorry lil boy, go play with your toys&quot;);
        }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;switch-statement&quot;&gt;Switch statement&lt;/h3&gt;

&lt;p&gt;The switch statement tests the equality of a variable against multiple values.&lt;/p&gt;

&lt;p&gt;Rules :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There can be one or N number of case values for a switch expression.&lt;/li&gt;
  &lt;li&gt;The case value must be of switch expression type only. The case value must be literal or constant. It doesn”t allow variables.&lt;/li&gt;
  &lt;li&gt;The case values must be unique. In case of duplicate value, it renders compile-time error.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Switch statement example:
```java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;public class SwitchExample2{
    public static void main(String[] args){&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    int number = 20; 

    switch(number){
        case 10 : System.out.println(&quot;10&quot;);
        case 20: System.out.println(&quot;20&quot;);
        case 30 : System.out.println(&quot;30&quot;);
        default : System.out.println(&quot;Not in 10, 20,30&quot;);
    }


} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Dec 2020 00:00:00 +0100</pubDate>
        <link>/control-statements/</link>
        <guid isPermaLink="true">/control-statements/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Java - Variables</title>
        <description>&lt;h3 id=&quot;java-variables&quot;&gt;Java Variables&lt;/h3&gt;

&lt;p&gt;A variable is a container which holds the value while the Java Program is executed. A variable is assigned with a data type.&lt;/p&gt;

&lt;p&gt;Variable is a name of memory location. There are three types of variables in java: local, instance and static.&lt;/p&gt;

&lt;p&gt;There are two types of data types in Java: primitive and non-primitive.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Local Variable&lt;/strong&gt;
A variable declared inside the body of the method is called local variable. You can use this variable only within that method and the other methods in the class aren’t even aware that the variable exists.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A local variable cannot be defined with static keyword.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Instance Variable&lt;/strong&gt;
A variable declared inside the class but outside the body of the method, is called instance variable. 
It is not declared as static.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is called instance variable because its value is instance specific and is not shared among instances.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Static Variable&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A variable which is declared as static is called static variable. It cannot be local. You can create a single copy of static variable and share among all the instances of the class . Memory allocation for static variable happens only once when the class is loaded in the memory.&lt;/p&gt;

&lt;h4 id=&quot;example-to-understand-the-types-of-variables-in-java&quot;&gt;Example to understand the types of variables in Java&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class A {
    int data=50; //instance variable
    static int m=100; // static variable


    void method(){
        int n=90; //local variable
    }
} //end of class
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;java-variable-example--add-two-numbers&quot;&gt;Java Variable Example : Add Two Numbers&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class Simple{
    public static void main(String[] args){
        int a=10; //a is an instance variable
        int b=10; //b is an instance variable
        int c=a+b; 
        System.out.println(c);
    }   
}

Output : 20
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;java-variable-example--widening&quot;&gt;Java Variable Example : Widening&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class Simple{
    public static void main(String[] args){
        int a=10; 
        float f=a;
        System.out.println(a);
        System.out.println(f);
        
    }
}

Output : 
10
10.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;java-variable-example-narrowing-typecasting&quot;&gt;Java Variable Example: Narrowing (Typecasting)&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class simple{
    public static void main(String[] args){
        float f=10.5f; //f is placed after value because by default value is double, so to tell the compiler to treat is as float explicitly we use f or F
        int a=f; // This will give a runtime error
        int a = (int)f; // This is typecasting
        System.out.println(f); 
        System.out.println(a); 

    }
}

Output : 
10.5
10
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;java-variable-example--overflow&quot;&gt;Java Variable Example : Overflow&lt;/h4&gt;

&lt;p&gt;Overflow occurs when we assign such a value to a variable which is more than the maximum permissible value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class Simple{
    public static void main(String[] args){
        //Overflow
        int a=130; 
        byte b = (byte)a; //Max Value of byte is 126  
        System.out.println(a);
        System.out.println(b);
    }
}

Output : 
130
-126
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;java-variable-example--adding-lower-type&quot;&gt;Java Variable Example : Adding Lower Type&lt;/h4&gt;

&lt;p&gt;```java
class Simple{
    public static void main(String[] args){
        byte a = 10; 
        byte b = 10; 
        byte c = a+b; // Compile Time Error : because a+b will be int 
        byte c = (byte)(a+b);
        System.out.println(c);
    }
}&lt;/p&gt;

&lt;p&gt;Output :
20&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Dec 2020 00:00:00 +0100</pubDate>
        <link>/Java-Variables/</link>
        <guid isPermaLink="true">/Java-Variables/</guid>
        
        
        <category>Java</category>
        
      </item>
    
  </channel>
</rss>
